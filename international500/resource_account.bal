// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_ACCOUNT = "http://hl7.org/fhir/StructureDefinition/Account";
public const RESOURCE_NAME_ACCOUNT = "Account";

# FHIR Account resource record.
#
# + resourceType - The type of the resource describes
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + subject - Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Provides additional information about what the account tracks and how it is used.
# + guarantor - The parties responsible for balancing the account if other payment options fall short.
# + language - The base language in which the resource is written.
# + 'type - Categorizes the account for reporting and searching purposes.
# + balance - The calculated account balances - these are calculated and processed by the finance system. The balances with a `term` that is not current are usually generated/updated by an invoicing or similar process.
# + relatedAccount - Other associated accounts related to this account.
# + currency - The default currency for the account.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + coverage - The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
# + owner - Indicates the service area, hospital, department, etc. with responsibility for managing the Account.
# + identifier - Unique identifier used to reference the account. Might or might not be intended for human use (e.g. credit card number).
# + diagnosis - When using an account for billing a specific Encounter the set of diagnoses that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
# + procedure - When using an account for billing a specific Encounter the set of procedures that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).
# + billingStatus - The BillingStatus tracks the lifecycle of the account through the billing process. It indicates how transactions are treated when they are allocated to the account.
# + servicePeriod - The date range of services associated with this account.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - Name used for the account when displaying it to humans in reports, etc.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + calculatedAt - Time the balance amount was calculated.
# + status - Indicates whether the account is presently used/usable or not.
@r5:ResourceDefinition {
    resourceType: "Account",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/Account",
    elements: {
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.extension"
        },
        "subject" : {
            name: "subject",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.subject"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.description"
        },
        "guarantor" : {
            name: "guarantor",
            dataType: AccountGuarantor,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.guarantor"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "type" : {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.type",
            valueSet: "http://hl7.org/fhir/ValueSet/account-type"
        },
        "balance" : {
            name: "balance",
            dataType: AccountBalance,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.balance"
        },
        "relatedAccount" : {
            name: "relatedAccount",
            dataType: AccountRelatedAccount,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.relatedAccount"
        },
        "currency" : {
            name: "currency",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.currency",
            valueSet: "http://hl7.org/fhir/ValueSet/currencies|5.0.0"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.text"
        },
        "coverage" : {
            name: "coverage",
            dataType: AccountCoverage,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.coverage"
        },
        "owner" : {
            name: "owner",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.owner"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.identifier"
        },
        "diagnosis" : {
            name: "diagnosis",
            dataType: AccountDiagnosis,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.diagnosis"
        },
        "procedure" : {
            name: "procedure",
            dataType: AccountProcedure,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.procedure"
        },
        "billingStatus" : {
            name: "billingStatus",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.billingStatus",
            valueSet: "http://hl7.org/fhir/ValueSet/account-billing-status"
        },
        "servicePeriod" : {
            name: "servicePeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.servicePeriod"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Account.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.implicitRules"
        },
        "calculatedAt" : {
            name: "calculatedAt",
            dataType: r5:instant,
            min: 0,
            max: 1,
            isArray: false,
            path: "Account.calculatedAt"
        },
        "status" : {
            name: "status",
            dataType: AccountStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "Account.status",
            valueSet: "http://hl7.org/fhir/ValueSet/account-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type Account record {|
    *r5:DomainResource;

    RESOURCE_NAME_ACCOUNT resourceType = RESOURCE_NAME_ACCOUNT;

    r5:Extension[] extension?;
    r5:Reference[] subject?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    AccountGuarantor[] guarantor?;
    r5:code language?;
    r5:CodeableConcept 'type?;
    AccountBalance[] balance?;
    AccountRelatedAccount[] relatedAccount?;
    r5:CodeableConcept currency?;
    string id?;
    r5:Narrative text?;
    AccountCoverage[] coverage?;
    r5:Reference owner?;
    r5:Identifier[] identifier?;
    AccountDiagnosis[] diagnosis?;
    AccountProcedure[] procedure?;
    r5:CodeableConcept billingStatus?;
    r5:Period servicePeriod?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    string name?;
    r5:uri implicitRules?;
    r5:instant calculatedAt?;
    AccountStatus status;
    r5:Element ...;
|};

# AccountStatus enum
public enum AccountStatus {
   CODE_STATUS_INACTIVE = "inactive",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error",
   CODE_STATUS_ON_HOLD = "on-hold",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR AccountCoverage datatype record.
#
# + coverage - The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay). A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + priority - The priority of the coverage in the context of this account.
@r5:DataTypeDefinition {
    name: "AccountCoverage",
    baseType: (),
    elements: {
        "coverage": {
            name: "coverage",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay). A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.",
            path: "Account.coverage.coverage"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Account.coverage.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Account.coverage.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Account.coverage.id"
        },
        "priority": {
            name: "priority",
            dataType: r5:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "The priority of the coverage in the context of this account.",
            path: "Account.coverage.priority"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AccountCoverage record {|
    *r5:BackboneElement;

    r5:Reference coverage;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:positiveInt priority?;
|};

# FHIR AccountRelatedAccount datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + relationship - Relationship of the associated Account.
# + account - Reference to an associated Account.
@r5:DataTypeDefinition {
    name: "AccountRelatedAccount",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Account.relatedAccount.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Account.relatedAccount.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Account.relatedAccount.id"
        },
        "relationship": {
            name: "relationship",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Relationship of the associated Account.",
            path: "Account.relatedAccount.relationship"
        },
        "account": {
            name: "account",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Reference to an associated Account.",
            path: "Account.relatedAccount.account"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AccountRelatedAccount record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept relationship?;
    r5:Reference account;
|};

# FHIR AccountGuarantor datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - The timeframe during which the guarantor accepts responsibility for the account.
# + onHold - A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + party - The entity who is responsible.
@r5:DataTypeDefinition {
    name: "AccountGuarantor",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Account.guarantor.extension"
        },
        "period": {
            name: "period",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "The timeframe during which the guarantor accepts responsibility for the account.",
            path: "Account.guarantor.period"
        },
        "onHold": {
            name: "onHold",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.",
            path: "Account.guarantor.onHold"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Account.guarantor.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Account.guarantor.id"
        },
        "party": {
            name: "party",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The entity who is responsible.",
            path: "Account.guarantor.party"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AccountGuarantor record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Period period?;
    boolean onHold?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:Reference party;
|};

# FHIR AccountBalance datatype record.
#
# + amount - The actual balance value calculated for the age defined in the term property.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + estimate - The amount is only an estimated value - this is likely common for `current` term balances, but not with known terms (that were generated by a backend process).
# + term - The term of the account balances - The balance value is the amount that was outstanding for this age.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + aggregate - Who is expected to pay this part of the balance.
@r5:DataTypeDefinition {
    name: "AccountBalance",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: r5:Money,
            min: 1,
            max: 1,
            isArray: false,
            description: "The actual balance value calculated for the age defined in the term property.",
            path: "Account.balance.amount"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Account.balance.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Account.balance.modifierExtension"
        },
        "estimate": {
            name: "estimate",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "The amount is only an estimated value - this is likely common for `current` term balances, but not with known terms (that were generated by a backend process).",
            path: "Account.balance.estimate"
        },
        "term": {
            name: "term",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The term of the account balances - The balance value is the amount that was outstanding for this age.",
            path: "Account.balance.term"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Account.balance.id"
        },
        "aggregate": {
            name: "aggregate",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Who is expected to pay this part of the balance.",
            path: "Account.balance.aggregate"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AccountBalance record {|
    *r5:BackboneElement;

    r5:Money amount;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    boolean estimate?;
    r5:CodeableConcept term?;
    string id?;
    r5:CodeableConcept aggregate?;
|};

# FHIR AccountProcedure datatype record.
#
# + sequence - Ranking of the procedure (for each type).
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - The procedure relevant to the account.
# + packageCode - The package code can be used to group procedures that may be priced or delivered as a single product. Such as DRGs.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + dateOfService - Date of the procedure when using a coded procedure. If using a reference to a procedure, then the date on the procedure should be used.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - How this procedure value should be used in charging the account.
# + device - Any devices that were associated with the procedure relevant to the account.
@r5:DataTypeDefinition {
    name: "AccountProcedure",
    baseType: (),
    elements: {
        "sequence": {
            name: "sequence",
            dataType: r5:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "Ranking of the procedure (for each type).",
            path: "Account.procedure.sequence"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Account.procedure.extension"
        },
        "code": {
            name: "code",
            dataType: r5:CodeableReference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The procedure relevant to the account.",
            path: "Account.procedure.code"
        },
        "packageCode": {
            name: "packageCode",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The package code can be used to group procedures that may be priced or delivered as a single product. Such as DRGs.",
            path: "Account.procedure.packageCode"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Account.procedure.modifierExtension"
        },
        "dateOfService": {
            name: "dateOfService",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Date of the procedure when using a coded procedure. If using a reference to a procedure, then the date on the procedure should be used.",
            path: "Account.procedure.dateOfService"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Account.procedure.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "How this procedure value should be used in charging the account.",
            path: "Account.procedure.type"
        },
        "device": {
            name: "device",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Any devices that were associated with the procedure relevant to the account.",
            path: "Account.procedure.device"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AccountProcedure record {|
    *r5:BackboneElement;

    r5:positiveInt sequence?;
    r5:Extension[] extension?;
    r5:CodeableReference code;
    r5:CodeableConcept[] packageCode?;
    r5:Extension[] modifierExtension?;
    r5:dateTime dateOfService?;
    string id?;
    r5:CodeableConcept[] 'type?;
    r5:Reference[] device?;
|};

# FHIR AccountDiagnosis datatype record.
#
# + sequence - Ranking of the diagnosis (for each type).
# + condition - The diagnosis relevant to the account.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + onAdmission - Was the Diagnosis present on Admission in the related Encounter.
# + packageCode - The package code can be used to group diagnoses that may be priced or delivered as a single product. Such as DRGs.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + dateOfDiagnosis - Ranking of the diagnosis (for each type).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge …).
@r5:DataTypeDefinition {
    name: "AccountDiagnosis",
    baseType: (),
    elements: {
        "sequence": {
            name: "sequence",
            dataType: r5:positiveInt,
            min: 0,
            max: 1,
            isArray: false,
            description: "Ranking of the diagnosis (for each type).",
            path: "Account.diagnosis.sequence"
        },
        "condition": {
            name: "condition",
            dataType: r5:CodeableReference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The diagnosis relevant to the account.",
            path: "Account.diagnosis.condition"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Account.diagnosis.extension"
        },
        "onAdmission": {
            name: "onAdmission",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Was the Diagnosis present on Admission in the related Encounter.",
            path: "Account.diagnosis.onAdmission"
        },
        "packageCode": {
            name: "packageCode",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The package code can be used to group diagnoses that may be priced or delivered as a single product. Such as DRGs.",
            path: "Account.diagnosis.packageCode"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Account.diagnosis.modifierExtension"
        },
        "dateOfDiagnosis": {
            name: "dateOfDiagnosis",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Ranking of the diagnosis (for each type).",
            path: "Account.diagnosis.dateOfDiagnosis"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Account.diagnosis.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge …).",
            path: "Account.diagnosis.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type AccountDiagnosis record {|
    *r5:BackboneElement;

    r5:positiveInt sequence?;
    r5:CodeableReference condition;
    r5:Extension[] extension?;
    boolean onAdmission?;
    r5:CodeableConcept[] packageCode?;
    r5:Extension[] modifierExtension?;
    r5:dateTime dateOfDiagnosis?;
    string id?;
    r5:CodeableConcept[] 'type?;
|};

