// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_CONSENT = "http://hl7.org/fhir/StructureDefinition/Consent";
public const RESOURCE_NAME_CONSENT = "Consent";

# FHIR Consent resource record.
#
# + resourceType - The type of the resource describes
# + date - Date the consent instance was agreed to.
# + sourceReference - A reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + policyText - A Reference to the human readable policy explaining the basis for the Consent.
# + subject - The patient/healthcare practitioner or group of persons to whom this consent applies.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + grantee - The entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.
# + sourceAttachment - The source on which this consent statement is based. The source might be a scanned original paper form.
# + language - The base language in which the resource is written.
# + grantor - The entity responsible for granting the rights listed in a Consent Directive.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + verification - Whether a treatment instruction (e.g. artificial respiration: yes or no) was verified with the patient, his/her family or another authorized person.
# + policyBasis - A Reference or URL used to uniquely identify the policy the organization will enforce for this Consent. This Reference or URL should be specific to the version of the policy and should be dereferencable to a computable policy of some form.
# + identifier - Unique identifier for this copy of the Consent Statement.
# + controller - The actor that controls/enforces the access according to the consent.
# + period - Effective period for this Consent Resource and all provisions unless specified in that provision.
# + decision - Action to take - permit or deny - as default.
# + manager - The actor that manages the consent through its lifecycle.
# + regulatoryBasis - A set of codes that indicate the regulatory basis (if any) that this consent supports.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + provision - An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + category - A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.
# + status - Indicates the current state of this Consent resource.
@r5:ResourceDefinition {
    resourceType: "Consent",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/Consent",
    elements: {
        "date" : {
            name: "date",
            dataType: r5:date,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.date"
        },
        "sourceReference" : {
            name: "sourceReference",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.sourceReference"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.extension"
        },
        "policyText" : {
            name: "policyText",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.policyText"
        },
        "subject" : {
            name: "subject",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.subject"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.modifierExtension"
        },
        "grantee" : {
            name: "grantee",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.grantee"
        },
        "sourceAttachment" : {
            name: "sourceAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.sourceAttachment"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "grantor" : {
            name: "grantor",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.grantor"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.text"
        },
        "verification" : {
            name: "verification",
            dataType: ConsentVerification,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.verification"
        },
        "policyBasis" : {
            name: "policyBasis",
            dataType: ConsentPolicyBasis,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.policyBasis"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.identifier"
        },
        "controller" : {
            name: "controller",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.controller"
        },
        "period" : {
            name: "period",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.period"
        },
        "decision" : {
            name: "decision",
            dataType: ConsentDecision,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.decision",
            valueSet: "http://hl7.org/fhir/ValueSet/consent-provision-type|5.0.0"
        },
        "manager" : {
            name: "manager",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.manager"
        },
        "regulatoryBasis" : {
            name: "regulatoryBasis",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.regulatoryBasis",
            valueSet: "http://hl7.org/fhir/ValueSet/consent-policy"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.meta"
        },
        "provision" : {
            name: "provision",
            dataType: ConsentProvision,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.provision"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Consent.implicitRules"
        },
        "category" : {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Consent.category",
            valueSet: "http://hl7.org/fhir/ValueSet/consent-category"
        },
        "status" : {
            name: "status",
            dataType: ConsentStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "Consent.status",
            valueSet: "http://hl7.org/fhir/ValueSet/consent-state-codes|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type Consent record {|
    *r5:DomainResource;

    RESOURCE_NAME_CONSENT resourceType = RESOURCE_NAME_CONSENT;

    r5:date date?;
    r5:Reference[] sourceReference?;
    r5:Extension[] extension?;
    r5:Reference[] policyText?;
    r5:Reference subject?;
    r5:Extension[] modifierExtension?;
    r5:Reference[] grantee?;
    r5:Attachment[] sourceAttachment?;
    r5:code language?;
    r5:Reference[] grantor?;
    string id?;
    r5:Narrative text?;
    ConsentVerification[] verification?;
    ConsentPolicyBasis policyBasis?;
    r5:Identifier[] identifier?;
    r5:Reference[] controller?;
    r5:Period period?;
    ConsentDecision decision?;
    r5:Reference[] manager?;
    r5:CodeableConcept[] regulatoryBasis?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    ConsentProvision[] provision?;
    r5:uri implicitRules?;
    r5:CodeableConcept[] category?;
    ConsentStatus status;
    r5:Element ...;
|};

# ConsentProvisionDataMeaning enum
public enum ConsentProvisionDataMeaning {
   CODE_MEANING_INSTANCE = "instance",
   CODE_MEANING_RELATED = "related",
   CODE_MEANING_DEPENDENTS = "dependents",
   CODE_MEANING_AUTHOREDBY = "authoredby"
}

# FHIR ConsentProvisionActor datatype record.
#
# + reference - The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - How the individual is involved in the resources content that is described in the exception.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "ConsentProvisionActor",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').",
            path: "Consent.provision.actor.reference"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.provision.actor.extension"
        },
        "role": {
            name: "role",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the individual is involved in the resources content that is described in the exception.",
            path: "Consent.provision.actor.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.provision.actor.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.provision.actor.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ConsentProvisionActor record {|
    *r5:BackboneElement;

    r5:Reference reference?;
    r5:Extension[] extension?;
    r5:CodeableConcept role?;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# ConsentStatus enum
public enum ConsentStatus {
   CODE_STATUS_INACTIVE = "inactive",
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_NOT_DONE = "not-done",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR ConsentProvisionData datatype record.
#
# + reference - A reference to a specific resource that defines which resources are covered by this consent.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + meaning - How the resource reference is interpreted when testing consent restrictions.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "ConsentProvisionData",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "A reference to a specific resource that defines which resources are covered by this consent.",
            path: "Consent.provision.data.reference"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.provision.data.extension"
        },
        "meaning": {
            name: "meaning",
            dataType: ConsentProvisionDataMeaning,
            min: 1,
            max: 1,
            isArray: false,
            description: "How the resource reference is interpreted when testing consent restrictions.",
            path: "Consent.provision.data.meaning"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.provision.data.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.provision.data.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ConsentProvisionData record {|
    *r5:BackboneElement;

    r5:Reference reference;
    r5:Extension[] extension?;
    ConsentProvisionDataMeaning meaning;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# ConsentDecision enum
public enum ConsentDecision {
   CODE_DECISION_DENY = "deny",
   CODE_DECISION_PERMIT = "permit"
}

# FHIR ConsentProvision datatype record.
#
# + dataPeriod - Clinical or Operational Relevant period of time that bounds the data controlled by this provision.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + period - Timeframe for this provision.
# + code - If this code is found in an instance, then the provision applies.
# + expression - A computable (FHIRPath or other) definition of what is controlled by this consent.
# + data - The resources controlled by this provision if specific resources are referenced.
# + documentType - The documentType(s) covered by this provision. The type can be a CDA document, or some other type that indicates what sort of information the consent relates to.
# + purpose - The context of the activities a user is taking - why the user is accessing the data - that are controlled by this provision.
# + securityLabel - A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + actor - Who or what is controlled by this provision. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').
# + action - Actions controlled by this provision.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + resourceType - The resourceType(s) covered by this provision. The type can be a FHIR resource type or a profile on a type that indicates what information the consent relates to.
@r5:DataTypeDefinition {
    name: "ConsentProvision",
    baseType: (),
    elements: {
        "dataPeriod": {
            name: "dataPeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "Clinical or Operational Relevant period of time that bounds the data controlled by this provision.",
            path: "Consent.provision.dataPeriod"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.provision.extension"
        },
        "period": {
            name: "period",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            description: "Timeframe for this provision.",
            path: "Consent.provision.period"
        },
        "code": {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "If this code is found in an instance, then the provision applies.",
            path: "Consent.provision.code"
        },
        "expression": {
            name: "expression",
            dataType: r5:Expression,
            min: 0,
            max: 1,
            isArray: false,
            description: "A computable (FHIRPath or other) definition of what is controlled by this consent.",
            path: "Consent.provision.expression"
        },
        "data": {
            name: "data",
            dataType: ConsentProvisionData,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The resources controlled by this provision if specific resources are referenced.",
            path: "Consent.provision.data"
        },
        "documentType": {
            name: "documentType",
            dataType: r5:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The documentType(s) covered by this provision. The type can be a CDA document, or some other type that indicates what sort of information the consent relates to.",
            path: "Consent.provision.documentType"
        },
        "purpose": {
            name: "purpose",
            dataType: r5:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The context of the activities a user is taking - why the user is accessing the data - that are controlled by this provision.",
            path: "Consent.provision.purpose"
        },
        "securityLabel": {
            name: "securityLabel",
            dataType: r5:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.",
            path: "Consent.provision.securityLabel"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.provision.modifierExtension"
        },
        "actor": {
            name: "actor",
            dataType: ConsentProvisionActor,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Who or what is controlled by this provision. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').",
            path: "Consent.provision.actor"
        },
        "action": {
            name: "action",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Actions controlled by this provision.",
            path: "Consent.provision.action"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.provision.id"
        },
        "resourceType": {
            name: "resourceType",
            dataType: r5:Coding,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The resourceType(s) covered by this provision. The type can be a FHIR resource type or a profile on a type that indicates what information the consent relates to.",
            path: "Consent.provision.resourceType"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ConsentProvision record {|
    *r5:BackboneElement;

    r5:Period dataPeriod?;
    r5:Extension[] extension?;
    r5:Period period?;
    r5:CodeableConcept[] code?;
    r5:Expression expression?;
    ConsentProvisionData[] data?;
    r5:Coding[] documentType?;
    r5:Coding[] purpose?;
    r5:Coding[] securityLabel?;
    r5:Extension[] modifierExtension?;
    ConsentProvisionActor[] actor?;
    r5:CodeableConcept[] action?;
    string id?;
    r5:Coding[] resourceType?;
|};

# FHIR ConsentVerification datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + verifiedWith - Who verified the instruction (Patient, Relative or other Authorized Person).
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + verified - Has the instruction been verified.
# + verificationType - Extensible list of verification type starting with verification and re-validation.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + verifiedBy - The person who conducted the verification/validation of the Grantor decision.
# + verificationDate - Date(s) verification was collected.
@r5:DataTypeDefinition {
    name: "ConsentVerification",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.verification.extension"
        },
        "verifiedWith": {
            name: "verifiedWith",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Who verified the instruction (Patient, Relative or other Authorized Person).",
            path: "Consent.verification.verifiedWith"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.verification.modifierExtension"
        },
        "verified": {
            name: "verified",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Has the instruction been verified.",
            path: "Consent.verification.verified"
        },
        "verificationType": {
            name: "verificationType",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Extensible list of verification type starting with verification and re-validation.",
            path: "Consent.verification.verificationType"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.verification.id"
        },
        "verifiedBy": {
            name: "verifiedBy",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The person who conducted the verification/validation of the Grantor decision.",
            path: "Consent.verification.verifiedBy"
        },
        "verificationDate": {
            name: "verificationDate",
            dataType: r5:dateTime,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Date(s) verification was collected.",
            path: "Consent.verification.verificationDate"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ConsentVerification record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Reference verifiedWith?;
    r5:Extension[] modifierExtension?;
    boolean verified;
    r5:CodeableConcept verificationType?;
    string id?;
    r5:Reference verifiedBy?;
    r5:dateTime[] verificationDate?;
|};

# FHIR ConsentPolicyBasis datatype record.
#
# + reference - A Reference that identifies the policy the organization will enforce for this Consent.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + url - A URL that links to a computable version of the policy the organization will enforce for this Consent.
@r5:DataTypeDefinition {
    name: "ConsentPolicyBasis",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "A Reference that identifies the policy the organization will enforce for this Consent.",
            path: "Consent.policyBasis.reference"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Consent.policyBasis.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Consent.policyBasis.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Consent.policyBasis.id"
        },
        "url": {
            name: "url",
            dataType: r5:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "A URL that links to a computable version of the policy the organization will enforce for this Consent.",
            path: "Consent.policyBasis.url"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ConsentPolicyBasis record {|
    *r5:BackboneElement;

    r5:Reference reference?;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:urlType url?;
|};

