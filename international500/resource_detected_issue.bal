// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_DETECTEDISSUE = "http://hl7.org/fhir/StructureDefinition/DetectedIssue";
public const RESOURCE_NAME_DETECTEDISSUE = "DetectedIssue";

# FHIR DetectedIssue resource record.
#
# + resourceType - The type of the resource describes
# + severity - Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.
# + identifier - Business identifier associated with the detected issue record.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + mitigation - Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting. Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.
# + code - Identifies the specific type of issue identified.
# + evidence - Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.
# + author - Individual or device responsible for the issue being raised. For example, a decision support application or a pharmacist conducting a medication review.
# + subject - Indicates the subject whose record the detected issue is associated with.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + encounter - The encounter during which this issue was detected.
# + reference - The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + identifiedDateTime - The date or period when the detected issue was initially identified.
# + identifiedPeriod - The date or period when the detected issue was initially identified.
# + implicated - Indicates the resource representing the current activity or proposed activity that is potentially problematic.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + detail - A textual explanation of the detected issue.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + category - A code that classifies the general type of detected issue.
# + status - Indicates the status of the detected issue.
@r5:ResourceDefinition {
    resourceType: "DetectedIssue",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/DetectedIssue",
    elements: {
        "severity" : {
            name: "severity",
            dataType: DetectedIssueSeverity,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.severity",
            valueSet: "http://hl7.org/fhir/ValueSet/detectedissue-severity|5.0.0"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DetectedIssue.identifier"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DetectedIssue.extension"
        },
        "mitigation" : {
            name: "mitigation",
            dataType: DetectedIssueMitigation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DetectedIssue.mitigation"
        },
        "code" : {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.code",
            valueSet: "http://hl7.org/fhir/ValueSet/detectedissue-category"
        },
        "evidence" : {
            name: "evidence",
            dataType: DetectedIssueEvidence,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DetectedIssue.evidence"
        },
        "author" : {
            name: "author",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.author"
        },
        "subject" : {
            name: "subject",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.subject"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DetectedIssue.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "encounter" : {
            name: "encounter",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.encounter"
        },
        "reference" : {
            name: "reference",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.reference"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DetectedIssue.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.meta"
        },
        "identifiedDateTime" : {
            name: "identifiedDateTime",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.identified[x]"
        },
        "identifiedPeriod" : {
            name: "identifiedPeriod",
            dataType: r5:Period,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.identified[x]"
        },
        "implicated" : {
            name: "implicated",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DetectedIssue.implicated"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.implicitRules"
        },
        "detail" : {
            name: "detail",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.detail"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "DetectedIssue.text"
        },
        "category" : {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "DetectedIssue.category",
            valueSet: "http://hl7.org/fhir/ValueSet/detectedissue-category"
        },
        "status" : {
            name: "status",
            dataType: DetectedIssueStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "DetectedIssue.status",
            valueSet: "http://hl7.org/fhir/ValueSet/detectedissue-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type DetectedIssue record {|
    *r5:DomainResource;

    RESOURCE_NAME_DETECTEDISSUE resourceType = RESOURCE_NAME_DETECTEDISSUE;

    DetectedIssueSeverity severity?;
    r5:Identifier[] identifier?;
    r5:Extension[] extension?;
    DetectedIssueMitigation[] mitigation?;
    r5:CodeableConcept code?;
    DetectedIssueEvidence[] evidence?;
    r5:Reference author?;
    r5:Reference subject?;
    r5:Extension[] modifierExtension?;
    r5:code language?;
    r5:Reference encounter?;
    r5:uri reference?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    r5:dateTime identifiedDateTime?;
    r5:Period identifiedPeriod?;
    r5:Reference[] implicated?;
    r5:uri implicitRules?;
    r5:markdown detail?;
    string id?;
    r5:Narrative text?;
    r5:CodeableConcept[] category?;
    DetectedIssueStatus status;
    r5:Element ...;
|};

# DetectedIssueStatus enum
public enum DetectedIssueStatus {
   CODE_STATUS_FINAL = "final",
   CODE_STATUS_PRELIMINARY = "preliminary",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error",
   CODE_STATUS_MITIGATED = "mitigated"
}

# FHIR DetectedIssueEvidence datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A manifestation that led to the recording of this detected issue.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + detail - Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "DetectedIssueEvidence",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DetectedIssue.evidence.extension"
        },
        "code": {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A manifestation that led to the recording of this detected issue.",
            path: "DetectedIssue.evidence.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DetectedIssue.evidence.modifierExtension"
        },
        "detail": {
            name: "detail",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.",
            path: "DetectedIssue.evidence.detail"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DetectedIssue.evidence.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DetectedIssueEvidence record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:CodeableConcept[] code?;
    r5:Extension[] modifierExtension?;
    r5:Reference[] detail?;
    string id?;
|};

# FHIR DetectedIssueMitigation datatype record.
#
# + date - Indicates when the mitigating action was documented.
# + note - Clinicians may add additional notes or justifications about the mitigation action. For example, patient can have this drug because they have had it before without any issues. Multiple justifications may be provided.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + author - Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + action - Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "DetectedIssueMitigation",
    baseType: (),
    elements: {
        "date": {
            name: "date",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates when the mitigating action was documented.",
            path: "DetectedIssue.mitigation.date"
        },
        "note": {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Clinicians may add additional notes or justifications about the mitigation action. For example, patient can have this drug because they have had it before without any issues. Multiple justifications may be provided.",
            path: "DetectedIssue.mitigation.note"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "DetectedIssue.mitigation.extension"
        },
        "author": {
            name: "author",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.",
            path: "DetectedIssue.mitigation.author"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "DetectedIssue.mitigation.modifierExtension"
        },
        "action": {
            name: "action",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.",
            path: "DetectedIssue.mitigation.action"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "DetectedIssue.mitigation.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type DetectedIssueMitigation record {|
    *r5:BackboneElement;

    r5:dateTime date?;
    r5:Annotation[] note?;
    r5:Extension[] extension?;
    r5:Reference author?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept action;
    string id?;
|};

# DetectedIssueSeverity enum
public enum DetectedIssueSeverity {
   CODE_SEVERITY_HIGH = "high",
   CODE_SEVERITY_LOW = "low",
   CODE_SEVERITY_MODERATE = "moderate"
}

