// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_EXAMPLESCENARIO = "http://hl7.org/fhir/StructureDefinition/ExampleScenario";
public const RESOURCE_NAME_EXAMPLESCENARIO = "ExampleScenario";

# FHIR ExampleScenario resource record.
#
# + resourceType - The type of the resource describes
# + date - The date (and optionally time) when the example scenario was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').
# + copyright - A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + instance - A single data collection that is shared as part of the scenario.
# + purpose - What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.
# + jurisdiction - A legal or geographic region in which the example scenario is intended to be used.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A free text natural language description of the ExampleScenario from a consumer's perspective.
# + experimental - A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
# + language - The base language in which the resource is written.
# + title - A short, descriptive, user-friendly title for the ExampleScenario.
# + versionAlgorithmString - Indicates the mechanism used to compare versions to determine which is more current.
# + contact - Contact details to assist a user in finding and communicating with the publisher.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + identifier - A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.
# + process - A group of operations that represents a significant step within a scenario.
# + versionAlgorithmCoding - Indicates the mechanism used to compare versions to determine which is more current.
# + 'version - The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
# + url - An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.
# + actor - A system or person who shares or receives an instance within the scenario.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + copyrightLabel - A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - Temporarily retained for tooling purposes.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + publisher - The name of the organization or individual responsible for the release and ongoing maintenance of the example scenario.
# + useContext - The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.
# + status - The status of this example scenario. Enables tracking the life-cycle of the content.
@r5:ResourceDefinition {
    resourceType: "ExampleScenario",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/ExampleScenario",
    elements: {
        "date" : {
            name: "date",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.date"
        },
        "copyright" : {
            name: "copyright",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.copyright"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.extension"
        },
        "instance" : {
            name: "instance",
            dataType: ExampleScenarioInstance,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.instance"
        },
        "purpose" : {
            name: "purpose",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.purpose"
        },
        "jurisdiction" : {
            name: "jurisdiction",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.jurisdiction",
            valueSet: "http://hl7.org/fhir/ValueSet/jurisdiction"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.description"
        },
        "experimental" : {
            name: "experimental",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.experimental"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.title"
        },
        "versionAlgorithmString" : {
            name: "versionAlgorithmString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.versionAlgorithm[x]",
            valueSet: "http://hl7.org/fhir/ValueSet/version-algorithm"
        },
        "contact" : {
            name: "contact",
            dataType: r5:ContactDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.contact"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.text"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.identifier"
        },
        "process" : {
            name: "process",
            dataType: ExampleScenarioProcess,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.process"
        },
        "versionAlgorithmCoding" : {
            name: "versionAlgorithmCoding",
            dataType: r5:Coding,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.versionAlgorithm[x]",
            valueSet: "http://hl7.org/fhir/ValueSet/version-algorithm"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.version"
        },
        "url" : {
            name: "url",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.url"
        },
        "actor" : {
            name: "actor",
            dataType: ExampleScenarioActor,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.actor"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.contained"
        },
        "copyrightLabel" : {
            name: "copyrightLabel",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.copyrightLabel"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.implicitRules"
        },
        "publisher" : {
            name: "publisher",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ExampleScenario.publisher"
        },
        "useContext" : {
            name: "useContext",
            dataType: r5:UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ExampleScenario.useContext"
        },
        "status" : {
            name: "status",
            dataType: ExampleScenarioStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "ExampleScenario.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type ExampleScenario record {|
    *r5:DomainResource;

    RESOURCE_NAME_EXAMPLESCENARIO resourceType = RESOURCE_NAME_EXAMPLESCENARIO;

    r5:dateTime date?;
    r5:markdown copyright?;
    r5:Extension[] extension?;
    ExampleScenarioInstance[] instance?;
    r5:markdown purpose?;
    r5:CodeableConcept[] jurisdiction?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    boolean experimental?;
    r5:code language?;
    string title?;
    string versionAlgorithmString?;
    r5:ContactDetail[] contact?;
    string id?;
    r5:Narrative text?;
    r5:Identifier[] identifier?;
    ExampleScenarioProcess[] process?;
    r5:Coding versionAlgorithmCoding?;
    string 'version?;
    r5:uri url?;
    ExampleScenarioActor[] actor?;
    r5:Resource[] contained?;
    string copyrightLabel?;
    r5:Meta meta?;
    string name?;
    r5:uri implicitRules?;
    string publisher?;
    r5:UsageContext[] useContext?;
    ExampleScenarioStatus status;
    r5:Element ...;
|};

# ExampleScenarioStatus enum
public enum ExampleScenarioStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR ExampleScenarioProcessStep datatype record.
#
# + number - The sequential number of the step, e.g. 1.2.5.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + workflow - Indicates that the step is defined by a seaparate scenario instance.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + alternative - Indicates an alternative step that can be taken instead of the sub-process, scenario or operation. E.g. to represent non-happy-path/exceptional/atypical circumstances.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + operation - The step represents a single operation invoked on receiver by sender.
# + pause - If true, indicates that, following this step, there is a pause in the flow and the subsequent step will occur at some later time (triggered by some event).
@r5:DataTypeDefinition {
    name: "ExampleScenarioProcessStep",
    baseType: (),
    elements: {
        "number": {
            name: "number",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The sequential number of the step, e.g. 1.2.5.",
            path: "ExampleScenario.process.step.number"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.process.step.extension"
        },
        "workflow": {
            name: "workflow",
            dataType: r5:canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates that the step is defined by a seaparate scenario instance.",
            path: "ExampleScenario.process.step.workflow"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.process.step.modifierExtension"
        },
        "alternative": {
            name: "alternative",
            dataType: ExampleScenarioProcessStepAlternative,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Indicates an alternative step that can be taken instead of the sub-process, scenario or operation. E.g. to represent non-happy-path/exceptional/atypical circumstances.",
            path: "ExampleScenario.process.step.alternative"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.process.step.id"
        },
        "operation": {
            name: "operation",
            dataType: ExampleScenarioProcessStepOperation,
            min: 0,
            max: 1,
            isArray: false,
            description: "The step represents a single operation invoked on receiver by sender.",
            path: "ExampleScenario.process.step.operation"
        },
        "pause": {
            name: "pause",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If true, indicates that, following this step, there is a pause in the flow and the subsequent step will occur at some later time (triggered by some event).",
            path: "ExampleScenario.process.step.pause"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioProcessStep record {|
    *r5:BackboneElement;

    string number?;
    r5:Extension[] extension?;
    r5:canonical workflow?;
    r5:Extension[] modifierExtension?;
    ExampleScenarioProcessStepAlternative[] alternative?;
    string id?;
    ExampleScenarioProcessStepOperation operation?;
    boolean pause?;
|};

# ExampleScenarioActorType enum
public enum ExampleScenarioActorType {
   CODE_TYPE_SYSTEM = "system",
   CODE_TYPE_PERSON = "person"
}

# FHIR ExampleScenarioProcessStepAlternative datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + title - The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
@r5:DataTypeDefinition {
    name: "ExampleScenarioProcessStepAlternative",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.process.step.alternative.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.process.step.alternative.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human-readable description of the alternative explaining when the alternative should occur rather than the base step.",
            path: "ExampleScenario.process.step.alternative.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.process.step.alternative.id"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.",
            path: "ExampleScenario.process.step.alternative.title"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioProcessStepAlternative record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    string id?;
    string title;
|};

# FHIR ExampleScenarioInstance datatype record.
#
# + structureProfileCanonical - Refers to a profile, template or other ruleset the instance adheres to.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + structureProfileUri - Refers to a profile, template or other ruleset the instance adheres to.
# + description - An explanation of what the instance contains and what it's for.
# + containedInstance - References to other instances that can be found within this instance (e.g. the observations contained in a bundle).
# + title - A short descriptive label the instance to be used in tables or diagrams.
# + 'version - Represents the instance as it was at a specific time-point.
# + content - Points to an instance (typically an example) that shows the data that would corespond to this instance.
# + structureType - A code indicating the kind of data structure (FHIR resource or some other standard) this is an instance of.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + key - A unique string within the scenario that is used to reference the instance.
# + structureVersion - Conveys the version of the data structure instantiated. I.e. what release of FHIR, X12, OpenEHR, etc. is instance compliant with.
@r5:DataTypeDefinition {
    name: "ExampleScenarioInstance",
    baseType: (),
    elements: {
        "structureProfileCanonical": {
            name: "structureProfileCanonical",
            dataType: r5:canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "Refers to a profile, template or other ruleset the instance adheres to.",
            path: "ExampleScenario.instance.structureProfile[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.instance.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.instance.modifierExtension"
        },
        "structureProfileUri": {
            name: "structureProfileUri",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "Refers to a profile, template or other ruleset the instance adheres to.",
            path: "ExampleScenario.instance.structureProfile[x]"
        },
        "description": {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "An explanation of what the instance contains and what it's for.",
            path: "ExampleScenario.instance.description"
        },
        "containedInstance": {
            name: "containedInstance",
            dataType: ExampleScenarioInstanceContainedInstance,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "References to other instances that can be found within this instance (e.g. the observations contained in a bundle).",
            path: "ExampleScenario.instance.containedInstance"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A short descriptive label the instance to be used in tables or diagrams.",
            path: "ExampleScenario.instance.title"
        },
        "version": {
            name: "version",
            dataType: ExampleScenarioInstanceVersion,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Represents the instance as it was at a specific time-point.",
            path: "ExampleScenario.instance.version"
        },
        "content": {
            name: "content",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Points to an instance (typically an example) that shows the data that would corespond to this instance.",
            path: "ExampleScenario.instance.content"
        },
        "structureType": {
            name: "structureType",
            dataType: r5:Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "A code indicating the kind of data structure (FHIR resource or some other standard) this is an instance of.",
            path: "ExampleScenario.instance.structureType"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.instance.id"
        },
        "key": {
            name: "key",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A unique string within the scenario that is used to reference the instance.",
            path: "ExampleScenario.instance.key"
        },
        "structureVersion": {
            name: "structureVersion",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Conveys the version of the data structure instantiated. I.e. what release of FHIR, X12, OpenEHR, etc. is instance compliant with.",
            path: "ExampleScenario.instance.structureVersion"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioInstance record {|
    *r5:BackboneElement;

    r5:canonical structureProfileCanonical?;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:uri structureProfileUri?;
    r5:markdown description?;
    ExampleScenarioInstanceContainedInstance[] containedInstance?;
    string title;
    ExampleScenarioInstanceVersion[] 'version?;
    r5:Reference content?;
    r5:Coding structureType;
    string id?;
    string key;
    string structureVersion?;
|};

# FHIR ExampleScenarioActor datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - An explanation of who/what the actor is and its role in the scenario.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + title - The human-readable name for the actor used when rendering the scenario.
# + 'type - The category of actor - person or system.
# + key - A unique string within the scenario that is used to reference the actor.
@r5:DataTypeDefinition {
    name: "ExampleScenarioActor",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.actor.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.actor.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "An explanation of who/what the actor is and its role in the scenario.",
            path: "ExampleScenario.actor.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.actor.id"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The human-readable name for the actor used when rendering the scenario.",
            path: "ExampleScenario.actor.title"
        },
        "type": {
            name: "type",
            dataType: ExampleScenarioActorType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The category of actor - person or system.",
            path: "ExampleScenario.actor.type"
        },
        "key": {
            name: "key",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A unique string within the scenario that is used to reference the actor.",
            path: "ExampleScenario.actor.key"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioActor record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    string id?;
    string title;
    ExampleScenarioActorType 'type;
    string key;
|};

# FHIR ExampleScenarioInstanceContainedInstance datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + instanceReference - A reference to the key of an instance found within this one.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + versionReference - A reference to the key of a specific version of an instance in this instance.
@r5:DataTypeDefinition {
    name: "ExampleScenarioInstanceContainedInstance",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.instance.containedInstance.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.instance.containedInstance.modifierExtension"
        },
        "instanceReference": {
            name: "instanceReference",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A reference to the key of an instance found within this one.",
            path: "ExampleScenario.instance.containedInstance.instanceReference"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.instance.containedInstance.id"
        },
        "versionReference": {
            name: "versionReference",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A reference to the key of a specific version of an instance in this instance.",
            path: "ExampleScenario.instance.containedInstance.versionReference"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioInstanceContainedInstance record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string instanceReference;
    string id?;
    string versionReference?;
|};

# FHIR ExampleScenarioInstanceVersion datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - An explanation of what this specific version of the instance contains and represents.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + title - A short descriptive label the version to be used in tables or diagrams.
# + content - Points to an instance (typically an example) that shows the data that would flow at this point in the scenario.
# + key - A unique string within the instance that is used to reference the version of the instance.
@r5:DataTypeDefinition {
    name: "ExampleScenarioInstanceVersion",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.instance.version.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.instance.version.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "An explanation of what this specific version of the instance contains and represents.",
            path: "ExampleScenario.instance.version.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.instance.version.id"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A short descriptive label the version to be used in tables or diagrams.",
            path: "ExampleScenario.instance.version.title"
        },
        "content": {
            name: "content",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Points to an instance (typically an example) that shows the data that would flow at this point in the scenario.",
            path: "ExampleScenario.instance.version.content"
        },
        "key": {
            name: "key",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A unique string within the instance that is used to reference the version of the instance.",
            path: "ExampleScenario.instance.version.key"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioInstanceVersion record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    string id?;
    string title;
    r5:Reference content?;
    string key;
|};

# FHIR ExampleScenarioProcessStepOperation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + receiver - The system on which the action is invoked/receives the data.
# + initiator - The system that invokes the action/transmits the data.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - An explanation of what the operation represents and what it does.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + receiverActive - If false, the receiver is deactivated right after the operation.
# + title - A short descriptive label the step to be used in tables or diagrams.
# + 'type - The standardized type of action (FHIR or otherwise).
# + initiatorActive - If false, the initiator is deactivated right after the operation.
@r5:DataTypeDefinition {
    name: "ExampleScenarioProcessStepOperation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.process.step.operation.extension"
        },
        "receiver": {
            name: "receiver",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The system on which the action is invoked/receives the data.",
            path: "ExampleScenario.process.step.operation.receiver"
        },
        "initiator": {
            name: "initiator",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The system that invokes the action/transmits the data.",
            path: "ExampleScenario.process.step.operation.initiator"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.process.step.operation.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "An explanation of what the operation represents and what it does.",
            path: "ExampleScenario.process.step.operation.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.process.step.operation.id"
        },
        "receiverActive": {
            name: "receiverActive",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If false, the receiver is deactivated right after the operation.",
            path: "ExampleScenario.process.step.operation.receiverActive"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A short descriptive label the step to be used in tables or diagrams.",
            path: "ExampleScenario.process.step.operation.title"
        },
        "type": {
            name: "type",
            dataType: r5:Coding,
            min: 0,
            max: 1,
            isArray: false,
            description: "The standardized type of action (FHIR or otherwise).",
            path: "ExampleScenario.process.step.operation.type"
        },
        "initiatorActive": {
            name: "initiatorActive",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If false, the initiator is deactivated right after the operation.",
            path: "ExampleScenario.process.step.operation.initiatorActive"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioProcessStepOperation record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    string receiver?;
    string initiator?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    string id?;
    boolean receiverActive?;
    string title;
    r5:Coding 'type?;
    boolean initiatorActive?;
|};

# FHIR ExampleScenarioProcess datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + postConditions - Description of the final state of the actors, environment and data after the process has been successfully completed.
# + preConditions - Description of the initial state of the actors, environment and data before the process starts.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - An explanation of what the process represents and what it does.
# + step - A significant action that occurs as part of the process.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + title - A short descriptive label the process to be used in tables or diagrams.
@r5:DataTypeDefinition {
    name: "ExampleScenarioProcess",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ExampleScenario.process.extension"
        },
        "postConditions": {
            name: "postConditions",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Description of the final state of the actors, environment and data after the process has been successfully completed.",
            path: "ExampleScenario.process.postConditions"
        },
        "preConditions": {
            name: "preConditions",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Description of the initial state of the actors, environment and data before the process starts.",
            path: "ExampleScenario.process.preConditions"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ExampleScenario.process.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "An explanation of what the process represents and what it does.",
            path: "ExampleScenario.process.description"
        },
        "step": {
            name: "step",
            dataType: ExampleScenarioProcessStep,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A significant action that occurs as part of the process.",
            path: "ExampleScenario.process.step"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ExampleScenario.process.id"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A short descriptive label the process to be used in tables or diagrams.",
            path: "ExampleScenario.process.title"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ExampleScenarioProcess record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:markdown postConditions?;
    r5:markdown preConditions?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    ExampleScenarioProcessStep[] step?;
    string id?;
    string title;
|};

