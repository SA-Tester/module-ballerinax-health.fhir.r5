// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_GENOMICSTUDY = "http://hl7.org/fhir/StructureDefinition/GenomicStudy";
public const RESOURCE_NAME_GENOMICSTUDY = "GenomicStudy";

# FHIR GenomicStudy resource record.
#
# + resourceType - The type of the resource describes
# + identifier - Identifiers for this genomic study.
# + note - Comments related to the genomic study.
# + reason - Why the genomic study was performed.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + subject - The primary subject of the genomic study.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Description of the genomic study.
# + interpreter - Healthcare professionals who interpreted the genomic study.
# + language - The base language in which the resource is written.
# + encounter - The healthcare event with which this genomics study is associated.
# + analysis - The details about a specific analysis that was performed in this GenomicStudy.
# + instantiatesCanonical - The defined protocol that describes the study.
# + 'type - The type of the study, e.g., Familial variant segregation, Functional variation detection, or Gene expression profiling.
# + instantiatesUri - The URL pointing to an externally maintained protocol that describes the study.
# + referrer - Healthcare professional who requested or referred the genomic study.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + basedOn - Event resources that the genomic study is based on.
# + startDate - When the genomic study was started.
# + status - The status of the genomic study.
@r5:ResourceDefinition {
    resourceType: "GenomicStudy",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/GenomicStudy",
    elements: {
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.identifier"
        },
        "note" : {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.note"
        },
        "reason" : {
            name: "reason",
            dataType: r5:CodeableReference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.reason"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.extension"
        },
        "subject" : {
            name: "subject",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            path: "GenomicStudy.subject"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.description"
        },
        "interpreter" : {
            name: "interpreter",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.interpreter"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "encounter" : {
            name: "encounter",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.encounter"
        },
        "analysis" : {
            name: "analysis",
            dataType: GenomicStudyAnalysis,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.analysis"
        },
        "instantiatesCanonical" : {
            name: "instantiatesCanonical",
            dataType: r5:canonical,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.instantiatesCanonical"
        },
        "type" : {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.type",
            valueSet: "http://hl7.org/fhir/ValueSet/genomicstudy-type"
        },
        "instantiatesUri" : {
            name: "instantiatesUri",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.instantiatesUri"
        },
        "referrer" : {
            name: "referrer",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.referrer"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.meta"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.implicitRules"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.text"
        },
        "basedOn" : {
            name: "basedOn",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "GenomicStudy.basedOn"
        },
        "startDate" : {
            name: "startDate",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "GenomicStudy.startDate"
        },
        "status" : {
            name: "status",
            dataType: GenomicStudyStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "GenomicStudy.status",
            valueSet: "http://hl7.org/fhir/ValueSet/genomicstudy-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type GenomicStudy record {|
    *r5:DomainResource;

    RESOURCE_NAME_GENOMICSTUDY resourceType = RESOURCE_NAME_GENOMICSTUDY;

    r5:Identifier[] identifier?;
    r5:Annotation[] note?;
    r5:CodeableReference[] reason?;
    r5:Extension[] extension?;
    r5:Reference subject;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    r5:Reference[] interpreter?;
    r5:code language?;
    r5:Reference encounter?;
    GenomicStudyAnalysis[] analysis?;
    r5:canonical instantiatesCanonical?;
    r5:CodeableConcept[] 'type?;
    r5:uri instantiatesUri?;
    r5:Reference referrer?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    r5:uri implicitRules?;
    string id?;
    r5:Narrative text?;
    r5:Reference[] basedOn?;
    r5:dateTime startDate?;
    GenomicStudyStatus status;
    r5:Element ...;
|};

# FHIR GenomicStudyAnalysisInput datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + generatedByGenomicStudyReference - The analysis event or other GenomicStudy that generated this input file.
# + file - File containing input data.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + generatedByGenomicStudyIdentifier - The analysis event or other GenomicStudy that generated this input file.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of input data, e.g., BAM, CRAM, or FASTA.
@r5:DataTypeDefinition {
    name: "GenomicStudyAnalysisInput",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "GenomicStudy.analysis.input.extension"
        },
        "generatedByGenomicStudyReference": {
            name: "generatedByGenomicStudyReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The analysis event or other GenomicStudy that generated this input file.",
            path: "GenomicStudy.analysis.input.generatedBy[x]"
        },
        "file": {
            name: "file",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "File containing input data.",
            path: "GenomicStudy.analysis.input.file"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "GenomicStudy.analysis.input.modifierExtension"
        },
        "generatedByGenomicStudyIdentifier": {
            name: "generatedByGenomicStudyIdentifier",
            dataType: r5:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "The analysis event or other GenomicStudy that generated this input file.",
            path: "GenomicStudy.analysis.input.generatedBy[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "GenomicStudy.analysis.input.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of input data, e.g., BAM, CRAM, or FASTA.",
            path: "GenomicStudy.analysis.input.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type GenomicStudyAnalysisInput record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Reference generatedByGenomicStudyReference?;
    r5:Reference file?;
    r5:Extension[] modifierExtension?;
    r5:Identifier generatedByGenomicStudyIdentifier?;
    string id?;
    r5:CodeableConcept 'type?;
|};

# FHIR GenomicStudyAnalysisDevice datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + 'function - Specific function for the device used for the analysis.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + device - Device used for the analysis.
@r5:DataTypeDefinition {
    name: "GenomicStudyAnalysisDevice",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "GenomicStudy.analysis.device.extension"
        },
        "function": {
            name: "function",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specific function for the device used for the analysis.",
            path: "GenomicStudy.analysis.device.function"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "GenomicStudy.analysis.device.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "GenomicStudy.analysis.device.id"
        },
        "device": {
            name: "device",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "Device used for the analysis.",
            path: "GenomicStudy.analysis.device.device"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type GenomicStudyAnalysisDevice record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:CodeableConcept 'function?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:Reference device?;
|};

# FHIR GenomicStudyAnalysisPerformer datatype record.
#
# + actor - The organization, healthcare professional, or others who participated in performing this analysis.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - Role of the actor for this analysis.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "GenomicStudyAnalysisPerformer",
    baseType: (),
    elements: {
        "actor": {
            name: "actor",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The organization, healthcare professional, or others who participated in performing this analysis.",
            path: "GenomicStudy.analysis.performer.actor"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "GenomicStudy.analysis.performer.extension"
        },
        "role": {
            name: "role",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Role of the actor for this analysis.",
            path: "GenomicStudy.analysis.performer.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "GenomicStudy.analysis.performer.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "GenomicStudy.analysis.performer.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type GenomicStudyAnalysisPerformer record {|
    *r5:BackboneElement;

    r5:Reference actor?;
    r5:Extension[] extension?;
    r5:CodeableConcept role?;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR GenomicStudyAnalysisOutput datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + file - File containing output data.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of output data, e.g., VCF, MAF, or BAM.
@r5:DataTypeDefinition {
    name: "GenomicStudyAnalysisOutput",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "GenomicStudy.analysis.output.extension"
        },
        "file": {
            name: "file",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "File containing output data.",
            path: "GenomicStudy.analysis.output.file"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "GenomicStudy.analysis.output.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "GenomicStudy.analysis.output.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of output data, e.g., VCF, MAF, or BAM.",
            path: "GenomicStudy.analysis.output.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type GenomicStudyAnalysisOutput record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Reference file?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept 'type?;
|};

# GenomicStudyStatus enum
public enum GenomicStudyStatus {
   CODE_STATUS_AVAILABLE = "available",
   CODE_STATUS_REGISTERED = "registered",
   CODE_STATUS_CANCELLED = "cancelled",
   CODE_STATUS_ENTERED_IN_ERROR = "entered-in-error",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR GenomicStudyAnalysis datatype record.
#
# + date - The date of the analysis event.
# + identifier - Identifiers for the analysis event.
# + note - Any notes capture with the analysis event.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + performer - Performer for the analysis event.
# + regionsStudied - The genomic regions to be studied in the analysis (BED file).
# + changeType - Type of the genomic changes studied in the analysis, e.g., DNA, RNA, or amino acid change.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + focus - The focus of a genomic analysis when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the GenomicStudy.subject would be the child (proband) and the GenomicStudy.analysis.focus of a specific analysis would be the parent.
# + instantiatesCanonical - The defined protocol that describes the analysis.
# + title - Name of the analysis event (human friendly).
# + instantiatesUri - The URL pointing to an externally maintained protocol that describes the analysis.
# + output - Outputs for the analysis event.
# + input - Inputs for the analysis event.
# + methodType - Type of the methods used in the analysis, e.g., Fluorescence in situ hybridization (FISH), Karyotyping, or Microsatellite instability testing (MSI).
# + genomeBuild - The reference genome build that is used in this analysis.
# + regionsCalled - Genomic regions actually called in the analysis event (BED file).
# + specimen - The specimen used in the analysis event.
# + protocolPerformed - The protocol that was performed for the analysis event.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + device - Devices used for the analysis (e.g., instruments, software), with settings and parameters.
@r5:DataTypeDefinition {
    name: "GenomicStudyAnalysis",
    baseType: (),
    elements: {
        "date": {
            name: "date",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The date of the analysis event.",
            path: "GenomicStudy.analysis.date"
        },
        "identifier": {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Identifiers for the analysis event.",
            path: "GenomicStudy.analysis.identifier"
        },
        "note": {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Any notes capture with the analysis event.",
            path: "GenomicStudy.analysis.note"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "GenomicStudy.analysis.extension"
        },
        "performer": {
            name: "performer",
            dataType: GenomicStudyAnalysisPerformer,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Performer for the analysis event.",
            path: "GenomicStudy.analysis.performer"
        },
        "regionsStudied": {
            name: "regionsStudied",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The genomic regions to be studied in the analysis (BED file).",
            path: "GenomicStudy.analysis.regionsStudied"
        },
        "changeType": {
            name: "changeType",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Type of the genomic changes studied in the analysis, e.g., DNA, RNA, or amino acid change.",
            path: "GenomicStudy.analysis.changeType"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "GenomicStudy.analysis.modifierExtension"
        },
        "focus": {
            name: "focus",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The focus of a genomic analysis when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the GenomicStudy.subject would be the child (proband) and the GenomicStudy.analysis.focus of a specific analysis would be the parent.",
            path: "GenomicStudy.analysis.focus"
        },
        "instantiatesCanonical": {
            name: "instantiatesCanonical",
            dataType: r5:canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "The defined protocol that describes the analysis.",
            path: "GenomicStudy.analysis.instantiatesCanonical"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Name of the analysis event (human friendly).",
            path: "GenomicStudy.analysis.title"
        },
        "instantiatesUri": {
            name: "instantiatesUri",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            description: "The URL pointing to an externally maintained protocol that describes the analysis.",
            path: "GenomicStudy.analysis.instantiatesUri"
        },
        "output": {
            name: "output",
            dataType: GenomicStudyAnalysisOutput,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Outputs for the analysis event.",
            path: "GenomicStudy.analysis.output"
        },
        "input": {
            name: "input",
            dataType: GenomicStudyAnalysisInput,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Inputs for the analysis event.",
            path: "GenomicStudy.analysis.input"
        },
        "methodType": {
            name: "methodType",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Type of the methods used in the analysis, e.g., Fluorescence in situ hybridization (FISH), Karyotyping, or Microsatellite instability testing (MSI).",
            path: "GenomicStudy.analysis.methodType"
        },
        "genomeBuild": {
            name: "genomeBuild",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The reference genome build that is used in this analysis.",
            path: "GenomicStudy.analysis.genomeBuild"
        },
        "regionsCalled": {
            name: "regionsCalled",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Genomic regions actually called in the analysis event (BED file).",
            path: "GenomicStudy.analysis.regionsCalled"
        },
        "specimen": {
            name: "specimen",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The specimen used in the analysis event.",
            path: "GenomicStudy.analysis.specimen"
        },
        "protocolPerformed": {
            name: "protocolPerformed",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The protocol that was performed for the analysis event.",
            path: "GenomicStudy.analysis.protocolPerformed"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "GenomicStudy.analysis.id"
        },
        "device": {
            name: "device",
            dataType: GenomicStudyAnalysisDevice,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Devices used for the analysis (e.g., instruments, software), with settings and parameters.",
            path: "GenomicStudy.analysis.device"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type GenomicStudyAnalysis record {|
    *r5:BackboneElement;

    r5:dateTime date?;
    r5:Identifier[] identifier?;
    r5:Annotation[] note?;
    r5:Extension[] extension?;
    GenomicStudyAnalysisPerformer[] performer?;
    r5:Reference[] regionsStudied?;
    r5:CodeableConcept[] changeType?;
    r5:Extension[] modifierExtension?;
    r5:Reference[] focus?;
    r5:canonical instantiatesCanonical?;
    string title?;
    r5:uri instantiatesUri?;
    GenomicStudyAnalysisOutput[] output?;
    GenomicStudyAnalysisInput[] input?;
    r5:CodeableConcept[] methodType?;
    r5:CodeableConcept genomeBuild?;
    r5:Reference[] regionsCalled?;
    r5:Reference[] specimen?;
    r5:Reference protocolPerformed?;
    string id?;
    GenomicStudyAnalysisDevice[] device?;
|};

