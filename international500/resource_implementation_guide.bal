// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_IMPLEMENTATIONGUIDE = "http://hl7.org/fhir/StructureDefinition/ImplementationGuide";
public const RESOURCE_NAME_IMPLEMENTATIONGUIDE = "ImplementationGuide";

# FHIR ImplementationGuide resource record.
#
# + resourceType - The type of the resource describes
# + date - The date (and optionally time) when the implementation guide was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
# + copyright - A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + purpose - Explanation of why this implementation guide is needed and why it has been designed as it has.
# + jurisdiction - A legal or geographic region in which the implementation guide is intended to be used.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - A free text natural language description of the implementation guide from a consumer's perspective.
# + experimental - A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
# + global - A set of profiles that all resources covered by this implementation guide must conform to.
# + language - The base language in which the resource is written.
# + title - A short, descriptive, user-friendly title for the implementation guide.
# + versionAlgorithmString - Indicates the mechanism used to compare versions to determine which is more current.
# + contact - Contact details to assist a user in finding and communicating with the publisher.
# + fhirVersion - The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version.
# + definition - The information needed by an IG publisher tool to publish the whole implementation guide.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + identifier - A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance.
# + versionAlgorithmCoding - Indicates the mechanism used to compare versions to determine which is more current.
# + dependsOn - Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
# + manifest - Information about an assembled implementation guide, created by the publication tooling.
# + packageId - The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care.
# + 'version - The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
# + url - An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers.
# + license - The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + copyrightLabel - A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + publisher - The name of the organization or individual responsible for the release and ongoing maintenance of the implementation guide.
# + useContext - The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.
# + status - The status of this implementation guide. Enables tracking the life-cycle of the content.
@r5:ResourceDefinition {
    resourceType: "ImplementationGuide",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/ImplementationGuide",
    elements: {
        "date" : {
            name: "date",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.date"
        },
        "copyright" : {
            name: "copyright",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.copyright"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.extension"
        },
        "purpose" : {
            name: "purpose",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.purpose"
        },
        "jurisdiction" : {
            name: "jurisdiction",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.jurisdiction",
            valueSet: "http://hl7.org/fhir/ValueSet/jurisdiction"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.description"
        },
        "experimental" : {
            name: "experimental",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.experimental"
        },
        "global" : {
            name: "global",
            dataType: ImplementationGuideGlobal,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.global"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.title"
        },
        "versionAlgorithmString" : {
            name: "versionAlgorithmString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.versionAlgorithm[x]",
            valueSet: "http://hl7.org/fhir/ValueSet/version-algorithm"
        },
        "contact" : {
            name: "contact",
            dataType: r5:ContactDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.contact"
        },
        "fhirVersion" : {
            name: "fhirVersion",
            dataType: r5:code,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.fhirVersion",
            valueSet: "http://hl7.org/fhir/ValueSet/FHIR-version|5.0.0"
        },
        "definition" : {
            name: "definition",
            dataType: ImplementationGuideDefinition,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.definition"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.text"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.identifier"
        },
        "versionAlgorithmCoding" : {
            name: "versionAlgorithmCoding",
            dataType: r5:Coding,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.versionAlgorithm[x]",
            valueSet: "http://hl7.org/fhir/ValueSet/version-algorithm"
        },
        "dependsOn" : {
            name: "dependsOn",
            dataType: ImplementationGuideDependsOn,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.dependsOn"
        },
        "manifest" : {
            name: "manifest",
            dataType: ImplementationGuideManifest,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.manifest"
        },
        "packageId" : {
            name: "packageId",
            dataType: r5:id,
            min: 1,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.packageId"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.version"
        },
        "url" : {
            name: "url",
            dataType: r5:uri,
            min: 1,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.url"
        },
        "license" : {
            name: "license",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.license",
            valueSet: "http://hl7.org/fhir/ValueSet/spdx-license|5.0.0"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.contained"
        },
        "copyrightLabel" : {
            name: "copyrightLabel",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.copyrightLabel"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.implicitRules"
        },
        "publisher" : {
            name: "publisher",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.publisher"
        },
        "useContext" : {
            name: "useContext",
            dataType: r5:UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ImplementationGuide.useContext"
        },
        "status" : {
            name: "status",
            dataType: ImplementationGuideStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "ImplementationGuide.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type ImplementationGuide record {|
    *r5:DomainResource;

    RESOURCE_NAME_IMPLEMENTATIONGUIDE resourceType = RESOURCE_NAME_IMPLEMENTATIONGUIDE;

    r5:dateTime date?;
    r5:markdown copyright?;
    r5:Extension[] extension?;
    r5:markdown purpose?;
    r5:CodeableConcept[] jurisdiction?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    boolean experimental?;
    ImplementationGuideGlobal[] global?;
    r5:code language?;
    string title?;
    string versionAlgorithmString?;
    r5:ContactDetail[] contact?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.ImplementationGuide.fhirVersion constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.ImplementationGuide.fhirVersion constraint. This field must be an array containing at most one item."
        }
    }
    r5:code[] fhirVersion;
    ImplementationGuideDefinition definition?;
    string id?;
    r5:Narrative text?;
    r5:Identifier[] identifier?;
    r5:Coding versionAlgorithmCoding?;
    ImplementationGuideDependsOn[] dependsOn?;
    ImplementationGuideManifest manifest?;
    r5:id packageId;
    string 'version?;
    r5:uri url;
    r5:code license?;
    r5:Resource[] contained?;
    string copyrightLabel?;
    r5:Meta meta?;
    string name;
    r5:uri implicitRules?;
    string publisher?;
    r5:UsageContext[] useContext?;
    ImplementationGuideStatus status;
    r5:Element ...;
|};

# FHIR ImplementationGuideDefinitionGrouping datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The human-readable title to display for the package of resources when rendering the implementation guide.
# + description - Human readable text describing the package.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "ImplementationGuideDefinitionGrouping",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.definition.grouping.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.definition.grouping.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The human-readable title to display for the package of resources when rendering the implementation guide.",
            path: "ImplementationGuide.definition.grouping.name"
        },
        "description": {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Human readable text describing the package.",
            path: "ImplementationGuide.definition.grouping.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.definition.grouping.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideDefinitionGrouping record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string name;
    r5:markdown description?;
    string id?;
|};

# FHIR ImplementationGuideDefinition datatype record.
#
# + template - A template for building resources.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + 'resource - A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'parameter - A set of parameters that defines how the implementation guide is built. The parameters are defined by the relevant tools that build the implementation guides.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + page - A page / section in the implementation guide. The root page is the implementation guide home page.
# + grouping - A logical group of resources. Logical groups can be used when building pages.
@r5:DataTypeDefinition {
    name: "ImplementationGuideDefinition",
    baseType: (),
    elements: {
        "template": {
            name: "template",
            dataType: ImplementationGuideDefinitionTemplate,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A template for building resources.",
            path: "ImplementationGuide.definition.template"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.definition.extension"
        },
        "resource": {
            name: "resource",
            dataType: ImplementationGuideDefinitionResource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.",
            path: "ImplementationGuide.definition.resource"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.definition.modifierExtension"
        },
        "parameter": {
            name: "parameter",
            dataType: ImplementationGuideDefinitionParameter,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A set of parameters that defines how the implementation guide is built. The parameters are defined by the relevant tools that build the implementation guides.",
            path: "ImplementationGuide.definition.parameter"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.definition.id"
        },
        "page": {
            name: "page",
            dataType: ImplementationGuideDefinitionPage,
            min: 0,
            max: 1,
            isArray: false,
            description: "A page / section in the implementation guide. The root page is the implementation guide home page.",
            path: "ImplementationGuide.definition.page"
        },
        "grouping": {
            name: "grouping",
            dataType: ImplementationGuideDefinitionGrouping,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A logical group of resources. Logical groups can be used when building pages.",
            path: "ImplementationGuide.definition.grouping"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideDefinition record {|
    *r5:BackboneElement;

    ImplementationGuideDefinitionTemplate[] template?;
    r5:Extension[] extension?;
    ImplementationGuideDefinitionResource[] 'resource?;
    r5:Extension[] modifierExtension?;
    ImplementationGuideDefinitionParameter[] 'parameter?;
    string id?;
    ImplementationGuideDefinitionPage page?;
    ImplementationGuideDefinitionGrouping[] grouping?;
|};

# ImplementationGuideDefinitionPageGeneration enum
public enum ImplementationGuideDefinitionPageGeneration {
   CODE_GENERATION_GENERATED = "generated",
   CODE_GENERATION_XML = "xml",
   CODE_GENERATION_MARKDOWN = "markdown",
   CODE_GENERATION_HTML = "html"
}

# FHIR ImplementationGuideDefinitionParameter datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - A tool-specific code that defines the parameter.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + value - Value for named type.
@r5:DataTypeDefinition {
    name: "ImplementationGuideDefinitionParameter",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.definition.parameter.extension"
        },
        "code": {
            name: "code",
            dataType: r5:Coding,
            min: 1,
            max: 1,
            isArray: false,
            description: "A tool-specific code that defines the parameter.",
            path: "ImplementationGuide.definition.parameter.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.definition.parameter.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.definition.parameter.id"
        },
        "value": {
            name: "value",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Value for named type.",
            path: "ImplementationGuide.definition.parameter.value"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideDefinitionParameter record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Coding code;
    r5:Extension[] modifierExtension?;
    string id?;
    string value;
|};

# FHIR ImplementationGuideManifestPage datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + anchor - The name of an anchor available on the page.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Relative path to the page.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + title - Label for the page intended for human display.
@r5:DataTypeDefinition {
    name: "ImplementationGuideManifestPage",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.manifest.page.extension"
        },
        "anchor": {
            name: "anchor",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The name of an anchor available on the page.",
            path: "ImplementationGuide.manifest.page.anchor"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.manifest.page.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Relative path to the page.",
            path: "ImplementationGuide.manifest.page.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.manifest.page.id"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Label for the page intended for human display.",
            path: "ImplementationGuide.manifest.page.title"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideManifestPage record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    string[] anchor?;
    r5:Extension[] modifierExtension?;
    string name;
    string id?;
    string title?;
|};

# FHIR ImplementationGuideGlobal datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + profile - A reference to the profile that all instances must conform to.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of resource that all instances must conform to.
@r5:DataTypeDefinition {
    name: "ImplementationGuideGlobal",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.global.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.global.modifierExtension"
        },
        "profile": {
            name: "profile",
            dataType: r5:canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "A reference to the profile that all instances must conform to.",
            path: "ImplementationGuide.global.profile"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.global.id"
        },
        "type": {
            name: "type",
            dataType: r5:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "The type of resource that all instances must conform to.",
            path: "ImplementationGuide.global.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideGlobal record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:canonical profile;
    string id?;
    r5:code 'type;
|};

# FHIR ImplementationGuideManifest datatype record.
#
# + image - Indicates a relative path to an image that exists within the IG.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + other - Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
# + 'resource - A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + rendering - A pointer to official web page, PDF or other rendering of the implementation guide.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + page - Information about a page within the IG.
@r5:DataTypeDefinition {
    name: "ImplementationGuideManifest",
    baseType: (),
    elements: {
        "image": {
            name: "image",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Indicates a relative path to an image that exists within the IG.",
            path: "ImplementationGuide.manifest.image"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.manifest.extension"
        },
        "other": {
            name: "other",
            dataType: string,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.",
            path: "ImplementationGuide.manifest.other"
        },
        "resource": {
            name: "resource",
            dataType: ImplementationGuideManifestResource,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.",
            path: "ImplementationGuide.manifest.resource"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.manifest.modifierExtension"
        },
        "rendering": {
            name: "rendering",
            dataType: r5:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "A pointer to official web page, PDF or other rendering of the implementation guide.",
            path: "ImplementationGuide.manifest.rendering"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.manifest.id"
        },
        "page": {
            name: "page",
            dataType: ImplementationGuideManifestPage,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Information about a page within the IG.",
            path: "ImplementationGuide.manifest.page"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideManifest record {|
    *r5:BackboneElement;

    string[] image?;
    r5:Extension[] extension?;
    string[] other?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.ImplementationGuide.manifest.resource constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.ImplementationGuide.manifest.resource constraint. This field must be an array containing at most one item."
        }
    }
    ImplementationGuideManifestResource[] 'resource;
    r5:Extension[] modifierExtension?;
    r5:urlType rendering?;
    string id?;
    ImplementationGuideManifestPage[] page?;
|};

# FHIR ImplementationGuideDefinitionResource datatype record.
#
# + reference - Where this resource is found.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + groupingId - Reference to the id of the grouping this resource appears in.
# + isExample - If true, indicates the resource is an example instance.
# + fhirVersion - Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + profile - If present, indicates profile(s) the instance is valid against.
# + name - A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
# + description - A description of the reason that a resource has been included in the implementation guide.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "ImplementationGuideDefinitionResource",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Where this resource is found.",
            path: "ImplementationGuide.definition.resource.reference"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.definition.resource.extension"
        },
        "groupingId": {
            name: "groupingId",
            dataType: r5:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "Reference to the id of the grouping this resource appears in.",
            path: "ImplementationGuide.definition.resource.groupingId"
        },
        "isExample": {
            name: "isExample",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If true, indicates the resource is an example instance.",
            path: "ImplementationGuide.definition.resource.isExample"
        },
        "fhirVersion": {
            name: "fhirVersion",
            dataType: r5:code,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.",
            path: "ImplementationGuide.definition.resource.fhirVersion"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.definition.resource.modifierExtension"
        },
        "profile": {
            name: "profile",
            dataType: r5:canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "If present, indicates profile(s) the instance is valid against.",
            path: "ImplementationGuide.definition.resource.profile"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).",
            path: "ImplementationGuide.definition.resource.name"
        },
        "description": {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A description of the reason that a resource has been included in the implementation guide.",
            path: "ImplementationGuide.definition.resource.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.definition.resource.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideDefinitionResource record {|
    *r5:BackboneElement;

    r5:Reference reference;
    r5:Extension[] extension?;
    r5:id groupingId?;
    boolean isExample?;
    r5:code[] fhirVersion?;
    r5:Extension[] modifierExtension?;
    r5:canonical[] profile?;
    string name?;
    r5:markdown description?;
    string id?;
|};

# FHIR ImplementationGuideManifestResource datatype record.
#
# + reference - Where this resource is found.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + isExample - If true, indicates the resource is an example instance.
# + relativePath - The relative path for primary page for this resource within the IG.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + profile - If present, indicates profile(s) the instance is valid against.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "ImplementationGuideManifestResource",
    baseType: (),
    elements: {
        "reference": {
            name: "reference",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Where this resource is found.",
            path: "ImplementationGuide.manifest.resource.reference"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.manifest.resource.extension"
        },
        "isExample": {
            name: "isExample",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If true, indicates the resource is an example instance.",
            path: "ImplementationGuide.manifest.resource.isExample"
        },
        "relativePath": {
            name: "relativePath",
            dataType: r5:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "The relative path for primary page for this resource within the IG.",
            path: "ImplementationGuide.manifest.resource.relativePath"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.manifest.resource.modifierExtension"
        },
        "profile": {
            name: "profile",
            dataType: r5:canonical,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "If present, indicates profile(s) the instance is valid against.",
            path: "ImplementationGuide.manifest.resource.profile"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.manifest.resource.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideManifestResource record {|
    *r5:BackboneElement;

    r5:Reference reference;
    r5:Extension[] extension?;
    boolean isExample?;
    r5:urlType relativePath?;
    r5:Extension[] modifierExtension?;
    r5:canonical[] profile?;
    string id?;
|};

# ImplementationGuideStatus enum
public enum ImplementationGuideStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR ImplementationGuideDefinitionTemplate datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Type of template specified.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + scope - The scope in which the template applies.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - The source location for the template.
@r5:DataTypeDefinition {
    name: "ImplementationGuideDefinitionTemplate",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.definition.template.extension"
        },
        "code": {
            name: "code",
            dataType: r5:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "Type of template specified.",
            path: "ImplementationGuide.definition.template.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.definition.template.modifierExtension"
        },
        "scope": {
            name: "scope",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The scope in which the template applies.",
            path: "ImplementationGuide.definition.template.scope"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.definition.template.id"
        },
        "source": {
            name: "source",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The source location for the template.",
            path: "ImplementationGuide.definition.template.source"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideDefinitionTemplate record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:code code;
    r5:Extension[] modifierExtension?;
    string scope?;
    string id?;
    string 'source;
|};

# FHIR ImplementationGuideDefinitionPage datatype record.
#
# + generation - A code that indicates how the page is generated.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + sourceImplementationGuideString - Indicates the URL or the actual content to provide for the page.
# + sourceImplementationGuideMarkdown - Indicates the URL or the actual content to provide for the page.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The url by which the page should be known when published.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + title - A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
# + sourceImplementationGuideUrl - Indicates the URL or the actual content to provide for the page.
@r5:DataTypeDefinition {
    name: "ImplementationGuideDefinitionPage",
    baseType: (),
    elements: {
        "generation": {
            name: "generation",
            dataType: ImplementationGuideDefinitionPageGeneration,
            min: 1,
            max: 1,
            isArray: false,
            description: "A code that indicates how the page is generated.",
            path: "ImplementationGuide.definition.page.generation"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.definition.page.extension"
        },
        "sourceImplementationGuideString": {
            name: "sourceImplementationGuideString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates the URL or the actual content to provide for the page.",
            path: "ImplementationGuide.definition.page.source[x]"
        },
        "sourceImplementationGuideMarkdown": {
            name: "sourceImplementationGuideMarkdown",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates the URL or the actual content to provide for the page.",
            path: "ImplementationGuide.definition.page.source[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.definition.page.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: r5:urlType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The url by which the page should be known when published.",
            path: "ImplementationGuide.definition.page.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.definition.page.id"
        },
        "title": {
            name: "title",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.",
            path: "ImplementationGuide.definition.page.title"
        },
        "sourceImplementationGuideUrl": {
            name: "sourceImplementationGuideUrl",
            dataType: r5:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "Indicates the URL or the actual content to provide for the page.",
            path: "ImplementationGuide.definition.page.source[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideDefinitionPage record {|
    *r5:BackboneElement;

    ImplementationGuideDefinitionPageGeneration generation;
    r5:Extension[] extension?;
    string sourceImplementationGuideString?;
    r5:markdown sourceImplementationGuideMarkdown?;
    r5:Extension[] modifierExtension?;
    r5:urlType name;
    string id?;
    string title;
    r5:urlType sourceImplementationGuideUrl?;
|};

# FHIR ImplementationGuideDependsOn datatype record.
#
# + reason - A description explaining the nature of the dependency on the listed IG.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + packageId - The NPM package name for the Implementation Guide that this IG depends on.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + uri - A canonical reference to the Implementation guide for the dependency.
# + 'version - The version of the IG that is depended on, when the correct version is required to understand the IG correctly.
@r5:DataTypeDefinition {
    name: "ImplementationGuideDependsOn",
    baseType: (),
    elements: {
        "reason": {
            name: "reason",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A description explaining the nature of the dependency on the listed IG.",
            path: "ImplementationGuide.dependsOn.reason"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ImplementationGuide.dependsOn.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ImplementationGuide.dependsOn.modifierExtension"
        },
        "packageId": {
            name: "packageId",
            dataType: r5:id,
            min: 0,
            max: 1,
            isArray: false,
            description: "The NPM package name for the Implementation Guide that this IG depends on.",
            path: "ImplementationGuide.dependsOn.packageId"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ImplementationGuide.dependsOn.id"
        },
        "uri": {
            name: "uri",
            dataType: r5:canonical,
            min: 1,
            max: 1,
            isArray: false,
            description: "A canonical reference to the Implementation guide for the dependency.",
            path: "ImplementationGuide.dependsOn.uri"
        },
        "version": {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The version of the IG that is depended on, when the correct version is required to understand the IG correctly.",
            path: "ImplementationGuide.dependsOn.version"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ImplementationGuideDependsOn record {|
    *r5:BackboneElement;

    r5:markdown reason?;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:id packageId?;
    string id?;
    r5:canonical uri;
    string 'version?;
|};

