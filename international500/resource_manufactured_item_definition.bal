// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_MANUFACTUREDITEMDEFINITION = "http://hl7.org/fhir/StructureDefinition/ManufacturedItemDefinition";
public const RESOURCE_NAME_MANUFACTUREDITEMDEFINITION = "ManufacturedItemDefinition";

# FHIR ManufacturedItemDefinition resource record.
#
# + resourceType - The type of the resource describes
# + identifier - Unique identifier.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + ingredient - The ingredients of this manufactured item. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + manufacturer - Manufacturer of the item, one of several possible.
# + marketingStatus - Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.
# + component - Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + unitOfPresentation - The “real-world” units in which the quantity of the manufactured item is described.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A descriptive name applied to this item.
# + property - General characteristics of this item.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + manufacturedDoseForm - Dose form as manufactured and before any transformation into the pharmaceutical product.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + status - The status of this item. Enables tracking the life-cycle of the content.
@r5:ResourceDefinition {
    resourceType: "ManufacturedItemDefinition",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/ManufacturedItemDefinition",
    elements: {
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ManufacturedItemDefinition.identifier"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ManufacturedItemDefinition.extension"
        },
        "ingredient" : {
            name: "ingredient",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ManufacturedItemDefinition.ingredient",
            valueSet: "http://hl7.org/fhir/ValueSet/substance-codes"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ManufacturedItemDefinition.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "ManufacturedItemDefinition.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "manufacturer" : {
            name: "manufacturer",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ManufacturedItemDefinition.manufacturer"
        },
        "marketingStatus" : {
            name: "marketingStatus",
            dataType: r5:MarketingStatus,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ManufacturedItemDefinition.marketingStatus"
        },
        "component" : {
            name: "component",
            dataType: ManufacturedItemDefinitionComponent,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ManufacturedItemDefinition.component"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ManufacturedItemDefinition.contained"
        },
        "unitOfPresentation" : {
            name: "unitOfPresentation",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "ManufacturedItemDefinition.unitOfPresentation",
            valueSet: "http://hl7.org/fhir/ValueSet/unit-of-presentation"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "ManufacturedItemDefinition.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ManufacturedItemDefinition.name"
        },
        "property" : {
            name: "property",
            dataType: ManufacturedItemDefinitionProperty,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "ManufacturedItemDefinition.property"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "ManufacturedItemDefinition.implicitRules"
        },
        "manufacturedDoseForm" : {
            name: "manufacturedDoseForm",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            path: "ManufacturedItemDefinition.manufacturedDoseForm",
            valueSet: "http://hl7.org/fhir/ValueSet/manufactured-dose-form"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "ManufacturedItemDefinition.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "ManufacturedItemDefinition.text"
        },
        "status" : {
            name: "status",
            dataType: ManufacturedItemDefinitionStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "ManufacturedItemDefinition.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type ManufacturedItemDefinition record {|
    *r5:DomainResource;

    RESOURCE_NAME_MANUFACTUREDITEMDEFINITION resourceType = RESOURCE_NAME_MANUFACTUREDITEMDEFINITION;

    r5:Identifier[] identifier?;
    r5:Extension[] extension?;
    r5:CodeableConcept[] ingredient?;
    r5:Extension[] modifierExtension?;
    r5:code language?;
    r5:Reference[] manufacturer?;
    r5:MarketingStatus[] marketingStatus?;
    ManufacturedItemDefinitionComponent[] component?;
    r5:Resource[] contained?;
    r5:CodeableConcept unitOfPresentation?;
    r5:Meta meta?;
    string name?;
    ManufacturedItemDefinitionProperty[] property?;
    r5:uri implicitRules?;
    r5:CodeableConcept manufacturedDoseForm;
    string id?;
    r5:Narrative text?;
    ManufacturedItemDefinitionStatus status;
    r5:Element ...;
|};

# FHIR ManufacturedItemDefinitionComponent datatype record.
#
# + amount - The measurable amount of total quantity of all substances in the component, expressable in different ways (e.g. by mass or volume).
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + constituent - A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient).
# + 'function - The function of this component within the item e.g. delivers active ingredient, masks taste.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Defining type of the component e.g. shell, layer, ink.
@r5:DataTypeDefinition {
    name: "ManufacturedItemDefinitionComponent",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: r5:Quantity,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The measurable amount of total quantity of all substances in the component, expressable in different ways (e.g. by mass or volume).",
            path: "ManufacturedItemDefinition.component.amount"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ManufacturedItemDefinition.component.extension"
        },
        "constituent": {
            name: "constituent",
            dataType: ManufacturedItemDefinitionComponentConstituent,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient).",
            path: "ManufacturedItemDefinition.component.constituent"
        },
        "function": {
            name: "function",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The function of this component within the item e.g. delivers active ingredient, masks taste.",
            path: "ManufacturedItemDefinition.component.function"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ManufacturedItemDefinition.component.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ManufacturedItemDefinition.component.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "Defining type of the component e.g. shell, layer, ink.",
            path: "ManufacturedItemDefinition.component.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ManufacturedItemDefinitionComponent record {|
    *r5:BackboneElement;

    r5:Quantity[] amount?;
    r5:Extension[] extension?;
    ManufacturedItemDefinitionComponentConstituent[] constituent?;
    r5:CodeableConcept[] 'function?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept 'type;
|};

# ManufacturedItemDefinitionStatus enum
public enum ManufacturedItemDefinitionStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR ManufacturedItemDefinitionProperty datatype record.
#
# + valueCodeableConcept - A value for the characteristic.
# + valueBoolean - A value for the characteristic.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueMarkdown - A value for the characteristic.
# + valueAttachment - A value for the characteristic.
# + valueReference - A value for the characteristic.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueDate - A value for the characteristic.
# + 'type - A code expressing the type of characteristic.
# + valueQuantity - A value for the characteristic.
@r5:DataTypeDefinition {
    name: "ManufacturedItemDefinitionProperty",
    baseType: (),
    elements: {
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "ManufacturedItemDefinition.property.value[x]"
        },
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "ManufacturedItemDefinition.property.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ManufacturedItemDefinition.property.extension"
        },
        "valueMarkdown": {
            name: "valueMarkdown",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "ManufacturedItemDefinition.property.value[x]"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "ManufacturedItemDefinition.property.value[x]"
        },
        "valueReference": {
            name: "valueReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "ManufacturedItemDefinition.property.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ManufacturedItemDefinition.property.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ManufacturedItemDefinition.property.id"
        },
        "valueDate": {
            name: "valueDate",
            dataType: r5:date,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "ManufacturedItemDefinition.property.value[x]"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "A code expressing the type of characteristic.",
            path: "ManufacturedItemDefinition.property.type"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "ManufacturedItemDefinition.property.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ManufacturedItemDefinitionProperty record {|
    *r5:BackboneElement;

    r5:CodeableConcept valueCodeableConcept?;
    boolean valueBoolean?;
    r5:Extension[] extension?;
    r5:markdown valueMarkdown?;
    r5:Attachment valueAttachment?;
    r5:Reference valueReference?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:date valueDate?;
    r5:CodeableConcept 'type;
    r5:Quantity valueQuantity?;
|};

# FHIR ManufacturedItemDefinitionComponentConstituent datatype record.
#
# + hasIngredient - The ingredient that is the constituent of the given component.
# + amount - The measurable amount of the substance, expressable in different ways (e.g. by mass or volume).
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + 'function - The function of this constituent within the component e.g. binder.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + location - The physical location of the constituent/ingredient within the component. Example – if the component is the bead in the capsule, then the location would be where the ingredient resides within the product part – intragranular, extra-granular, etc.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "ManufacturedItemDefinitionComponentConstituent",
    baseType: (),
    elements: {
        "hasIngredient": {
            name: "hasIngredient",
            dataType: r5:CodeableReference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The ingredient that is the constituent of the given component.",
            path: "ManufacturedItemDefinition.component.constituent.hasIngredient"
        },
        "amount": {
            name: "amount",
            dataType: r5:Quantity,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The measurable amount of the substance, expressable in different ways (e.g. by mass or volume).",
            path: "ManufacturedItemDefinition.component.constituent.amount"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "ManufacturedItemDefinition.component.constituent.extension"
        },
        "function": {
            name: "function",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The function of this constituent within the component e.g. binder.",
            path: "ManufacturedItemDefinition.component.constituent.function"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "ManufacturedItemDefinition.component.constituent.modifierExtension"
        },
        "location": {
            name: "location",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The physical location of the constituent/ingredient within the component. Example – if the component is the bead in the capsule, then the location would be where the ingredient resides within the product part – intragranular, extra-granular, etc.",
            path: "ManufacturedItemDefinition.component.constituent.location"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "ManufacturedItemDefinition.component.constituent.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ManufacturedItemDefinitionComponentConstituent record {|
    *r5:BackboneElement;

    r5:CodeableReference[] hasIngredient?;
    r5:Quantity[] amount?;
    r5:Extension[] extension?;
    r5:CodeableConcept[] 'function?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept[] location?;
    string id?;
|};

