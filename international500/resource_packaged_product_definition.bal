// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_PACKAGEDPRODUCTDEFINITION = "http://hl7.org/fhir/StructureDefinition/PackagedProductDefinition";
public const RESOURCE_NAME_PACKAGEDPRODUCTDEFINITION = "PackagedProductDefinition";

# FHIR PackagedProductDefinition resource record.
#
# + resourceType - The type of the resource describes
# + statusDate - The date at which the given status became applicable.
# + identifier - A unique identifier for this package as whole - not the the content of the package. Unique instance identifiers assigned to a package by manufacturers, regulators, drug catalogue custodians or other organizations.
# + attachedDocument - Additional information or supporting documentation about the packaged product.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + containedItemQuantity - A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size. This attribute differs from containedItem.amount in that it can give a single aggregated count of all tablet types in a pack, even when these are different manufactured items. For example a pill pack of 21 tablets plus 7 sugar tablets, can be denoted here as '28 tablets'. This attribute is repeatable so that the different item types in one pack type can be counted (e.g. a count of vials and count of syringes). Each repeat must have different units, so that it is clear what the different sets of counted items are, and it is not intended to allow different counts of similar items (e.g. not '2 tubes and 3 tubes'). Repeats are not to be used to represent different pack sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this resource.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Textual description. Note that this is not the name of the package or product.
# + language - The base language in which the resource is written.
# + packaging - A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).
# + 'type - A high level category e.g. medicinal product, raw material, shipping/transport container, etc.
# + manufacturer - Manufacturer of this package type. When there are multiple it means these are all possible manufacturers.
# + marketingStatus - Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + legalStatusOfSupply - The legal status of supply of the packaged item as classified by the regulator.
# + copackagedIndicator - Identifies if the package contains different items, such as when a drug product is supplied with another item e.g. a diluent or adjuvant.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + packageFor - The product this package model relates to, not the contents of the package (for which see package.containedItem).
# + status - The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status.
@r5:ResourceDefinition {
    resourceType: "PackagedProductDefinition",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/PackagedProductDefinition",
    elements: {
        "statusDate" : {
            name: "statusDate",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.statusDate"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.identifier"
        },
        "attachedDocument" : {
            name: "attachedDocument",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.attachedDocument"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.extension"
        },
        "containedItemQuantity" : {
            name: "containedItemQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.containedItemQuantity"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.description"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "packaging" : {
            name: "packaging",
            dataType: PackagedProductDefinitionPackaging,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.packaging"
        },
        "type" : {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.type",
            valueSet: "http://hl7.org/fhir/ValueSet/package-type"
        },
        "manufacturer" : {
            name: "manufacturer",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.manufacturer"
        },
        "marketingStatus" : {
            name: "marketingStatus",
            dataType: r5:MarketingStatus,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.marketingStatus"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.contained"
        },
        "legalStatusOfSupply" : {
            name: "legalStatusOfSupply",
            dataType: PackagedProductDefinitionLegalStatusOfSupply,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.legalStatusOfSupply"
        },
        "copackagedIndicator" : {
            name: "copackagedIndicator",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.copackagedIndicator"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.implicitRules"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.text"
        },
        "packageFor" : {
            name: "packageFor",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "PackagedProductDefinition.packageFor"
        },
        "status" : {
            name: "status",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "PackagedProductDefinition.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type PackagedProductDefinition record {|
    *r5:DomainResource;

    RESOURCE_NAME_PACKAGEDPRODUCTDEFINITION resourceType = RESOURCE_NAME_PACKAGEDPRODUCTDEFINITION;

    r5:dateTime statusDate?;
    r5:Identifier[] identifier?;
    r5:Reference[] attachedDocument?;
    r5:Extension[] extension?;
    r5:Quantity[] containedItemQuantity?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    r5:code language?;
    PackagedProductDefinitionPackaging packaging?;
    r5:CodeableConcept 'type?;
    r5:Reference[] manufacturer?;
    r5:MarketingStatus[] marketingStatus?;
    r5:Resource[] contained?;
    PackagedProductDefinitionLegalStatusOfSupply[] legalStatusOfSupply?;
    boolean copackagedIndicator?;
    r5:Meta meta?;
    string name?;
    r5:uri implicitRules?;
    string id?;
    r5:Narrative text?;
    r5:Reference[] packageFor?;
    r5:CodeableConcept status?;
    r5:Element ...;
|};

# FHIR PackagedProductDefinitionPackagingContainedItem datatype record.
#
# + amount - The number of this type of item within this packaging or for continuous items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity (especially the long definition).
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + item - The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co-packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted - such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.packaging.packaging).
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "PackagedProductDefinitionPackagingContainedItem",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "The number of this type of item within this packaging or for continuous items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity (especially the long definition).",
            path: "PackagedProductDefinition.packaging.containedItem.amount"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "PackagedProductDefinition.packaging.containedItem.extension"
        },
        "item": {
            name: "item",
            dataType: r5:CodeableReference,
            min: 1,
            max: 1,
            isArray: false,
            description: "The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co-packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted - such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.packaging.packaging).",
            path: "PackagedProductDefinition.packaging.containedItem.item"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "PackagedProductDefinition.packaging.containedItem.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "PackagedProductDefinition.packaging.containedItem.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type PackagedProductDefinitionPackagingContainedItem record {|
    *r5:BackboneElement;

    r5:Quantity amount?;
    r5:Extension[] extension?;
    r5:CodeableReference item;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR PackagedProductDefinitionPackagingProperty datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valuePackagedProductDefinitionBoolean - A value for the characteristic.
# + valuePackagedProductDefinitionQuantity - A value for the characteristic.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + valuePackagedProductDefinitionDate - A value for the characteristic.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valuePackagedProductDefinitionCodeableConcept - A value for the characteristic.
# + 'type - A code expressing the type of characteristic.
# + valuePackagedProductDefinitionAttachment - A value for the characteristic.
@r5:DataTypeDefinition {
    name: "PackagedProductDefinitionPackagingProperty",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "PackagedProductDefinition.packaging.property.extension"
        },
        "valuePackagedProductDefinitionBoolean": {
            name: "valuePackagedProductDefinitionBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "PackagedProductDefinition.packaging.property.value[x]"
        },
        "valuePackagedProductDefinitionQuantity": {
            name: "valuePackagedProductDefinitionQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "PackagedProductDefinition.packaging.property.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "PackagedProductDefinition.packaging.property.modifierExtension"
        },
        "valuePackagedProductDefinitionDate": {
            name: "valuePackagedProductDefinitionDate",
            dataType: r5:date,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "PackagedProductDefinition.packaging.property.value[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "PackagedProductDefinition.packaging.property.id"
        },
        "valuePackagedProductDefinitionCodeableConcept": {
            name: "valuePackagedProductDefinitionCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "PackagedProductDefinition.packaging.property.value[x]"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "A code expressing the type of characteristic.",
            path: "PackagedProductDefinition.packaging.property.type"
        },
        "valuePackagedProductDefinitionAttachment": {
            name: "valuePackagedProductDefinitionAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the characteristic.",
            path: "PackagedProductDefinition.packaging.property.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type PackagedProductDefinitionPackagingProperty record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    boolean valuePackagedProductDefinitionBoolean?;
    r5:Quantity valuePackagedProductDefinitionQuantity?;
    r5:Extension[] modifierExtension?;
    r5:date valuePackagedProductDefinitionDate?;
    string id?;
    r5:CodeableConcept valuePackagedProductDefinitionCodeableConcept?;
    r5:CodeableConcept 'type;
    r5:Attachment valuePackagedProductDefinitionAttachment?;
|};

# FHIR PackagedProductDefinitionPackaging datatype record.
#
# + identifier - A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode).
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + quantity - The quantity of packaging items contained at this layer of the package. This does not relate to the number of contained items but relates solely to the number of packaging items. When looking at the outermost layer it is always 1. If there are two boxes within, at the next layer it would be 2.
# + componentPart - Is this a part of the packaging (e.g. a cap or bottle stopper), rather than the packaging itself (e.g. a bottle or vial). The latter type are designed be a container, but the former are not.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'type - The physical type of the container of the items.
# + manufacturer - Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item.
# + containedItem - The item(s) within the packaging.
# + material - Material type of the package item.
# + shelfLifeStorage - Shelf Life and storage information.
# + property - General characteristics of this item.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + alternateMaterial - A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve).
@r5:DataTypeDefinition {
    name: "PackagedProductDefinitionPackaging",
    baseType: (),
    elements: {
        "identifier": {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode).",
            path: "PackagedProductDefinition.packaging.identifier"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "PackagedProductDefinition.packaging.extension"
        },
        "quantity": {
            name: "quantity",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "The quantity of packaging items contained at this layer of the package. This does not relate to the number of contained items but relates solely to the number of packaging items. When looking at the outermost layer it is always 1. If there are two boxes within, at the next layer it would be 2.",
            path: "PackagedProductDefinition.packaging.quantity"
        },
        "componentPart": {
            name: "componentPart",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Is this a part of the packaging (e.g. a cap or bottle stopper), rather than the packaging itself (e.g. a bottle or vial). The latter type are designed be a container, but the former are not.",
            path: "PackagedProductDefinition.packaging.componentPart"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "PackagedProductDefinition.packaging.modifierExtension"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The physical type of the container of the items.",
            path: "PackagedProductDefinition.packaging.type"
        },
        "manufacturer": {
            name: "manufacturer",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item.",
            path: "PackagedProductDefinition.packaging.manufacturer"
        },
        "containedItem": {
            name: "containedItem",
            dataType: PackagedProductDefinitionPackagingContainedItem,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The item(s) within the packaging.",
            path: "PackagedProductDefinition.packaging.containedItem"
        },
        "material": {
            name: "material",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Material type of the package item.",
            path: "PackagedProductDefinition.packaging.material"
        },
        "shelfLifeStorage": {
            name: "shelfLifeStorage",
            dataType: r5:ProductShelfLife,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Shelf Life and storage information.",
            path: "PackagedProductDefinition.packaging.shelfLifeStorage"
        },
        "property": {
            name: "property",
            dataType: PackagedProductDefinitionPackagingProperty,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "General characteristics of this item.",
            path: "PackagedProductDefinition.packaging.property"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "PackagedProductDefinition.packaging.id"
        },
        "alternateMaterial": {
            name: "alternateMaterial",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve).",
            path: "PackagedProductDefinition.packaging.alternateMaterial"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type PackagedProductDefinitionPackaging record {|
    *r5:BackboneElement;

    r5:Identifier[] identifier?;
    r5:Extension[] extension?;
    r5:integer quantity?;
    boolean componentPart?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept 'type?;
    r5:Reference[] manufacturer?;
    PackagedProductDefinitionPackagingContainedItem[] containedItem?;
    r5:CodeableConcept[] material?;
    r5:ProductShelfLife[] shelfLifeStorage?;
    PackagedProductDefinitionPackagingProperty[] property?;
    string id?;
    r5:CodeableConcept[] alternateMaterial?;
|};

# FHIR PackagedProductDefinitionLegalStatusOfSupply datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - The actual status of supply. Conveys in what situation this package type may be supplied for use.
# + jurisdiction - The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "PackagedProductDefinitionLegalStatusOfSupply",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "PackagedProductDefinition.legalStatusOfSupply.extension"
        },
        "code": {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The actual status of supply. Conveys in what situation this package type may be supplied for use.",
            path: "PackagedProductDefinition.legalStatusOfSupply.code"
        },
        "jurisdiction": {
            name: "jurisdiction",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context.",
            path: "PackagedProductDefinition.legalStatusOfSupply.jurisdiction"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "PackagedProductDefinition.legalStatusOfSupply.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "PackagedProductDefinition.legalStatusOfSupply.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type PackagedProductDefinitionLegalStatusOfSupply record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:CodeableConcept code?;
    r5:CodeableConcept jurisdiction?;
    r5:Extension[] modifierExtension?;
    string id?;
|};

