// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_PROVENANCERELEVANTHISTORY = "http://hl7.org/fhir/StructureDefinition/provenance-relevant-history";
public const RESOURCE_NAME_PROVENANCERELEVANTHISTORY = "Provenance";

# FHIR ProvenanceRelevantHistory resource record.
#
# + resourceType - The type of the resource describes
# + agent - Who was involved with change.
# * agent Slicings
# 1) ProvenanceRelevantHistoryAgentAuthor: Author
#       - min = 0
#       - max = 1
#
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + activity - Indicates what action occurred to the referenced resource.
# + signature - A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + encounter - This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).
# + recorded - The instant of time at which the activity was recorded.
# + target - This points to the version of the resource that was created as a result of this historical record action. Typically only a single resource will be referenced, but if the same action is performed to multiple resources in the context of a transaction, some systems may link multiple resource instances.
# + authorization - The authorization (e.g., PurposeOfUse) that was used during the event being recorded.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + patient - The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + location - Where the activity occurred, if relevant.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + basedOn - Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.
# + entity - An entity used in this activity.
# + occurredDateTime - This indicates the time the resource action (creation, revision, deletion, etc.) occurred.
# + policy - Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.
@r5:ResourceDefinition {
    resourceType: "Provenance",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/provenance-relevant-history",
    elements: {
        "agent" : {
            name: "agent",
            dataType: ProvenanceRelevantHistoryAgent,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.agent"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.extension"
        },
        "activity" : {
            name: "activity",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            path: "Provenance.activity",
            valueSet: "http://hl7.org/fhir/ValueSet/provenance-history-record-activity"
        },
        "signature" : {
            name: "signature",
            dataType: r5:Signature,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.signature"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "Provenance.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "encounter" : {
            name: "encounter",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Provenance.encounter"
        },
        "recorded" : {
            name: "recorded",
            dataType: r5:instant,
            min: 0,
            max: 1,
            isArray: false,
            path: "Provenance.recorded"
        },
        "target" : {
            name: "target",
            dataType: r5:Reference,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.target"
        },
        "authorization" : {
            name: "authorization",
            dataType: r5:CodeableReference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.authorization",
            valueSet: "http://terminology.hl7.org/ValueSet/v3-PurposeOfUse"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "Provenance.meta"
        },
        "patient" : {
            name: "patient",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Provenance.patient"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "Provenance.implicitRules"
        },
        "location" : {
            name: "location",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "Provenance.location"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "Provenance.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "Provenance.text"
        },
        "basedOn" : {
            name: "basedOn",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.basedOn"
        },
        "entity" : {
            name: "entity",
            dataType: ProvenanceRelevantHistoryEntity,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.entity"
        },
        "occurredDateTime" : {
            name: "occurredDateTime",
            dataType: r5:dateTime,
            min: 1,
            max: 1,
            isArray: false,
            path: "Provenance.occurred[x]"
        },
        "policy" : {
            name: "policy",
            dataType: r5:uri,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "Provenance.policy"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type ProvenanceRelevantHistory record {|
    *r5:DomainResource;

    RESOURCE_NAME_PROVENANCERELEVANTHISTORY resourceType = RESOURCE_NAME_PROVENANCERELEVANTHISTORY;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Provenance.agent constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Provenance.agent constraint. This field must be an array containing at most one item."
        }
    }
    ProvenanceRelevantHistoryAgent[] agent;
    r5:Extension[] extension?;
    r5:CodeableConcept activity;
    r5:Signature[] signature?;
    r5:Extension[] modifierExtension?;
    r5:code language?;
    r5:Reference encounter?;
    r5:instant recorded?;
    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Provenance.target constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Provenance.target constraint. This field must be an array containing at most one item."
        }
    }
    r5:Reference[] target;
    r5:CodeableReference[] authorization?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    r5:Reference patient?;
    r5:uri implicitRules?;
    r5:Reference location?;
    string id?;
    r5:Narrative text?;
    r5:Reference[] basedOn?;
    ProvenanceRelevantHistoryEntity[] entity?;
    r5:dateTime occurredDateTime;
    r5:uri[] policy?;
    r5:Element ...;
|};

# FHIR ProvenanceRelevantHistoryEntity datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - How the entity was used during the activity.
# + what - Identity of the Entity used. May be a logical or physical uri and maybe absolute or relative.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "ProvenanceRelevantHistoryEntity",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Provenance.entity.extension"
        },
        "role": {
            name: "role",
            dataType: ProvenanceRelevantHistoryEntityRole,
            min: 1,
            max: 1,
            isArray: false,
            description: "How the entity was used during the activity.",
            path: "Provenance.entity.role"
        },
        "what": {
            name: "what",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Identity of the Entity used. May be a logical or physical uri and maybe absolute or relative.",
            path: "Provenance.entity.what"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Provenance.entity.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Provenance.entity.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ProvenanceRelevantHistoryEntity record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    ProvenanceRelevantHistoryEntityRole role;
    r5:Reference what;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR ProvenanceRelevantHistoryAgentTypeCoding datatype record.
#
# + system - The identification of the code system that defines the meaning of the symbol in the code.
# + code - A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
@r5:DataTypeDefinition {
    name: "ProvenanceRelevantHistoryAgentTypeCoding",
    baseType: (),
    elements: {
        "system": {
            name: "system",
            dataType: r5:uri,
            min: 1,
            max: 1,
            isArray: false,
            description: "The identification of the code system that defines the meaning of the symbol in the code.",
            path: "Provenance.agent.type.coding.system"
        },
        "code": {
            name: "code",
            dataType: r5:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
            path: "Provenance.agent.type.coding.code"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ProvenanceRelevantHistoryAgentTypeCoding record {|
    *r5:Coding;

    r5:uri system = "http://terminology.hl7.org/CodeSystem/v3-ParticipationType";
    r5:code code = "AUT";
|};

# FHIR ProvenanceRelevantHistoryAgentType datatype record.
#
# + coding - A reference to a code defined by a terminology system.
@r5:DataTypeDefinition {
    name: "ProvenanceRelevantHistoryAgentType",
    baseType: (),
    elements: {
        "coding": {
            name: "coding",
            dataType: ProvenanceRelevantHistoryAgentTypeCoding,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A reference to a code defined by a terminology system.",
            path: "Provenance.agent.type.coding"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ProvenanceRelevantHistoryAgentType record {|
    *r5:CodeableConcept;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.Provenance.agent.type.coding constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.Provenance.agent.type.coding constraint. This field must be an array containing at most one item."
        }
    }
    ProvenanceRelevantHistoryAgentTypeCoding[] coding;
|};

# FHIR ProvenanceRelevantHistoryAgent datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + onBehalfOf - The agent that delegated authority to perform the activity performed by the agent.who element.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The Functional Role of the agent with respect to the activity.
# + who - Indicates who or what performed in the event.
@r5:DataTypeDefinition {
    name: "ProvenanceRelevantHistoryAgent",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Provenance.agent.extension"
        },
        "role": {
            name: "role",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.",
            path: "Provenance.agent.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Provenance.agent.modifierExtension"
        },
        "onBehalfOf": {
            name: "onBehalfOf",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The agent that delegated authority to perform the activity performed by the agent.who element.",
            path: "Provenance.agent.onBehalfOf"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Provenance.agent.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "The Functional Role of the agent with respect to the activity.",
            path: "Provenance.agent.type"
        },
        "who": {
            name: "who",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Indicates who or what performed in the event.",
            path: "Provenance.agent.who"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ProvenanceRelevantHistoryAgent record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:CodeableConcept[] role?;
    r5:Extension[] modifierExtension?;
    r5:Reference onBehalfOf?;
    string id?;
    r5:CodeableConcept 'type;
    r5:Reference who;
|};

# FHIR ProvenanceRelevantHistoryAgentAuthor datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + onBehalfOf - The agent that delegated authority to perform the activity performed by the agent.who element.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The Functional Role of the agent with respect to the activity.
# + who - Author Reference.
@r5:DataTypeDefinition {
    name: "ProvenanceRelevantHistoryAgentAuthor",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "Provenance.agent.extension"
        },
        "role": {
            name: "role",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.",
            path: "Provenance.agent.role"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "Provenance.agent.modifierExtension"
        },
        "onBehalfOf": {
            name: "onBehalfOf",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "The agent that delegated authority to perform the activity performed by the agent.who element.",
            path: "Provenance.agent.onBehalfOf"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "Provenance.agent.id"
        },
        "type": {
            name: "type",
            dataType: ProvenanceRelevantHistoryAgentType,
            min: 1,
            max: 1,
            isArray: false,
            description: "The Functional Role of the agent with respect to the activity.",
            path: "Provenance.agent.type"
        },
        "who": {
            name: "who",
            dataType: r5:Reference,
            min: 1,
            max: 1,
            isArray: false,
            description: "Author Reference.",
            path: "Provenance.agent.who"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type ProvenanceRelevantHistoryAgentAuthor record {|
    *ProvenanceRelevantHistoryAgent;

    r5:Extension[] extension?;
    r5:CodeableConcept[] role?;
    r5:Extension[] modifierExtension?;
    r5:Reference onBehalfOf?;
    string id?;
    ProvenanceRelevantHistoryAgentType 'type;
    r5:Reference who;
|};

# ProvenanceRelevantHistoryEntityRole enum
public enum ProvenanceRelevantHistoryEntityRole {
   CODE_ROLE_INSTANTIATES = "instantiates",
   CODE_ROLE_REMOVAL = "removal",
   CODE_ROLE_SOURCE = "source",
   CODE_ROLE_QUOTATION = "quotation",
   CODE_ROLE_REVISION = "revision"
}

