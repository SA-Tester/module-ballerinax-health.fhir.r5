// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_SUBSTANCEDEFINITION = "http://hl7.org/fhir/StructureDefinition/SubstanceDefinition";
public const RESOURCE_NAME_SUBSTANCEDEFINITION = "SubstanceDefinition";

# FHIR SubstanceDefinition resource record.
#
# + resourceType - The type of the resource describes
# + polymer - Data items specific to polymers.
# + note - Textual comment about the substance's catalogue or registry record.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Codes associated with the substance.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Textual description of the substance.
# + language - The base language in which the resource is written.
# + moiety - Moiety, for structural modifications.
# + manufacturer - The entity that creates, makes, produces or fabricates the substance. This is a set of potential manufacturers but is not necessarily comprehensive.
# + informationSource - Supporting literature.
# + protein - Data items specific to proteins.
# + supplier - An entity that is the source for the substance. It may be different from the manufacturer. Supplier is synonymous to a distributor.
# + property - General specifications for this substance.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + relationship - A link between this substance and another, with details of the relationship.
# + identifier - Identifier by which this substance is known.
# + referenceInformation - General information detailing this substance.
# + molecularWeight - The average mass of a molecule of a compound compared to 1/12 the mass of carbon 12 and calculated as the sum of the atomic weights of the constituent atoms.
# + classification - A high level categorization, e.g. polymer or nucleic acid, or food, chemical, biological, or a lower level such as the general types of polymer (linear or branch chain) or type of impurity (process related or contaminant).
# + 'version - A business level version identifier of the substance.
# + structure - Structural information.
# + sourceMaterial - Material or taxonomic/anatomical source for the substance.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + nucleicAcid - Data items specific to nucleic acids.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + domain - If the substance applies to human or veterinary use.
# + grade - The quality standard, established benchmark, to which substance complies (e.g. USP/NF, Ph. Eur, JP, BP, Company Standard).
# + name - Names applicable to this substance.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + characterization - General specifications for this substance.
# + status - Status of substance within the catalogue e.g. active, retired.
@r5:ResourceDefinition {
    resourceType: "SubstanceDefinition",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/SubstanceDefinition",
    elements: {
        "polymer" : {
            name: "polymer",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.polymer"
        },
        "note" : {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.note"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.extension"
        },
        "code" : {
            name: "code",
            dataType: SubstanceDefinitionCode,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.code"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.modifierExtension"
        },
        "description" : {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.description"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "moiety" : {
            name: "moiety",
            dataType: SubstanceDefinitionMoiety,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.moiety"
        },
        "manufacturer" : {
            name: "manufacturer",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.manufacturer"
        },
        "informationSource" : {
            name: "informationSource",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.informationSource"
        },
        "protein" : {
            name: "protein",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.protein"
        },
        "supplier" : {
            name: "supplier",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.supplier"
        },
        "property" : {
            name: "property",
            dataType: SubstanceDefinitionProperty,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.property"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.text"
        },
        "relationship" : {
            name: "relationship",
            dataType: SubstanceDefinitionRelationship,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.relationship"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.identifier"
        },
        "referenceInformation" : {
            name: "referenceInformation",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.referenceInformation"
        },
        "molecularWeight" : {
            name: "molecularWeight",
            dataType: SubstanceDefinitionMolecularWeight,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.molecularWeight"
        },
        "classification" : {
            name: "classification",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.classification"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.version"
        },
        "structure" : {
            name: "structure",
            dataType: SubstanceDefinitionStructure,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.structure"
        },
        "sourceMaterial" : {
            name: "sourceMaterial",
            dataType: SubstanceDefinitionSourceMaterial,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.sourceMaterial"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.contained"
        },
        "nucleicAcid" : {
            name: "nucleicAcid",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.nucleicAcid"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.meta"
        },
        "domain" : {
            name: "domain",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.domain",
            valueSet: "http://hl7.org/fhir/ValueSet/medicinal-product-domain"
        },
        "grade" : {
            name: "grade",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.grade",
            valueSet: "http://hl7.org/fhir/ValueSet/substance-grade"
        },
        "name" : {
            name: "name",
            dataType: SubstanceDefinitionName,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.name"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.implicitRules"
        },
        "characterization" : {
            name: "characterization",
            dataType: SubstanceDefinitionCharacterization,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstanceDefinition.characterization"
        },
        "status" : {
            name: "status",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstanceDefinition.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type SubstanceDefinition record {|
    *r5:DomainResource;

    RESOURCE_NAME_SUBSTANCEDEFINITION resourceType = RESOURCE_NAME_SUBSTANCEDEFINITION;

    r5:Reference polymer?;
    r5:Annotation[] note?;
    r5:Extension[] extension?;
    SubstanceDefinitionCode[] code?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    r5:code language?;
    SubstanceDefinitionMoiety[] moiety?;
    r5:Reference[] manufacturer?;
    r5:Reference[] informationSource?;
    r5:Reference protein?;
    r5:Reference[] supplier?;
    SubstanceDefinitionProperty[] property?;
    string id?;
    r5:Narrative text?;
    SubstanceDefinitionRelationship[] relationship?;
    r5:Identifier[] identifier?;
    r5:Reference referenceInformation?;
    SubstanceDefinitionMolecularWeight[] molecularWeight?;
    r5:CodeableConcept[] classification?;
    string 'version?;
    SubstanceDefinitionStructure structure?;
    SubstanceDefinitionSourceMaterial sourceMaterial?;
    r5:Resource[] contained?;
    r5:Reference nucleicAcid?;
    r5:Meta meta?;
    r5:CodeableConcept domain?;
    r5:CodeableConcept[] grade?;
    SubstanceDefinitionName[] name?;
    r5:uri implicitRules?;
    SubstanceDefinitionCharacterization[] characterization?;
    r5:CodeableConcept status?;
    r5:Element ...;
|};

# FHIR SubstanceDefinitionProperty datatype record.
#
# + valueCodeableConcept - A value for the property.
# + valueBoolean - A value for the property.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + valueAttachment - A value for the property.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + valueDate - A value for the property.
# + 'type - A code expressing the type of property.
# + valueQuantity - A value for the property.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionProperty",
    baseType: (),
    elements: {
        "valueCodeableConcept": {
            name: "valueCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the property.",
            path: "SubstanceDefinition.property.value[x]"
        },
        "valueBoolean": {
            name: "valueBoolean",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the property.",
            path: "SubstanceDefinition.property.value[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.property.extension"
        },
        "valueAttachment": {
            name: "valueAttachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the property.",
            path: "SubstanceDefinition.property.value[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.property.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.property.id"
        },
        "valueDate": {
            name: "valueDate",
            dataType: r5:date,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the property.",
            path: "SubstanceDefinition.property.value[x]"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "A code expressing the type of property.",
            path: "SubstanceDefinition.property.type"
        },
        "valueQuantity": {
            name: "valueQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "A value for the property.",
            path: "SubstanceDefinition.property.value[x]"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionProperty record {|
    *r5:BackboneElement;

    r5:CodeableConcept valueCodeableConcept?;
    boolean valueBoolean?;
    r5:Extension[] extension?;
    r5:Attachment valueAttachment?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:date valueDate?;
    r5:CodeableConcept 'type;
    r5:Quantity valueQuantity?;
|};

# FHIR SubstanceDefinitionStructure datatype record.
#
# + sourceDocument - The source of information about the structure.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + opticalActivity - Optical activity type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + molecularFormula - An expression which states the number and type of atoms present in a molecule of a substance.
# + molecularFormulaByMoiety - Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.
# + stereochemistry - Stereochemistry type.
# + technique - The method used to elucidate the structure of the drug substance. Examples: X-ray, NMR, Peptide mapping, Ligand binding assay.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + representation - A depiction of the structure of the substance.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionStructure",
    baseType: (),
    elements: {
        "sourceDocument": {
            name: "sourceDocument",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The source of information about the structure.",
            path: "SubstanceDefinition.structure.sourceDocument"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.structure.extension"
        },
        "opticalActivity": {
            name: "opticalActivity",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Optical activity type.",
            path: "SubstanceDefinition.structure.opticalActivity"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.structure.modifierExtension"
        },
        "molecularFormula": {
            name: "molecularFormula",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "An expression which states the number and type of atoms present in a molecule of a substance.",
            path: "SubstanceDefinition.structure.molecularFormula"
        },
        "molecularFormulaByMoiety": {
            name: "molecularFormulaByMoiety",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.",
            path: "SubstanceDefinition.structure.molecularFormulaByMoiety"
        },
        "stereochemistry": {
            name: "stereochemistry",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Stereochemistry type.",
            path: "SubstanceDefinition.structure.stereochemistry"
        },
        "technique": {
            name: "technique",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The method used to elucidate the structure of the drug substance. Examples: X-ray, NMR, Peptide mapping, Ligand binding assay.",
            path: "SubstanceDefinition.structure.technique"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.structure.id"
        },
        "representation": {
            name: "representation",
            dataType: SubstanceDefinitionStructureRepresentation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A depiction of the structure of the substance.",
            path: "SubstanceDefinition.structure.representation"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionStructure record {|
    *r5:BackboneElement;

    r5:Reference[] sourceDocument?;
    r5:Extension[] extension?;
    r5:CodeableConcept opticalActivity?;
    r5:Extension[] modifierExtension?;
    string molecularFormula?;
    string molecularFormulaByMoiety?;
    r5:CodeableConcept stereochemistry?;
    r5:CodeableConcept[] technique?;
    string id?;
    SubstanceDefinitionStructureRepresentation[] representation?;
|};

# FHIR SubstanceDefinitionCharacterization datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + file - The data produced by the analytical instrument or a pictorial representation of that data. Examples: a JCAMP, JDX, or ADX file, or a chromatogram or spectrum analysis.
# + form - Describes the nature of the chemical entity and explains, for instance, whether this is a base or a salt form.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - The description or justification in support of the interpretation of the data file.
# + technique - The method used to elucidate the characterization of the drug substance. Example: HPLC.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionCharacterization",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.characterization.extension"
        },
        "file": {
            name: "file",
            dataType: r5:Attachment,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The data produced by the analytical instrument or a pictorial representation of that data. Examples: a JCAMP, JDX, or ADX file, or a chromatogram or spectrum analysis.",
            path: "SubstanceDefinition.characterization.file"
        },
        "form": {
            name: "form",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Describes the nature of the chemical entity and explains, for instance, whether this is a base or a salt form.",
            path: "SubstanceDefinition.characterization.form"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.characterization.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "The description or justification in support of the interpretation of the data file.",
            path: "SubstanceDefinition.characterization.description"
        },
        "technique": {
            name: "technique",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The method used to elucidate the characterization of the drug substance. Example: HPLC.",
            path: "SubstanceDefinition.characterization.technique"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.characterization.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionCharacterization record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Attachment[] file?;
    r5:CodeableConcept form?;
    r5:Extension[] modifierExtension?;
    r5:markdown description?;
    r5:CodeableConcept technique?;
    string id?;
|};

# FHIR SubstanceDefinitionSourceMaterial datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + genus - The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name.
# + species - The species of an organism, typically referring to the Latin epithet of the species of the plant/animal.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + part - An anatomical origin of the source material within an organism.
# + countryOfOrigin - The country or countries where the material is harvested.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionSourceMaterial",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.sourceMaterial.extension"
        },
        "genus": {
            name: "genus",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name.",
            path: "SubstanceDefinition.sourceMaterial.genus"
        },
        "species": {
            name: "species",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The species of an organism, typically referring to the Latin epithet of the species of the plant/animal.",
            path: "SubstanceDefinition.sourceMaterial.species"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.sourceMaterial.modifierExtension"
        },
        "part": {
            name: "part",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "An anatomical origin of the source material within an organism.",
            path: "SubstanceDefinition.sourceMaterial.part"
        },
        "countryOfOrigin": {
            name: "countryOfOrigin",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The country or countries where the material is harvested.",
            path: "SubstanceDefinition.sourceMaterial.countryOfOrigin"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.sourceMaterial.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type.",
            path: "SubstanceDefinition.sourceMaterial.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionSourceMaterial record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:CodeableConcept genus?;
    r5:CodeableConcept species?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept part?;
    r5:CodeableConcept[] countryOfOrigin?;
    string id?;
    r5:CodeableConcept 'type?;
|};

# FHIR SubstanceDefinitionName datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + domain - The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.
# + jurisdiction - The jurisdiction where this name applies.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - The actual name.
# + official - Details of the official nature of this name.
# + language - Human language that the name is written in.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - Supporting literature.
# + 'type - Name type, for example 'systematic', 'scientific, 'brand'.
# + preferred - If this is the preferred name for this substance.
# + status - The status of the name, for example 'current', 'proposed'.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionName",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.name.extension"
        },
        "domain": {
            name: "domain",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.",
            path: "SubstanceDefinition.name.domain"
        },
        "jurisdiction": {
            name: "jurisdiction",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The jurisdiction where this name applies.",
            path: "SubstanceDefinition.name.jurisdiction"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.name.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "The actual name.",
            path: "SubstanceDefinition.name.name"
        },
        "official": {
            name: "official",
            dataType: SubstanceDefinitionNameOfficial,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Details of the official nature of this name.",
            path: "SubstanceDefinition.name.official"
        },
        "language": {
            name: "language",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Human language that the name is written in.",
            path: "SubstanceDefinition.name.language"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.name.id"
        },
        "source": {
            name: "source",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Supporting literature.",
            path: "SubstanceDefinition.name.source"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Name type, for example 'systematic', 'scientific, 'brand'.",
            path: "SubstanceDefinition.name.type"
        },
        "preferred": {
            name: "preferred",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If this is the preferred name for this substance.",
            path: "SubstanceDefinition.name.preferred"
        },
        "status": {
            name: "status",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The status of the name, for example 'current', 'proposed'.",
            path: "SubstanceDefinition.name.status"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionName record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:CodeableConcept[] domain?;
    r5:CodeableConcept[] jurisdiction?;
    r5:Extension[] modifierExtension?;
    string name;
    SubstanceDefinitionNameOfficial[] official?;
    r5:CodeableConcept[] language?;
    string id?;
    r5:Reference[] 'source?;
    r5:CodeableConcept 'type?;
    boolean preferred?;
    r5:CodeableConcept status?;
|};

# FHIR SubstanceDefinitionCode datatype record.
#
# + statusDate - The date at which the code status was changed as part of the terminology maintenance.
# + note - Any comment can be provided in this field, if necessary.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - The specific code.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'source - Supporting literature.
# + status - Status of the code assignment, for example 'provisional', 'approved'.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionCode",
    baseType: (),
    elements: {
        "statusDate": {
            name: "statusDate",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "The date at which the code status was changed as part of the terminology maintenance.",
            path: "SubstanceDefinition.code.statusDate"
        },
        "note": {
            name: "note",
            dataType: r5:Annotation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Any comment can be provided in this field, if necessary.",
            path: "SubstanceDefinition.code.note"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.code.extension"
        },
        "code": {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The specific code.",
            path: "SubstanceDefinition.code.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.code.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.code.id"
        },
        "source": {
            name: "source",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Supporting literature.",
            path: "SubstanceDefinition.code.source"
        },
        "status": {
            name: "status",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Status of the code assignment, for example 'provisional', 'approved'.",
            path: "SubstanceDefinition.code.status"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionCode record {|
    *r5:BackboneElement;

    r5:dateTime statusDate?;
    r5:Annotation[] note?;
    r5:Extension[] extension?;
    r5:CodeableConcept code?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:Reference[] 'source?;
    r5:CodeableConcept status?;
|};

# FHIR SubstanceDefinitionStructureRepresentation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + document - An attached file with the structural representation e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + format - The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The kind of structural representation (e.g. full, partial).
# + representation - The structural representation as a text string in a standard format.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionStructureRepresentation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.structure.representation.extension"
        },
        "document": {
            name: "document",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "An attached file with the structural representation e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file.",
            path: "SubstanceDefinition.structure.representation.document"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.structure.representation.modifierExtension"
        },
        "format": {
            name: "format",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document.",
            path: "SubstanceDefinition.structure.representation.format"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.structure.representation.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The kind of structural representation (e.g. full, partial).",
            path: "SubstanceDefinition.structure.representation.type"
        },
        "representation": {
            name: "representation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The structural representation as a text string in a standard format.",
            path: "SubstanceDefinition.structure.representation.representation"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionStructureRepresentation record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Reference document?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept format?;
    string id?;
    r5:CodeableConcept 'type?;
    string representation?;
|};

# FHIR SubstanceDefinitionNameOfficial datatype record.
#
# + date - Date of the official name change.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + authority - Which authority uses this official name.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + status - The status of the official name, for example 'draft', 'active', 'retired'.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionNameOfficial",
    baseType: (),
    elements: {
        "date": {
            name: "date",
            dataType: r5:dateTime,
            min: 0,
            max: 1,
            isArray: false,
            description: "Date of the official name change.",
            path: "SubstanceDefinition.name.official.date"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.name.official.extension"
        },
        "authority": {
            name: "authority",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Which authority uses this official name.",
            path: "SubstanceDefinition.name.official.authority"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.name.official.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.name.official.id"
        },
        "status": {
            name: "status",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The status of the official name, for example 'draft', 'active', 'retired'.",
            path: "SubstanceDefinition.name.official.status"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionNameOfficial record {|
    *r5:BackboneElement;

    r5:dateTime date?;
    r5:Extension[] extension?;
    r5:CodeableConcept authority?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept status?;
|};

# FHIR SubstanceDefinitionMoiety datatype record.
#
# + amountQuantity - Quantitative value for this moiety.
# + identifier - Identifier by which this moiety substance is known.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + role - Role that the moiety is playing.
# + amountString - Quantitative value for this moiety.
# + opticalActivity - Optical activity type.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + molecularFormula - Molecular formula for this moiety of this substance, typically using the Hill system.
# + measurementType - The measurement type of the quantitative value. In capturing the actual relative amounts of substances or molecular fragments it may be necessary to indicate whether the amount refers to, for example, a mole ratio or weight ratio.
# + name - Textual name for this moiety substance.
# + stereochemistry - Stereochemistry type.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionMoiety",
    baseType: (),
    elements: {
        "amountQuantity": {
            name: "amountQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "Quantitative value for this moiety.",
            path: "SubstanceDefinition.moiety.amount[x]"
        },
        "identifier": {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            description: "Identifier by which this moiety substance is known.",
            path: "SubstanceDefinition.moiety.identifier"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.moiety.extension"
        },
        "role": {
            name: "role",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Role that the moiety is playing.",
            path: "SubstanceDefinition.moiety.role"
        },
        "amountString": {
            name: "amountString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Quantitative value for this moiety.",
            path: "SubstanceDefinition.moiety.amount[x]"
        },
        "opticalActivity": {
            name: "opticalActivity",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Optical activity type.",
            path: "SubstanceDefinition.moiety.opticalActivity"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.moiety.modifierExtension"
        },
        "molecularFormula": {
            name: "molecularFormula",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Molecular formula for this moiety of this substance, typically using the Hill system.",
            path: "SubstanceDefinition.moiety.molecularFormula"
        },
        "measurementType": {
            name: "measurementType",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The measurement type of the quantitative value. In capturing the actual relative amounts of substances or molecular fragments it may be necessary to indicate whether the amount refers to, for example, a mole ratio or weight ratio.",
            path: "SubstanceDefinition.moiety.measurementType"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Textual name for this moiety substance.",
            path: "SubstanceDefinition.moiety.name"
        },
        "stereochemistry": {
            name: "stereochemistry",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Stereochemistry type.",
            path: "SubstanceDefinition.moiety.stereochemistry"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.moiety.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionMoiety record {|
    *r5:BackboneElement;

    r5:Quantity amountQuantity?;
    r5:Identifier identifier?;
    r5:Extension[] extension?;
    r5:CodeableConcept role?;
    string amountString?;
    r5:CodeableConcept opticalActivity?;
    r5:Extension[] modifierExtension?;
    string molecularFormula?;
    r5:CodeableConcept measurementType?;
    string name?;
    r5:CodeableConcept stereochemistry?;
    string id?;
|};

# FHIR SubstanceDefinitionMolecularWeight datatype record.
#
# + amount - Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + method - The method by which the molecular weight was determined.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - Type of molecular weight such as exact, average (also known as. number average), weight average.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionMolecularWeight",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: r5:Quantity,
            min: 1,
            max: 1,
            isArray: false,
            description: "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.",
            path: "SubstanceDefinition.molecularWeight.amount"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.molecularWeight.extension"
        },
        "method": {
            name: "method",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The method by which the molecular weight was determined.",
            path: "SubstanceDefinition.molecularWeight.method"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.molecularWeight.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.molecularWeight.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Type of molecular weight such as exact, average (also known as. number average), weight average.",
            path: "SubstanceDefinition.molecularWeight.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionMolecularWeight record {|
    *r5:BackboneElement;

    r5:Quantity amount;
    r5:Extension[] extension?;
    r5:CodeableConcept method?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept 'type?;
|};

# FHIR SubstanceDefinitionRelationship datatype record.
#
# + amountRatio - A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + substanceDefinitionCodeableConcept - A pointer to another substance, as a resource or just a representational code.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + substanceDefinitionReference - A pointer to another substance, as a resource or just a representational code.
# + 'source - Supporting literature.
# + 'type - For example 'salt to parent', 'active moiety', 'starting material', 'polymorph', 'impurity of'.
# + ratioHighLimitAmount - For use when the numeric has an uncertain range.
# + isDefining - For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.
# + amountQuantity - A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
# + comparator - An operator for the amount, for example 'average', 'approximately', 'less than'.
# + amountString - A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "SubstanceDefinitionRelationship",
    baseType: (),
    elements: {
        "amountRatio": {
            name: "amountRatio",
            dataType: r5:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.",
            path: "SubstanceDefinition.relationship.amount[x]"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstanceDefinition.relationship.extension"
        },
        "substanceDefinitionCodeableConcept": {
            name: "substanceDefinitionCodeableConcept",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "A pointer to another substance, as a resource or just a representational code.",
            path: "SubstanceDefinition.relationship.substanceDefinition[x]"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstanceDefinition.relationship.modifierExtension"
        },
        "substanceDefinitionReference": {
            name: "substanceDefinitionReference",
            dataType: r5:Reference,
            min: 0,
            max: 1,
            isArray: false,
            description: "A pointer to another substance, as a resource or just a representational code.",
            path: "SubstanceDefinition.relationship.substanceDefinition[x]"
        },
        "source": {
            name: "source",
            dataType: r5:Reference,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Supporting literature.",
            path: "SubstanceDefinition.relationship.source"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 1,
            max: 1,
            isArray: false,
            description: "For example 'salt to parent', 'active moiety', 'starting material', 'polymorph', 'impurity of'.",
            path: "SubstanceDefinition.relationship.type"
        },
        "ratioHighLimitAmount": {
            name: "ratioHighLimitAmount",
            dataType: r5:Ratio,
            min: 0,
            max: 1,
            isArray: false,
            description: "For use when the numeric has an uncertain range.",
            path: "SubstanceDefinition.relationship.ratioHighLimitAmount"
        },
        "isDefining": {
            name: "isDefining",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.",
            path: "SubstanceDefinition.relationship.isDefining"
        },
        "amountQuantity": {
            name: "amountQuantity",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.",
            path: "SubstanceDefinition.relationship.amount[x]"
        },
        "comparator": {
            name: "comparator",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "An operator for the amount, for example 'average', 'approximately', 'less than'.",
            path: "SubstanceDefinition.relationship.comparator"
        },
        "amountString": {
            name: "amountString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other.",
            path: "SubstanceDefinition.relationship.amount[x]"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstanceDefinition.relationship.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstanceDefinitionRelationship record {|
    *r5:BackboneElement;

    r5:Ratio amountRatio?;
    r5:Extension[] extension?;
    r5:CodeableConcept substanceDefinitionCodeableConcept?;
    r5:Extension[] modifierExtension?;
    r5:Reference substanceDefinitionReference?;
    r5:Reference[] 'source?;
    r5:CodeableConcept 'type;
    r5:Ratio ratioHighLimitAmount?;
    boolean isDefining?;
    r5:Quantity amountQuantity?;
    r5:CodeableConcept comparator?;
    string amountString?;
    string id?;
|};

