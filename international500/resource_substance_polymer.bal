// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_SUBSTANCEPOLYMER = "http://hl7.org/fhir/StructureDefinition/SubstancePolymer";
public const RESOURCE_NAME_SUBSTANCEPOLYMER = "SubstancePolymer";

# FHIR SubstancePolymer resource record.
#
# + resourceType - The type of the resource describes
# + identifier - A business idenfier for this polymer, but typically this is handled by a SubstanceDefinition identifier.
# + monomerSet - Todo.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + language - The base language in which the resource is written.
# + modification - Todo - this is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + copolymerConnectivity - Descrtibes the copolymer sequence type (polymer connectivity).
# + repeat - Specifies and quantifies the repeated units and their configuration.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + geometry - Polymer geometry, e.g. linear, branched, cross-linked, network or dendritic.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + 'class - Overall type of the polymer.
@r5:ResourceDefinition {
    resourceType: "SubstancePolymer",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/SubstancePolymer",
    elements: {
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.identifier"
        },
        "monomerSet" : {
            name: "monomerSet",
            dataType: SubstancePolymerMonomerSet,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.monomerSet"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.extension"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.modifierExtension"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "modification" : {
            name: "modification",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.modification"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.contained"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.meta"
        },
        "copolymerConnectivity" : {
            name: "copolymerConnectivity",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.copolymerConnectivity"
        },
        "repeat" : {
            name: "repeat",
            dataType: SubstancePolymerRepeat,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "SubstancePolymer.repeat"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.implicitRules"
        },
        "geometry" : {
            name: "geometry",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.geometry"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.text"
        },
        "class" : {
            name: "class",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            path: "SubstancePolymer.class"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type SubstancePolymer record {|
    *r5:DomainResource;

    RESOURCE_NAME_SUBSTANCEPOLYMER resourceType = RESOURCE_NAME_SUBSTANCEPOLYMER;

    r5:Identifier identifier?;
    SubstancePolymerMonomerSet[] monomerSet?;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:code language?;
    string modification?;
    r5:Resource[] contained?;
    r5:Meta meta?;
    r5:CodeableConcept[] copolymerConnectivity?;
    SubstancePolymerRepeat[] repeat?;
    r5:uri implicitRules?;
    r5:CodeableConcept geometry?;
    string id?;
    r5:Narrative text?;
    r5:CodeableConcept 'class?;
    r5:Element ...;
|};

# FHIR SubstancePolymerRepeat datatype record.
#
# + repeatUnit - An SRU - Structural Repeat Unit.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + repeatUnitAmountType - How the quantitative amount of Structural Repeat Units is captured (e.g. Exact, Numeric, Average).
# + averageMolecularFormula - A representation of an (average) molecular formula from a polymer.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "SubstancePolymerRepeat",
    baseType: (),
    elements: {
        "repeatUnit": {
            name: "repeatUnit",
            dataType: SubstancePolymerRepeatRepeatUnit,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "An SRU - Structural Repeat Unit.",
            path: "SubstancePolymer.repeat.repeatUnit"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.repeat.extension"
        },
        "repeatUnitAmountType": {
            name: "repeatUnitAmountType",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "How the quantitative amount of Structural Repeat Units is captured (e.g. Exact, Numeric, Average).",
            path: "SubstancePolymer.repeat.repeatUnitAmountType"
        },
        "averageMolecularFormula": {
            name: "averageMolecularFormula",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "A representation of an (average) molecular formula from a polymer.",
            path: "SubstancePolymer.repeat.averageMolecularFormula"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.repeat.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.repeat.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerRepeat record {|
    *r5:BackboneElement;

    SubstancePolymerRepeatRepeatUnit[] repeatUnit?;
    r5:Extension[] extension?;
    r5:CodeableConcept repeatUnitAmountType?;
    string averageMolecularFormula?;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR SubstancePolymerMonomerSetStartingMaterial datatype record.
#
# + amount - A percentage.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - The type of substance for this starting material.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + category - Substance high level category, e.g. chemical substance.
# + isDefining - Used to specify whether the attribute described is a defining element for the unique identification of the polymer.
@r5:DataTypeDefinition {
    name: "SubstancePolymerMonomerSetStartingMaterial",
    baseType: (),
    elements: {
        "amount": {
            name: "amount",
            dataType: r5:Quantity,
            min: 0,
            max: 1,
            isArray: false,
            description: "A percentage.",
            path: "SubstancePolymer.monomerSet.startingMaterial.amount"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.monomerSet.startingMaterial.extension"
        },
        "code": {
            name: "code",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of substance for this starting material.",
            path: "SubstancePolymer.monomerSet.startingMaterial.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.monomerSet.startingMaterial.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.monomerSet.startingMaterial.id"
        },
        "category": {
            name: "category",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Substance high level category, e.g. chemical substance.",
            path: "SubstancePolymer.monomerSet.startingMaterial.category"
        },
        "isDefining": {
            name: "isDefining",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Used to specify whether the attribute described is a defining element for the unique identification of the polymer.",
            path: "SubstancePolymer.monomerSet.startingMaterial.isDefining"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerMonomerSetStartingMaterial record {|
    *r5:BackboneElement;

    r5:Quantity amount?;
    r5:Extension[] extension?;
    r5:CodeableConcept code?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept category?;
    boolean isDefining?;
|};

# FHIR SubstancePolymerMonomerSet datatype record.
#
# + startingMaterial - The starting materials - monomer(s) used in the synthesis of the polymer.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + ratioType - Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer ratio, SRU/Polymer Ratio.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "SubstancePolymerMonomerSet",
    baseType: (),
    elements: {
        "startingMaterial": {
            name: "startingMaterial",
            dataType: SubstancePolymerMonomerSetStartingMaterial,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "The starting materials - monomer(s) used in the synthesis of the polymer.",
            path: "SubstancePolymer.monomerSet.startingMaterial"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.monomerSet.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.monomerSet.modifierExtension"
        },
        "ratioType": {
            name: "ratioType",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer ratio, SRU/Polymer Ratio.",
            path: "SubstancePolymer.monomerSet.ratioType"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.monomerSet.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerMonomerSet record {|
    *r5:BackboneElement;

    SubstancePolymerMonomerSetStartingMaterial[] startingMaterial?;
    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept ratioType?;
    string id?;
|};

# FHIR SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation datatype record.
#
# + average - An average amount of polymerisation.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + high - A high expected limit of the amount.
# + low - A low expected limit of the amount.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of the degree of polymerisation shall be described, e.g. SRU/Polymer Ratio.
@r5:DataTypeDefinition {
    name: "SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation",
    baseType: (),
    elements: {
        "average": {
            name: "average",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "An average amount of polymerisation.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.average"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.extension"
        },
        "high": {
            name: "high",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "A high expected limit of the amount.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.high"
        },
        "low": {
            name: "low",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "A low expected limit of the amount.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.low"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of the degree of polymerisation shall be described, e.g. SRU/Polymer Ratio.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation.type"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation record {|
    *r5:BackboneElement;

    r5:integer average?;
    r5:Extension[] extension?;
    r5:integer high?;
    r5:integer low?;
    r5:Extension[] modifierExtension?;
    string id?;
    r5:CodeableConcept 'type?;
|};

# FHIR SubstancePolymerRepeatRepeatUnit datatype record.
#
# + structuralRepresentation - A graphical structure for this SRU.
# + amount - Number of repeats of this unit.
# + degreeOfPolymerisation - Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + orientation - The orientation of the polymerisation, e.g. head-tail, head-head, random.
# + unit - Structural repeat units are essential elements for defining polymers.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "SubstancePolymerRepeatRepeatUnit",
    baseType: (),
    elements: {
        "structuralRepresentation": {
            name: "structuralRepresentation",
            dataType: SubstancePolymerRepeatRepeatUnitStructuralRepresentation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "A graphical structure for this SRU.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation"
        },
        "amount": {
            name: "amount",
            dataType: r5:integer,
            min: 0,
            max: 1,
            isArray: false,
            description: "Number of repeats of this unit.",
            path: "SubstancePolymer.repeat.repeatUnit.amount"
        },
        "degreeOfPolymerisation": {
            name: "degreeOfPolymerisation",
            dataType: SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described.",
            path: "SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.repeat.repeatUnit.extension"
        },
        "orientation": {
            name: "orientation",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The orientation of the polymerisation, e.g. head-tail, head-head, random.",
            path: "SubstancePolymer.repeat.repeatUnit.orientation"
        },
        "unit": {
            name: "unit",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Structural repeat units are essential elements for defining polymers.",
            path: "SubstancePolymer.repeat.repeatUnit.unit"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.repeat.repeatUnit.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.repeat.repeatUnit.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerRepeatRepeatUnit record {|
    *r5:BackboneElement;

    SubstancePolymerRepeatRepeatUnitStructuralRepresentation[] structuralRepresentation?;
    r5:integer amount?;
    SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation[] degreeOfPolymerisation?;
    r5:Extension[] extension?;
    r5:CodeableConcept orientation?;
    string unit?;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR SubstancePolymerRepeatRepeatUnitStructuralRepresentation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + attachment - An attached file with the structural representation.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + format - The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'type - The type of structure (e.g. Full, Partial, Representative).
# + representation - The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.
@r5:DataTypeDefinition {
    name: "SubstancePolymerRepeatRepeatUnitStructuralRepresentation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.extension"
        },
        "attachment": {
            name: "attachment",
            dataType: r5:Attachment,
            min: 0,
            max: 1,
            isArray: false,
            description: "An attached file with the structural representation.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.attachment"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.modifierExtension"
        },
        "format": {
            name: "format",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.format"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.id"
        },
        "type": {
            name: "type",
            dataType: r5:CodeableConcept,
            min: 0,
            max: 1,
            isArray: false,
            description: "The type of structure (e.g. Full, Partial, Representative).",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.type"
        },
        "representation": {
            name: "representation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.",
            path: "SubstancePolymer.repeat.repeatUnit.structuralRepresentation.representation"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type SubstancePolymerRepeatRepeatUnitStructuralRepresentation record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Attachment attachment?;
    r5:Extension[] modifierExtension?;
    r5:CodeableConcept format?;
    string id?;
    r5:CodeableConcept 'type?;
    string representation?;
|};

