// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/constraint;
import ballerinax/health.fhir.r5;

public const string PROFILE_BASE_TERMINOLOGYCAPABILITIES = "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities";
public const RESOURCE_NAME_TERMINOLOGYCAPABILITIES = "TerminologyCapabilities";

# FHIR TerminologyCapabilities resource record.
#
# + resourceType - The type of the resource describes
# + date - The date (and optionally time) when the terminology capabilities was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the terminology capabilities changes.
# + copyright - A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.
# + extension - May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + software - Software that is covered by this terminology capability statement. It is used when the statement describes the capabilities of a particular software version, independent of an installation.
# + purpose - Explanation of why this terminology capabilities is needed and why it has been designed as it has.
# + jurisdiction - A legal or geographic region in which the terminology capabilities is intended to be used.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + codeSearch - The degree to which the server supports the code search parameter on ValueSet, if it is supported.
# + description - A free text natural language description of the terminology capabilities from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.
# + validateCode - Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.
# + experimental - A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
# + language - The base language in which the resource is written.
# + title - A short, descriptive, user-friendly title for the terminology capabilities.
# + versionAlgorithmString - Indicates the mechanism used to compare versions to determine which is more current.
# + contact - Contact details to assist a user in finding and communicating with the publisher.
# + id - The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
# + text - A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it 'clinically safe' for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
# + closure - Whether the $closure operation is supported.
# + identifier - A formal identifier that is used to identify this terminology capabilities when it is represented in other formats, or referenced in a specification, model, design or an instance.
# + codeSystem - Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.
# + versionAlgorithmCoding - Indicates the mechanism used to compare versions to determine which is more current.
# + kind - The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).
# + implementation - Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.
# + lockedDate - Whether the server supports lockedDate.
# + 'version - The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
# + url - An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers.
# + expansion - Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.
# + contained - These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.
# + copyrightLabel - A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').
# + meta - The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
# + name - A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation.
# + translation - Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.
# + implicitRules - A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
# + publisher - The name of the organization or individual responsible for the release and ongoing maintenance of the terminology capabilities.
# + useContext - The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances.
# + status - The status of this terminology capabilities. Enables tracking the life-cycle of the content.
@r5:ResourceDefinition {
    resourceType: "TerminologyCapabilities",
    baseType: r5:DomainResource,
    profile: "http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities",
    elements: {
        "date" : {
            name: "date",
            dataType: r5:dateTime,
            min: 1,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.date"
        },
        "copyright" : {
            name: "copyright",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.copyright"
        },
        "extension" : {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TerminologyCapabilities.extension"
        },
        "software" : {
            name: "software",
            dataType: TerminologyCapabilitiesSoftware,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.software"
        },
        "purpose" : {
            name: "purpose",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.purpose"
        },
        "jurisdiction" : {
            name: "jurisdiction",
            dataType: r5:CodeableConcept,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TerminologyCapabilities.jurisdiction",
            valueSet: "http://hl7.org/fhir/ValueSet/jurisdiction"
        },
        "modifierExtension" : {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TerminologyCapabilities.modifierExtension"
        },
        "codeSearch" : {
            name: "codeSearch",
            dataType: TerminologyCapabilitiesCodeSearch,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.codeSearch",
            valueSet: "http://hl7.org/fhir/ValueSet/code-search-support|5.0.0"
        },
        "description" : {
            name: "description",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.description"
        },
        "validateCode" : {
            name: "validateCode",
            dataType: TerminologyCapabilitiesValidateCode,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.validateCode"
        },
        "experimental" : {
            name: "experimental",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.experimental"
        },
        "language" : {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.language",
            valueSet: "http://hl7.org/fhir/ValueSet/all-languages|5.0.0"
        },
        "title" : {
            name: "title",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.title"
        },
        "versionAlgorithmString" : {
            name: "versionAlgorithmString",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.versionAlgorithm[x]",
            valueSet: "http://hl7.org/fhir/ValueSet/version-algorithm"
        },
        "contact" : {
            name: "contact",
            dataType: r5:ContactDetail,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TerminologyCapabilities.contact"
        },
        "id" : {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.id"
        },
        "text" : {
            name: "text",
            dataType: r5:Narrative,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.text"
        },
        "closure" : {
            name: "closure",
            dataType: TerminologyCapabilitiesClosure,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.closure"
        },
        "identifier" : {
            name: "identifier",
            dataType: r5:Identifier,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TerminologyCapabilities.identifier"
        },
        "codeSystem" : {
            name: "codeSystem",
            dataType: TerminologyCapabilitiesCodeSystem,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TerminologyCapabilities.codeSystem"
        },
        "versionAlgorithmCoding" : {
            name: "versionAlgorithmCoding",
            dataType: r5:Coding,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.versionAlgorithm[x]",
            valueSet: "http://hl7.org/fhir/ValueSet/version-algorithm"
        },
        "kind" : {
            name: "kind",
            dataType: TerminologyCapabilitiesKind,
            min: 1,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.kind",
            valueSet: "http://hl7.org/fhir/ValueSet/capability-statement-kind|5.0.0"
        },
        "implementation" : {
            name: "implementation",
            dataType: TerminologyCapabilitiesImplementation,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.implementation"
        },
        "lockedDate" : {
            name: "lockedDate",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.lockedDate"
        },
        "version" : {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.version"
        },
        "url" : {
            name: "url",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.url"
        },
        "expansion" : {
            name: "expansion",
            dataType: TerminologyCapabilitiesExpansion,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.expansion"
        },
        "contained" : {
            name: "contained",
            dataType: r5:Resource,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TerminologyCapabilities.contained"
        },
        "copyrightLabel" : {
            name: "copyrightLabel",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.copyrightLabel"
        },
        "meta" : {
            name: "meta",
            dataType: r5:Meta,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.meta"
        },
        "name" : {
            name: "name",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.name"
        },
        "translation" : {
            name: "translation",
            dataType: TerminologyCapabilitiesTranslation,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.translation"
        },
        "implicitRules" : {
            name: "implicitRules",
            dataType: r5:uri,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.implicitRules"
        },
        "publisher" : {
            name: "publisher",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.publisher"
        },
        "useContext" : {
            name: "useContext",
            dataType: r5:UsageContext,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            path: "TerminologyCapabilities.useContext"
        },
        "status" : {
            name: "status",
            dataType: TerminologyCapabilitiesStatus,
            min: 1,
            max: 1,
            isArray: false,
            path: "TerminologyCapabilities.status",
            valueSet: "http://hl7.org/fhir/ValueSet/publication-status|5.0.0"
        }
    },
    serializers: {
        'xml: r5:fhirResourceXMLSerializer,
        'json: r5:fhirResourceJsonSerializer
    }
}
public type TerminologyCapabilities record {|
    *r5:DomainResource;

    RESOURCE_NAME_TERMINOLOGYCAPABILITIES resourceType = RESOURCE_NAME_TERMINOLOGYCAPABILITIES;

    r5:dateTime date;
    r5:markdown copyright?;
    r5:Extension[] extension?;
    TerminologyCapabilitiesSoftware software?;
    r5:markdown purpose?;
    r5:CodeableConcept[] jurisdiction?;
    r5:Extension[] modifierExtension?;
    TerminologyCapabilitiesCodeSearch codeSearch?;
    r5:markdown description?;
    TerminologyCapabilitiesValidateCode validateCode?;
    boolean experimental?;
    r5:code language?;
    string title?;
    string versionAlgorithmString?;
    r5:ContactDetail[] contact?;
    string id?;
    r5:Narrative text?;
    TerminologyCapabilitiesClosure closure?;
    r5:Identifier[] identifier?;
    TerminologyCapabilitiesCodeSystem[] codeSystem?;
    r5:Coding versionAlgorithmCoding?;
    TerminologyCapabilitiesKind kind;
    TerminologyCapabilitiesImplementation implementation?;
    boolean lockedDate?;
    string 'version?;
    r5:uri url?;
    TerminologyCapabilitiesExpansion expansion?;
    r5:Resource[] contained?;
    string copyrightLabel?;
    r5:Meta meta?;
    string name?;
    TerminologyCapabilitiesTranslation translation?;
    r5:uri implicitRules?;
    string publisher?;
    r5:UsageContext[] useContext?;
    TerminologyCapabilitiesStatus status;
    r5:Element ...;
|};

# FHIR TerminologyCapabilitiesImplementation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + description - Information about the specific installation that this terminology capability statement relates to.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + url - An absolute base URL for the implementation.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesImplementation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.implementation.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.implementation.modifierExtension"
        },
        "description": {
            name: "description",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Information about the specific installation that this terminology capability statement relates to.",
            path: "TerminologyCapabilities.implementation.description"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.implementation.id"
        },
        "url": {
            name: "url",
            dataType: r5:urlType,
            min: 0,
            max: 1,
            isArray: false,
            description: "An absolute base URL for the implementation.",
            path: "TerminologyCapabilities.implementation.url"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesImplementation record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string description;
    string id?;
    r5:urlType url?;
|};

# FHIR TerminologyCapabilitiesCodeSystemVersion datatype record.
#
# + filter - Filter Properties supported.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + isDefault - If this is the default version for this code system.
# + code - For version-less code systems, there should be a single version with no identifier.
# + compositional - If the compositional grammar defined by the code system is supported.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + property - Properties supported for $lookup.
# + language - Language Displays supported.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesCodeSystemVersion",
    baseType: (),
    elements: {
        "filter": {
            name: "filter",
            dataType: TerminologyCapabilitiesCodeSystemVersionFilter,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Filter Properties supported.",
            path: "TerminologyCapabilities.codeSystem.version.filter"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.codeSystem.version.extension"
        },
        "isDefault": {
            name: "isDefault",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If this is the default version for this code system.",
            path: "TerminologyCapabilities.codeSystem.version.isDefault"
        },
        "code": {
            name: "code",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "For version-less code systems, there should be a single version with no identifier.",
            path: "TerminologyCapabilities.codeSystem.version.code"
        },
        "compositional": {
            name: "compositional",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If the compositional grammar defined by the code system is supported.",
            path: "TerminologyCapabilities.codeSystem.version.compositional"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.codeSystem.version.modifierExtension"
        },
        "property": {
            name: "property",
            dataType: r5:code,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Properties supported for $lookup.",
            path: "TerminologyCapabilities.codeSystem.version.property"
        },
        "language": {
            name: "language",
            dataType: r5:code,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Language Displays supported.",
            path: "TerminologyCapabilities.codeSystem.version.language"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.codeSystem.version.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesCodeSystemVersion record {|
    *r5:BackboneElement;

    TerminologyCapabilitiesCodeSystemVersionFilter[] filter?;
    r5:Extension[] extension?;
    boolean isDefault?;
    string code?;
    boolean compositional?;
    r5:Extension[] modifierExtension?;
    r5:code[] property?;
    r5:code[] language?;
    string id?;
|};

# FHIR TerminologyCapabilitiesValidateCode datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + translations - Whether translations are validated.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesValidateCode",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.validateCode.extension"
        },
        "translations": {
            name: "translations",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Whether translations are validated.",
            path: "TerminologyCapabilities.validateCode.translations"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.validateCode.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.validateCode.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesValidateCode record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    boolean translations;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# FHIR TerminologyCapabilitiesTranslation datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + needsMap - Whether the client must identify the map.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesTranslation",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.translation.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.translation.modifierExtension"
        },
        "needsMap": {
            name: "needsMap",
            dataType: boolean,
            min: 1,
            max: 1,
            isArray: false,
            description: "Whether the client must identify the map.",
            path: "TerminologyCapabilities.translation.needsMap"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.translation.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesTranslation record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    boolean needsMap;
    string id?;
|};

# TerminologyCapabilitiesCodeSystemContent enum
public enum TerminologyCapabilitiesCodeSystemContent {
   CODE_CONTENT_FRAGMENT = "fragment",
   CODE_CONTENT_SUPPLEMENT = "supplement",
   CODE_CONTENT_NOT_PRESENT = "not-present",
   CODE_CONTENT_COMPLETE = "complete",
   CODE_CONTENT_EXAMPLE = "example"
}

# FHIR TerminologyCapabilitiesExpansion datatype record.
#
# + textFilter - Documentation about text searching works.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + incomplete - True if requests for incomplete expansions are allowed.
# + hierarchical - Whether the server can return nested value sets.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + 'parameter - Supported expansion parameter.
# + paging - Whether the server supports paging on expansion.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesExpansion",
    baseType: (),
    elements: {
        "textFilter": {
            name: "textFilter",
            dataType: r5:markdown,
            min: 0,
            max: 1,
            isArray: false,
            description: "Documentation about text searching works.",
            path: "TerminologyCapabilities.expansion.textFilter"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.expansion.extension"
        },
        "incomplete": {
            name: "incomplete",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "True if requests for incomplete expansions are allowed.",
            path: "TerminologyCapabilities.expansion.incomplete"
        },
        "hierarchical": {
            name: "hierarchical",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether the server can return nested value sets.",
            path: "TerminologyCapabilities.expansion.hierarchical"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.expansion.modifierExtension"
        },
        "parameter": {
            name: "parameter",
            dataType: TerminologyCapabilitiesExpansionParameter,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Supported expansion parameter.",
            path: "TerminologyCapabilities.expansion.parameter"
        },
        "paging": {
            name: "paging",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "Whether the server supports paging on expansion.",
            path: "TerminologyCapabilities.expansion.paging"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.expansion.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesExpansion record {|
    *r5:BackboneElement;

    r5:markdown textFilter?;
    r5:Extension[] extension?;
    boolean incomplete?;
    boolean hierarchical?;
    r5:Extension[] modifierExtension?;
    TerminologyCapabilitiesExpansionParameter[] 'parameter?;
    boolean paging?;
    string id?;
|};

# FHIR TerminologyCapabilitiesCodeSystem datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + subsumption - True if subsumption is supported for this version of the code system.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + uri - Canonical identifier for the code system, represented as a URI.
# + 'version - For the code system, a list of versions that are supported by the server.
# + content - The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesCodeSystem",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.codeSystem.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.codeSystem.modifierExtension"
        },
        "subsumption": {
            name: "subsumption",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "True if subsumption is supported for this version of the code system.",
            path: "TerminologyCapabilities.codeSystem.subsumption"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.codeSystem.id"
        },
        "uri": {
            name: "uri",
            dataType: r5:canonical,
            min: 0,
            max: 1,
            isArray: false,
            description: "Canonical identifier for the code system, represented as a URI.",
            path: "TerminologyCapabilities.codeSystem.uri"
        },
        "version": {
            name: "version",
            dataType: TerminologyCapabilitiesCodeSystemVersion,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "For the code system, a list of versions that are supported by the server.",
            path: "TerminologyCapabilities.codeSystem.version"
        },
        "content": {
            name: "content",
            dataType: TerminologyCapabilitiesCodeSystemContent,
            min: 1,
            max: 1,
            isArray: false,
            description: "The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.",
            path: "TerminologyCapabilities.codeSystem.content"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesCodeSystem record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    boolean subsumption?;
    string id?;
    r5:canonical uri?;
    TerminologyCapabilitiesCodeSystemVersion[] 'version?;
    TerminologyCapabilitiesCodeSystemContent content;
|};

# FHIR TerminologyCapabilitiesClosure datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + translation - If cross-system closure is supported.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesClosure",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.closure.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.closure.modifierExtension"
        },
        "translation": {
            name: "translation",
            dataType: boolean,
            min: 0,
            max: 1,
            isArray: false,
            description: "If cross-system closure is supported.",
            path: "TerminologyCapabilities.closure.translation"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.closure.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesClosure record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    boolean translation?;
    string id?;
|};

# TerminologyCapabilitiesCodeSearch enum
public enum TerminologyCapabilitiesCodeSearch {
   CODE_CODESEARCH_IN_COMPOSE = "in-compose",
   CODE_CODESEARCH_IN_EXPANSION = "in-expansion",
   CODE_CODESEARCH_IN_COMPOSE_OR_EXPANSION = "in-compose-or-expansion"
}

# TerminologyCapabilitiesKind enum
public enum TerminologyCapabilitiesKind {
   CODE_KIND_CAPABILITY = "capability",
   CODE_KIND_REQUIREMENTS = "requirements",
   CODE_KIND_INSTANCE = "instance"
}

# FHIR TerminologyCapabilitiesExpansionParameter datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + documentation - Description of support for parameter.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Name of the supported expansion parameter.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesExpansionParameter",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.expansion.parameter.extension"
        },
        "documentation": {
            name: "documentation",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Description of support for parameter.",
            path: "TerminologyCapabilities.expansion.parameter.documentation"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.expansion.parameter.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: r5:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "Name of the supported expansion parameter.",
            path: "TerminologyCapabilities.expansion.parameter.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.expansion.parameter.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesExpansionParameter record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    string documentation?;
    r5:Extension[] modifierExtension?;
    r5:code name;
    string id?;
|};

# FHIR TerminologyCapabilitiesCodeSystemVersionFilter datatype record.
#
# + op - Operations supported for the property.
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + code - Code of the property supported.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesCodeSystemVersionFilter",
    baseType: (),
    elements: {
        "op": {
            name: "op",
            dataType: r5:code,
            min: 1,
            max: int:MAX_VALUE,
            isArray: true,
            description: "Operations supported for the property.",
            path: "TerminologyCapabilities.codeSystem.version.filter.op"
        },
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.codeSystem.version.filter.extension"
        },
        "code": {
            name: "code",
            dataType: r5:code,
            min: 1,
            max: 1,
            isArray: false,
            description: "Code of the property supported.",
            path: "TerminologyCapabilities.codeSystem.version.filter.code"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.codeSystem.version.filter.modifierExtension"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.codeSystem.version.filter.id"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesCodeSystemVersionFilter record {|
    *r5:BackboneElement;

    @constraint:Array {
        minLength: {
            value: 1,
            message: "Validation failed for $.TerminologyCapabilities.codeSystem.version.filter.op constraint. This field must be an array containing at least one item."
        },
        maxLength: {
            value: 1,
            message: "Validation failed for $.TerminologyCapabilities.codeSystem.version.filter.op constraint. This field must be an array containing at most one item."
        }
    }
    r5:code[] op;
    r5:Extension[] extension?;
    r5:code code;
    r5:Extension[] modifierExtension?;
    string id?;
|};

# TerminologyCapabilitiesStatus enum
public enum TerminologyCapabilitiesStatus {
   CODE_STATUS_DRAFT = "draft",
   CODE_STATUS_ACTIVE = "active",
   CODE_STATUS_RETIRED = "retired",
   CODE_STATUS_UNKNOWN = "unknown"
}

# FHIR TerminologyCapabilitiesSoftware datatype record.
#
# + extension - May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
# + modifierExtension - May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
# + name - Name the software is known by.
# + id - Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
# + 'version - The version identifier for the software covered by this statement.
@r5:DataTypeDefinition {
    name: "TerminologyCapabilitiesSoftware",
    baseType: (),
    elements: {
        "extension": {
            name: "extension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            path: "TerminologyCapabilities.software.extension"
        },
        "modifierExtension": {
            name: "modifierExtension",
            dataType: r5:Extension,
            min: 0,
            max: int:MAX_VALUE,
            isArray: true,
            description: "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions. Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            path: "TerminologyCapabilities.software.modifierExtension"
        },
        "name": {
            name: "name",
            dataType: string,
            min: 1,
            max: 1,
            isArray: false,
            description: "Name the software is known by.",
            path: "TerminologyCapabilities.software.name"
        },
        "id": {
            name: "id",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
            path: "TerminologyCapabilities.software.id"
        },
        "version": {
            name: "version",
            dataType: string,
            min: 0,
            max: 1,
            isArray: false,
            description: "The version identifier for the software covered by this statement.",
            path: "TerminologyCapabilities.software.version"
        }
    },
    serializers: {
        'xml: r5:complexDataTypeXMLSerializer,
        'json: r5:complexDataTypeJsonSerializer
    }
}
public type TerminologyCapabilitiesSoftware record {|
    *r5:BackboneElement;

    r5:Extension[] extension?;
    r5:Extension[] modifierExtension?;
    string name;
    string id?;
    string 'version?;
|};

