// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerinax/health.fhir.r5;

# Terminology processor instance
public final r5:TerminologyProcessor terminologyProcessor = r5:terminologyProcessor;

# FHIR registry instance
public final r5:FHIRRegistry fhirRegistry = r5:fhirRegistry;

//Number of search params in FHIR_IG_SEARCH_PARAMS_1  = 100
final readonly & map<r5:FHIRSearchParameterDefinition[]> FHIR_IG_SEARCH_PARAMS_1 = {
    "parent": [
        {
            name: "parent",
            'type: r5:REFERENCE,
            base: ["Specimen", "Device", "MessageDefinition"],
            expression: "MessageDefinition.parent | Device.parent | Specimen.parent"
        }
    ],
    "modality": [
        {
            name: "modality",
            'type: r5:TOKEN,
            base: ["ImagingStudy", "DocumentReference"],
            expression: "DocumentReference.modality | ImagingStudy.series.modality"
        }
    ],
    "master-file": [
        {
            name: "master-file",
            'type: r5:REFERENCE,
            base: ["MedicinalProductDefinition"],
            expression: "MedicinalProductDefinition.masterFile"
        }

    ],
    "subscriberid": [
        {
            name: "subscriberid",
            'type: r5:TOKEN,
            base: ["Coverage"],
            expression: "Coverage.subscriberId"
        }

    ],
    "scope-artifact": [
        {
            name: "scope-artifact",
            'type: r5:REFERENCE,
            base: ["TestScript"],
            expression: "TestScript.scope.artifact"
        }

    ],
    "setting": [
        {
            name: "setting",
            'type: r5:TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.practiceSetting"
        }
    ],
    "substance-definition": [
        {
            name: "substance-definition",
            'type: r5:REFERENCE,
            base: ["Ingredient"],
            expression: "Ingredient.substance.code.reference"
        }

    ],
    "_list": [
        {
            name: "_list",
            'type: r5:SPECIAL,
            base: ["Resource"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "path": [
        {
            name: "path",
            'type: r5:TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.snapshot.element.path | StructureDefinition.differential.element.path"
        }
    ],
    "source-scope": [
        {
            name: "source-scope",
            'type: r5:REFERENCE,
            base: ["ConceptMap"],
            expression: "(ConceptMap.sourceScope as canonical)"
        }
    ],
    "code-value-date": [
        {
            name: "code-value-date",
            'type: r5:COMPOSITE,
            base: ["Observation"],
            expression: "Observation"
        }
    ],
    "connection-type": [
        {
            name: "connection-type",
            'type: r5:TOKEN,
            base: ["Endpoint"],
            expression: "Endpoint.connectionType"
        }
    ],
    "instantiates-uri": [
        {
            name: "instantiates-uri",
            'type: r5:URI,
            base: ["CarePlan", "Communication", "Procedure", "RequestOrchestration", "DeviceRequest", "ServiceRequest", "FamilyMemberHistory"],
            expression: "FamilyMemberHistory.instantiatesUri | ServiceRequest.instantiatesUri | DeviceRequest.instantiatesUri | RequestOrchestration.instantiatesUri | Procedure.instantiatesUri | Communication.instantiatesUri | CarePlan.instantiatesUri"
        }
    ],
    "near": [
        {
            name: "near",
            'type: r5:SPECIAL,
            base: ["Location"],
            expression: "Location.position"
        }
    ],
    "item-udi": [
        {
            name: "item-udi",
            'type: r5:REFERENCE,
            base: ["ExplanationOfBenefit", "Claim"],
            expression: "Claim.item.udi | ExplanationOfBenefit.item.udi"
        }
    ],
    "strength-presentation-quantity": [
        {
            name: "strength-presentation-quantity",
            'type: r5:QUANTITY,
            base: ["Ingredient"],
            expression: "Ingredient.substance.strength.presentation.ofType(Quantity)"
        }
    ],
    "form-of": [
        {
            name: "form-of",
            'type: r5:REFERENCE,
            base: ["AdministrableProductDefinition"],
            expression: "AdministrableProductDefinition.formOf"
        }
    ],
    "ext-context-expression": [
        {
            name: "ext-context-expression",
            'type: r5:TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.context.expression"
        }
    ],
    "finding-code": [
        {
            name: "finding-code",
            'type: r5:TOKEN,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.finding.item.concept"
        }
    ],
    "general-practitioner": [
        {
            name: "general-practitioner",
            'type: r5:REFERENCE,
            base: ["Patient"],
            expression: "Patient.generalPractitioner"
        }
    ],
    "active": [
        {
            name: "active",
            'type: r5:TOKEN,
            base: ["HealthcareService", "RelatedPerson", "Schedule", "Patient", "OrganizationAffiliation", "Organization", "PractitionerRole", "Practitioner"],
            expression: "Practitioner.active | PractitionerRole.active | Organization.active | OrganizationAffiliation.active | Patient.active | Schedule.active | RelatedPerson.active | HealthcareService.active"
        }
    ],
    "address-postalcode": [
        {
            name: "address-postalcode",
            'type: r5:STRING,
            base: ["Patient", "Person", "Practitioner", "RelatedPerson", "Organization", "Location", "InsurancePlan"],
            expression: "InsurancePlan.contact.address.postalCode | Location.address.postalCode | Organization.contact.address.postalCode | Patient.address.postalCode | Person.address.postalCode | Practitioner.address.postalCode | RelatedPerson.address.postalCode"
        }
    ],
    "version": [
        {
            name: "version",
            'type: r5:STRING,
            base: ["Device", "DocumentReference"],
            expression: "DocumentReference.version | Device.version.value"
        },
        {
            name: "version",
            'type: r5:TOKEN,
            base: ["ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "SubscriptionTopic", "TerminologyCapabilities", "TestScript", "Composition"],
            expression: "Composition.version | ActivityDefinition.version | ActorDefinition.version | CapabilityStatement.version | ChargeItemDefinition.version | Citation.version | CodeSystem.version | CompartmentDefinition.version | ConceptMap.version | ConditionDefinition.version | EventDefinition.version | Evidence.version | EvidenceVariable.version | ExampleScenario.version | GraphDefinition.version | ImplementationGuide.version | Library.version | Measure.version | MessageDefinition.version | NamingSystem.version | OperationDefinition.version | PlanDefinition.version | Questionnaire.version | Requirements.version | SearchParameter.version | StructureDefinition.version | StructureMap.version | SubscriptionTopic.version | TerminologyCapabilities.version | TestScript.version | ValueSet.version"
        }
    ],
    "scope-artifact-conformance": [
        {
            name: "scope-artifact-conformance",
            'type: r5:COMPOSITE,
            base: ["TestScript"],
            expression: "TestScript.scope"
        }
    ],
    "contains": [
        {
            name: "contains",
            'type: r5:SPECIAL,
            base: ["Location"],
            expression: "Location.extension('http://hl7.org/fhir/StructureDefinition/location-boundary-geojson').value"
        }

    ],
    "route": [
        {
            name: "route",
            'type: r5:TOKEN,
            base: ["AllergyIntolerance", "AdministrableProductDefinition"],
            expression: "AdministrableProductDefinition.routeOfAdministration.code | AllergyIntolerance.reaction.exposureRoute"
        }
    ],
    "sender": [
        {
            name: "sender",
            'type: r5:REFERENCE,
            base: ["MessageHeader", "Communication"],
            expression: "Communication.sender | MessageHeader.sender"
        }
    ],
    "domain": [
        {
            name: "domain",
            'type: r5:TOKEN,
            base: ["SubstanceDefinition", "MedicinalProductDefinition"],
            expression: "MedicinalProductDefinition.domain | SubstanceDefinition.domain"
        },
        {
            name: "domain",
            'type: r5:REFERENCE,
            base: ["Contract"],
            expression: "Contract.domain"
        }
    ],
    "response-id": [
        {
            name: "response-id",
            'type: r5:TOKEN,
            base: ["MessageHeader"],
            expression: "MessageHeader.response.identifier"
        }
    ],
    "signature-type": [
        {
            name: "signature-type",
            'type: r5:TOKEN,
            base: ["Provenance"],
            expression: "Provenance.signature.type"
        }
    ],
    "role": [
        {
            name: "role",
            'type: r5:TOKEN,
            base: ["PractitionerRole", "Ingredient", "OrganizationAffiliation"],
            expression: "OrganizationAffiliation.code | Ingredient.role | PractitionerRole.code"
        }
    ],
    "authoredon": [
        {
            name: "authoredon",
            'type: r5:DATE,
            base: ["MedicationRequest"],
            expression: "MedicationRequest.authoredOn"
        }
    ],
    "objective-type": [
        {
            name: "objective-type",
            'type: r5:TOKEN,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.objective.type"
        }

    ],
    "is-derived": [
        {
            name: "is-derived",
            'type: r5:TOKEN,
            base: ["SpecimenDefinition"],
            expression: "SpecimenDefinition.typeTested.isDerived"
        }
    ],
    "characteristic": [
        {
            name: "characteristic",
            'type: r5:TOKEN,
            base: ["HealthcareService", "Group", "MedicinalProductDefinition", "PractitionerRole", "Location"],
            expression: "Location.characteristic | PractitionerRole.characteristic | MedicinalProductDefinition.characteristic.value.ofType(Quantity) | MedicinalProductDefinition.characteristic.value.ofType(CodeableConcept) | Group.characteristic.code | HealthcareService.characteristic"
        }
    ],
    "attestation-who": [
        {
            name: "attestation-who",
            'type: r5:REFERENCE,
            base: ["VerificationResult"],
            expression: "VerificationResult.attestation.who"
        }
    ],
    "entered-date": [
        {
            name: "entered-date",
            'type: r5:DATE,
            base: ["ChargeItem"],
            expression: "ChargeItem.enteredDate"
        }

    ],
    "result": [
        {
            name: "result",
            'type: r5:REFERENCE,
            base: ["DiagnosticReport"],
            expression: "DiagnosticReport.result"
        },
        {
            name: "result",
            'type: r5:TOKEN,
            base: ["TestReport"],
            expression: "TestReport.result"
        }
    ],
    "ExampleSearchParameterOnAnExtension": [
        {
            name: "ExampleSearchParameterOnAnExtension",
            'type: r5:REFERENCE,
            base: ["Patient"],
            expression: "Patient.extension('http://example.org/fhir/StructureDefinition/participation-agreement').value"
        }

    ],
    "insurer": [
        {
            name: "insurer",
            'type: r5:REFERENCE,
            base: ["Claim", "ClaimResponse", "Coverage", "CoverageEligibilityResponse"],
            expression: "CoverageEligibilityResponse.insurer | Coverage.insurer | ClaimResponse.insurer | Claim.insurer"
        }
    ],
    "monitoring-program-name": [
        {
            name: "monitoring-program-name",
            'type: r5:TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.monitoringProgram.name"
        }
    ],
    "target-code": [
        {
            name: "target-code",
            'type: r5:TOKEN,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.element.target.code"
        }
    ],
    "service-type-reference": [
        {
            name: "service-type-reference",
            'type: r5:REFERENCE,
            base: ["Slot", "Appointment", "Schedule"],
            expression: "Schedule.serviceType.reference | Appointment.serviceType.reference | Slot.serviceType.reference"
        }

    ],
    "policy": [
        {
            name: "policy",
            'type: r5:URI,
            base: ["AuditEvent"],
            expression: "AuditEvent.agent.policy"
        }
    ],
    "address": [
        {
            name: "address",
            'type: r5:STRING,
            base: ["InsurancePlan", "Organization", "Location", "Patient", "Person", "Practitioner", "RelatedPerson"],
            expression: "Patient.address | Person.address | Practitioner.address | RelatedPerson.address | Location.address | Organization.contact.address | InsurancePlan.contact.address"
        }
    ],
    "sex": [
        {
            name: "sex",
            'type: r5:TOKEN,
            base: ["FamilyMemberHistory"],
            expression: "FamilyMemberHistory.sex"
        }
    ],
    "component-value-quantity": [
        {
            name: "component-value-quantity",
            'type: r5:QUANTITY,
            base: ["Observation"],
            expression: "Observation.component.value.ofType(Quantity) | Observation.component.value.ofType(SampledData)"
        }
    ],
    "episode-of-care": [
        {
            name: "episode-of-care",
            'type: r5:REFERENCE,
            base: ["Encounter"],
            expression: "Encounter.episodeOfCare"
        }
    ],
    "derived-or-self": [
        {
            name: "derived-or-self",
            'type: r5:URI,
            base: ["SubscriptionTopic"],
            expression: "SubscriptionTopic.url | SubscriptionTopic.derivedFrom"
        }
    ],
    "bodysite-reference": [
        {
            name: "bodysite-reference",
            'type: r5:REFERENCE,
            base: ["DocumentReference"],
            expression: "DocumentReference.bodySite.reference"
        }
    ],
    "procedure": [
        {
            name: "procedure",
            'type: r5:REFERENCE,
            base: ["Specimen"],
            expression: "Specimen.collection.procedure"
        }
    ],
    "actor": [
        {
            name: "actor",
            'type: r5:REFERENCE,
            base: ["Consent", "Requirements", "AppointmentResponse", "Task", "Appointment", "Schedule"],
            expression: "Schedule.actor | Appointment.participant.actor | Task.performer.actor | AppointmentResponse.actor | Requirements.actor | Consent.provision.actor.reference"
        }
    ],
    "input-profile": [
        {
            name: "input-profile",
            'type: r5:REFERENCE,
            base: ["OperationDefinition"],
            expression: "OperationDefinition.inputProfile"
        }
    ],
    "component": [
        {
            name: "component",
            'type: r5:REFERENCE,
            base: ["SearchParameter"],
            expression: "SearchParameter.component.definition"
        }

    ],
    "source-code": [
        {
            name: "source-code",
            'type: r5:TOKEN,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.element.code"
        }
    ],
    "subject-type": [
        {
            name: "subject-type",
            'type: r5:TOKEN,
            base: ["Questionnaire"],
            expression: "Questionnaire.subjectType"
        }
    ],
    "stage": [
        {
            name: "stage",
            'type: r5:TOKEN,
            base: ["Condition"],
            expression: "Condition.stage.summary"
        }
    ],
    "series": [
        {
            name: "series",
            'type: r5:TOKEN,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.series.uid"
        },
        {
            name: "series",
            'type: r5:STRING,
            base: ["Immunization"],
            expression: "Immunization.protocolApplied.series"
        }
    ],
    "strength-presentation-ratio": [
        {
            name: "strength-presentation-ratio",
            'type: r5:COMPOSITE,
            base: ["Ingredient"],
            expression: "Ingredient.substance.strength.presentation.ofType(Ratio)"
        }
    ],
    "contained-item": [
        {
            name: "contained-item",
            'type: r5:REFERENCE,
            base: ["PackagedProductDefinition"],
            expression: "PackagedProductDefinition.packaging.containedItem.item.reference"
        }
    ],
    "information": [
        {
            name: "information",
            'type: r5:REFERENCE,
            base: ["ImmunizationRecommendation"],
            expression: "ImmunizationRecommendation.recommendation.supportingPatientInformation"
        }
    ],
    "characteristic-reference": [
        {
            name: "characteristic-reference",
            'type: r5:REFERENCE,
            base: ["Group"],
            expression: "(Group.characteristic.value.ofType(Reference))"
        }
    ],
    "trigger-description": [
        {
            name: "trigger-description",
            'type: r5:STRING,
            base: ["SubscriptionTopic"],
            expression: "SubscriptionTopic.resourceTrigger.description"
        }
    ],
    "notes": [
        {
            name: "notes",
            'type: r5:STRING,
            base: ["List"],
            expression: "List.note.text"
        }
    ],
    "service-category": [
        {
            name: "service-category",
            'type: r5:TOKEN,
            base: ["Appointment", "Schedule", "Slot", "HealthcareService"],
            expression: "HealthcareService.category | Slot.serviceCategory | Schedule.serviceCategory | Appointment.serviceCategory"
        }
    ],
    "evidence": [
        {
            name: "evidence",
            'type: r5:TOKEN,
            base: ["Condition"],
            expression: "Condition.evidence.concept"
        }

    ],
    "criticality": [
        {
            name: "criticality",
            'type: r5:TOKEN,
            base: ["AllergyIntolerance"],
            expression: "AllergyIntolerance.criticality"
        }
    ],
    "language": [
        {
            name: "language",
            'type: r5:TOKEN,
            base: ["DocumentReference", "Patient"],
            expression: "Patient.communication.language | DocumentReference.content.attachment.language"
        }
    ],
    "name-language": [
        {
            name: "name-language",
            'type: r5:TOKEN,
            base: ["MedicinalProductDefinition"],
            expression: "MedicinalProductDefinition.name.usage.language"
        }
    ],
    "payment-date": [
        {
            name: "payment-date",
            'type: r5:DATE,
            base: ["ClaimResponse"],
            expression: "ClaimResponse.payment.date"
        }

    ],
    "component-code-value-quantity": [
        {
            name: "component-code-value-quantity",
            'type: r5:COMPOSITE,
            base: ["Observation"],
            expression: "Observation.component"
        }

    ],
    "payload": [
        {
            name: "payload",
            'type: r5:TOKEN,
            base: ["Subscription"],
            expression: "Subscription.contentType"
        }

    ],
    "contact": [
        {
            name: "contact",
            'type: r5:TOKEN,
            base: ["Subscription"],
            expression: "Subscription.contact"
        },
        {
            name: "contact",
            'type: r5:REFERENCE,
            base: ["MedicinalProductDefinition"],
            expression: "MedicinalProductDefinition.contact.contact"
        },
        {
            name: "contact",
            'type: r5:STRING,
            base: ["NamingSystem"],
            expression: "NamingSystem.contact.name"
        }
    ],
    "enterer": [
        {
            name: "enterer",
            'type: r5:REFERENCE,
            base: ["Claim", "ExplanationOfBenefit", "ChargeItem", "CoverageEligibilityRequest"],
            expression: "CoverageEligibilityRequest.enterer | ChargeItem.enterer | ExplanationOfBenefit.enterer | Claim.enterer"
        }
    ],
    "location-period": [
        {
            name: "location-period",
            'type: r5:COMPOSITE,
            base: ["Encounter"],
            expression: "Encounter.location"
        }
    ],
    "exclude": [
        {
            name: "exclude",
            'type: r5:TOKEN,
            base: ["Group"],
            expression: "Group.characteristic.exclude"
        }
    ],
    "information-provider": [
        {
            name: "information-provider",
            'type: r5:REFERENCE,
            base: ["CommunicationRequest"],
            expression: "CommunicationRequest.informationProvider"
        }
    ],
    "care-manager": [
        {
            name: "care-manager",
            'type: r5:REFERENCE,
            base: ["EpisodeOfCare"],
            expression: "EpisodeOfCare.careManager.where(resolve() is Practitioner)"
        }
    ],
    "performer-code": [
        {
            name: "performer-code",
            'type: r5:TOKEN,
            base: ["DeviceRequest"],
            expression: "DeviceRequest.performer.concept"
        }
    ],
    "performer-device-code": [
        {
            name: "performer-device-code",
            'type: r5:TOKEN,
            base: ["MedicationAdministration"],
            expression: "MedicationAdministration.performer.actor.concept"
        }
    ],
    "part-status": [
        {
            name: "part-status",
            'type: r5:TOKEN,
            base: ["Appointment", "AppointmentResponse"],
            expression: "AppointmentResponse.participantStatus | Appointment.participant.status"
        }

    ],
    "appointment-type": [
        {
            name: "appointment-type",
            'type: r5:TOKEN,
            base: ["Slot", "Appointment"],
            expression: "Appointment.appointmentType | Slot.appointmentType"
        }
    ],
    "reason-given": [
        {
            name: "reason-given",
            'type: r5:REFERENCE,
            base: ["MedicationAdministration"],
            expression: "MedicationAdministration.reason.reference"
        }
    ],
    "dose-status": [
        {
            name: "dose-status",
            'type: r5:TOKEN,
            base: ["ImmunizationEvaluation"],
            expression: "ImmunizationEvaluation.doseStatus"
        }
    ],
    "item-subject": [
        {
            name: "item-subject",
            'type: r5:REFERENCE,
            base: ["QuestionnaireResponse"],
            expression: "QuestionnaireResponse.item.where(extension('http://hl7.org/fhir/StructureDefinition/questionnaireresponse-isSubject').exists()).answer.value.ofType(Reference)"
        }
    ],
    "status-date": [
        {
            name: "status-date",
            'type: r5:DATE,
            base: ["VerificationResult"],
            expression: "VerificationResult.statusDate"
        }
    ],
    "subject_state": [
        {
            name: "subject_state",
            'type: r5:TOKEN,
            base: ["ResearchSubject"],
            expression: "ResearchSubject.progress.subjectState"
        }
    ],
    "primarysource-who": [
        {
            name: "primarysource-who",
            'type: r5:REFERENCE,
            base: ["VerificationResult"],
            expression: "VerificationResult.primarySource.who"
        }
    ],
    "beneficiary": [
        {
            name: "beneficiary",
            'type: r5:REFERENCE,
            base: ["Coverage"],
            expression: "Coverage.beneficiary"
        }
    ],
    "authority": [
        {
            name: "authority",
            'type: r5:REFERENCE,
            base: ["Contract"],
            expression: "Contract.authority"
        }
    ],
    "filter-value": [
        {
            name: "filter-value",
            'type: r5:STRING,
            base: ["Subscription"],
            expression: "Subscription.filterBy.value"
        }
    ],
    "allocation-account": [
        {
            name: "allocation-account",
            'type: r5:REFERENCE,
            base: ["PaymentReconciliation"],
            expression: "PaymentReconciliation.allocation.account"
        }
    ],
    "subdetail-udi": [
        {
            name: "subdetail-udi",
            'type: r5:REFERENCE,
            base: ["ExplanationOfBenefit", "Claim"],
            expression: "Claim.item.detail.subDetail.udi | ExplanationOfBenefit.item.detail.subDetail.udi"
        }
    ],
    "policy-holder": [
        {
            name: "policy-holder",
            'type: r5:REFERENCE,
            base: ["Coverage"],
            expression: "Coverage.policyHolder"
        }
    ],
    "onset-info": [
        {
            name: "onset-info",
            'type: r5:STRING,
            base: ["Condition"],
            expression: "Condition.onset.ofType(string)"
        }
    ],
    "context-type-value": [
        {
            name: "context-type-value",
            'type: r5:COMPOSITE,
            base: ["ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceReport", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript"],
            expression: "ActivityDefinition.useContext | ActorDefinition.useContext | CapabilityStatement.useContext | ChargeItemDefinition.useContext | Citation.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | ConditionDefinition.useContext | EventDefinition.useContext | Evidence.useContext | EvidenceReport.useContext | EvidenceVariable.useContext | ExampleScenario.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | Library.useContext | Measure.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | PlanDefinition.useContext | Questionnaire.useContext | Requirements.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | TestScript.useContext | ValueSet.useContext"
        }
    ],
    "lot-number": [
        {
            name: "lot-number",
            'type: r5:TOKEN,
            base: ["NutritionProduct", "Medication"],
            expression: "Medication.batch.lotNumber | NutritionProduct.instance.lotNumber"
        },
        {
            name: "lot-number",
            'type: r5:STRING,
            base: ["Device", "Immunization"],
            expression: "Immunization.lotNumber | Device.lotNumber"
        }
    ],
    "component-data-absent-reason": [
        {
            name: "component-data-absent-reason",
            'type: r5:TOKEN,
            base: ["Observation"],
            expression: "Observation.component.dataAbsentReason"
        }
    ],
    "for": [
        {
            name: "for",
            'type: r5:REFERENCE,
            base: ["Ingredient"],
            expression: "Ingredient.for"
        }
    ],
    "medium": [
        {
            name: "medium",
            'type: r5:TOKEN,
            base: ["CommunicationRequest", "Communication"],
            expression: "Communication.medium | CommunicationRequest.medium"
        }
    ]
};

//Number of search params in FHIR_IG_SEARCH_PARAMS_2  = 100
final readonly & map<r5:FHIRSearchParameterDefinition[]> FHIR_IG_SEARCH_PARAMS_2 = {
    "title": [
        {
            name: "title",
            'type: r5:STRING,
            base: ["List", "ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceVariable", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "ObservationDefinition", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SpecimenDefinition", "StructureDefinition", "StructureMap", "SubscriptionTopic", "TerminologyCapabilities", "TestScript", "Composition", "ResearchStudy"],
            expression: "ResearchStudy.title | Composition.title | ActivityDefinition.title | ActorDefinition.title | CapabilityStatement.title | ChargeItemDefinition.title | Citation.title | CodeSystem.title | ConceptMap.title | ConditionDefinition.title | EventDefinition.title | Evidence.title | EvidenceVariable.title | ImplementationGuide.title | Library.title | Measure.title | MessageDefinition.title | ObservationDefinition.title | OperationDefinition.title | PlanDefinition.title | Questionnaire.title | Requirements.title | SpecimenDefinition.title | StructureDefinition.title | StructureMap.title | SubscriptionTopic.title | TerminologyCapabilities.title | TestScript.title | ValueSet.title | List.title"
        }
    ],
    "collector": [
        {
            name: "collector",
            'type: r5:REFERENCE,
            base: ["Specimen", "BiologicallyDerivedProduct"],
            expression: "BiologicallyDerivedProduct.collection.collector | Specimen.collection.collector"
        }
    ],
    "administered-by": [
        {
            name: "administered-by",
            'type: r5:REFERENCE,
            base: ["InsurancePlan"],
            expression: "InsurancePlan.administeredBy"
        }
    ],
    "code-value-string": [
        {
            name: "code-value-string",
            'type: r5:COMPOSITE,
            base: ["Observation"],
            expression: "Observation"
        }
    ],
    "related": [
        {
            name: "related",
            'type: r5:REFERENCE,
            base: ["Composition"],
            expression: "Composition.relatesTo.resourceReference"
        }
    ],
    "provider": [
        {
            name: "provider",
            'type: r5:REFERENCE,
            base: ["ExplanationOfBenefit", "CoverageEligibilityRequest", "NutritionOrder", "Claim"],
            expression: "Claim.provider | NutritionOrder.orderer | CoverageEligibilityRequest.provider | ExplanationOfBenefit.provider"
        }
    ],
    "resultingeffect": [
        {
            name: "resultingeffect",
            'type: r5:REFERENCE,
            base: ["AdverseEvent"],
            expression: "AdverseEvent.resultingEffect"
        }
    ],
    "responsible": [
        {
            name: "responsible",
            'type: r5:REFERENCE,
            base: ["MessageHeader"],
            expression: "MessageHeader.responsible"
        },
        {
            name: "responsible",
            'type: r5:STRING,
            base: ["NamingSystem"],
            expression: "NamingSystem.responsible"
        }
    ],
    "scope": [
        {
            name: "scope",
            'type: r5:REFERENCE,
            base: ["TestPlan"],
            expression: "TestPlan.scope"
        }
    ],
    "package-for": [
        {
            name: "package-for",
            'type: r5:REFERENCE,
            base: ["PackagedProductDefinition"],
            expression: "PackagedProductDefinition.packageFor"
        }
    ],
    "class": [
        {
            name: "class",
            'type: r5:TOKEN,
            base: ["Encounter"],
            expression: "Encounter.class"
        }
    ],
    "owner": [
        {
            name: "owner",
            'type: r5:REFERENCE,
            base: ["Task", "Account", "Subscription"],
            expression: "Subscription.managingEntity | Account.owner | Task.owner"
        }
    ],
    "product-type": [
        {
            name: "product-type",
            'type: r5:TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.productType"
        }
    ],
    "recorded-date": [
        {
            name: "recorded-date",
            'type: r5:DATE,
            base: ["Condition"],
            expression: "Condition.recordedDate"
        }
    ],
    "source-scope-uri": [
        {
            name: "source-scope-uri",
            'type: r5:URI,
            base: ["ConceptMap"],
            expression: "(ConceptMap.sourceScope as uri)"
        }
    ],
    "recorder": [
        {
            name: "recorder",
            'type: r5:REFERENCE,
            base: ["AdverseEvent"],
            expression: "AdverseEvent.recorder"
        }
    ],
    "serial-number": [
        {
            name: "serial-number",
            'type: r5:STRING,
            base: ["Device"],
            expression: "Device.serialNumber | Device.identifier.where(type='SNO')"
        },
        {
            name: "serial-number",
            'type: r5:TOKEN,
            base: ["Medication", "BiologicallyDerivedProduct", "NutritionProduct"],
            expression: "NutritionProduct.instance.identifier | BiologicallyDerivedProduct.identifier | Medication.identifier"
        }
    ],
    "event-date": [
        {
            name: "event-date",
            'type: r5:DATE,
            base: ["DeviceRequest"],
            expression: "(DeviceRequest.occurrence.ofType(dateTime)) | (DeviceRequest.occurrence.ofType(Period))"
        }
    ],
    "strength-concentration-ratio": [
        {
            name: "strength-concentration-ratio",
            'type: r5:COMPOSITE,
            base: ["Ingredient"],
            expression: "Ingredient.substance.strength.concentration.ofType(Ratio)"
        }
    ],
    "length": [
        {
            name: "length",
            'type: r5:QUANTITY,
            base: ["Encounter"],
            expression: "Encounter.length"
        }
    ],
    "vaccine-type": [
        {
            name: "vaccine-type",
            'type: r5:TOKEN,
            base: ["ImmunizationRecommendation"],
            expression: "ImmunizationRecommendation.recommendation.vaccineCode"
        }
    ],
    "specification": [
        {
            name: "specification",
            'type: r5:TOKEN,
            base: ["Device", "DeviceDefinition"],
            expression: "DeviceDefinition.conformsTo.specification | Device.conformsTo.specification"
        }
    ],
    "scope-artifact-phase": [
        {
            name: "scope-artifact-phase",
            'type: r5:COMPOSITE,
            base: ["TestScript"],
            expression: "TestScript.scope"
        }
    ],
    "recorded": [
        {
            name: "recorded",
            'type: r5:DATE,
            base: ["Provenance", "MedicationDispense"],
            expression: "MedicationDispense.recorded | Provenance.recorded"
        }
    ],
    "whenhandedover": [
        {
            name: "whenhandedover",
            'type: r5:DATE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.whenHandedOver"
        }
    ],
    "FilterSearchParameter": [
        {
            name: "FilterSearchParameter",
            'type: r5:SPECIAL,
            base: ["Resource"],
            expression: "$searchParam.getExpression()"
        }

    ],
    "progress-status-state-period": [
        {
            name: "progress-status-state-period",
            'type: r5:COMPOSITE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.progressStatus"
        }
    ],
    "schedule": [
        {
            name: "schedule",
            'type: r5:REFERENCE,
            base: ["Slot"],
            expression: "Slot.schedule"
        }
    ],
    "referrer": [
        {
            name: "referrer",
            'type: r5:REFERENCE,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.referrer"
        }
    ],
    "form": [
        {
            name: "form",
            'type: r5:TOKEN,
            base: ["Medication"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "service": [
        {
            name: "service",
            'type: r5:REFERENCE,
            base: ["OrganizationAffiliation", "PractitionerRole", "ChargeItem"],
            expression: "ChargeItem.service.reference | PractitionerRole.healthcareService | OrganizationAffiliation.healthcareService"
        }
    ],
    "ext-context": [
        {
            name: "ext-context",
            'type: r5:COMPOSITE,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.context"
        }
    ],
    "onset-age": [
        {
            name: "onset-age",
            'type: r5:QUANTITY,
            base: ["Condition"],
            expression: "Condition.onset.ofType(Age) | Condition.onset.ofType(Range)"
        }
    ],
    "agent-role": [
        {
            name: "agent-role",
            'type: r5:TOKEN,
            base: ["AuditEvent", "Provenance"],
            expression: "Provenance.agent.role | AuditEvent.agent.role"
        }
    ],
    "family": [
        {
            name: "family",
            'type: r5:STRING,
            base: ["Patient", "Practitioner", "Person", "RelatedPerson"],
            expression: "RelatedPerson.name.family | Person.name.family | Patient.name.family | Practitioner.name.family"
        }
    ],
    "prior-request": [
        {
            name: "prior-request",
            'type: r5:REFERENCE,
            base: ["DeviceRequest"],
            expression: "DeviceRequest.replaces"
        }
    ],
    "results-interpreter": [
        {
            name: "results-interpreter",
            'type: r5:REFERENCE,
            base: ["DiagnosticReport"],
            expression: "DiagnosticReport.resultsInterpreter"
        }
    ],
    "empty-reason": [
        {
            name: "empty-reason",
            'type: r5:TOKEN,
            base: ["List"],
            expression: "List.emptyReason"
        }
    ],
    "indication-reference": [
        {
            name: "indication-reference",
            'type: r5:REFERENCE,
            base: ["ClinicalUseDefinition"],
            expression: "ClinicalUseDefinition.indication.diseaseSymptomProcedure.reference"
        }
    ],
    "source-reference": [
        {
            name: "source-reference",
            'type: r5:REFERENCE,
            base: ["Consent"],
            expression: "Consent.sourceReference"
        }
    ],
    "value-concept": [
        {
            name: "value-concept",
            'type: r5:TOKEN,
            base: ["Observation"],
            expression: "Observation.value.ofType(CodeableConcept)"
        }
    ],
    "focus": [
        {
            name: "focus",
            'type: r5:REFERENCE,
            base: ["MolecularSequence", "Observation", "GenomicStudy", "MessageHeader", "Task"],
            expression: "Task.focus | MessageHeader.focus | GenomicStudy.analysis.focus | Observation.focus | MolecularSequence.focus"
        },
        {
            name: "focus",
            'type: r5:TOKEN,
            base: ["MessageDefinition"],
            expression: "MessageDefinition.focus.code"
        }
    ],
    "classification-type": [
        {
            name: "classification-type",
            'type: r5:TOKEN,
            base: ["MedicationKnowledge", "Citation"],
            expression: "(Citation.classification.type) | MedicationKnowledge.medicineClassification.type"
        }
    ],
    "payee": [
        {
            name: "payee",
            'type: r5:REFERENCE,
            base: ["Claim", "ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.payee.party | Claim.payee.party"
        }
    ],
    "output": [
        {
            name: "output",
            'type: r5:REFERENCE,
            base: ["Task"],
            expression: "Task.output.value.ofType(Reference)"
        }
    ],
    "included_structure": [
        {
            name: "included_structure",
            'type: r5:TOKEN,
            base: ["BodyStructure"],
            expression: "BodyStructure.includedStructure.structure"
        }
    ],
    "supplier": [
        {
            name: "supplier",
            'type: r5:REFERENCE,
            base: ["SupplyDelivery", "SupplyRequest"],
            expression: "SupplyRequest.supplier | SupplyDelivery.supplier"
        }
    ],
    "code-value-quantity": [
        {
            name: "code-value-quantity",
            'type: r5:COMPOSITE,
            base: ["Observation"],
            expression: "Observation"
        }
    ],
    "classifier": [
        {
            name: "classifier",
            'type: r5:TOKEN,
            base: ["ResearchStudy", "Citation"],
            expression: "(Citation.classification.classifier) | ResearchStudy.classifier"
        }

    ],
    "context": [
        {
            name: "context",
            'type: r5:REFERENCE,
            base: ["DocumentReference"],
            expression: "DocumentReference.context"
        },
        {
            name: "context",
            'type: r5:TOKEN,
            base: ["ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceReport", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript"],
            expression: "(ActivityDefinition.useContext.value.ofType(CodeableConcept)) | (ActorDefinition.useContext.value.ofType(CodeableConcept)) | (CapabilityStatement.useContext.value.ofType(CodeableConcept)) | (ChargeItemDefinition.useContext.value.ofType(CodeableConcept)) | (Citation.useContext.value.ofType(CodeableConcept)) | (CodeSystem.useContext.value.ofType(CodeableConcept)) | (CompartmentDefinition.useContext.value.ofType(CodeableConcept)) | (ConceptMap.useContext.value.ofType(CodeableConcept)) | (ConditionDefinition.useContext.value.ofType(CodeableConcept)) | (EventDefinition.useContext.value.ofType(CodeableConcept)) | (Evidence.useContext.value.ofType(CodeableConcept)) | (EvidenceReport.useContext.value.ofType(CodeableConcept)) | (EvidenceVariable.useContext.value.ofType(CodeableConcept)) | (ExampleScenario.useContext.value.ofType(CodeableConcept)) | (GraphDefinition.useContext.value.ofType(CodeableConcept)) | (ImplementationGuide.useContext.value.ofType(CodeableConcept)) | (Library.useContext.value.ofType(CodeableConcept)) | (Measure.useContext.value.ofType(CodeableConcept)) | (MessageDefinition.useContext.value.ofType(CodeableConcept)) | (NamingSystem.useContext.value.ofType(CodeableConcept)) | (OperationDefinition.useContext.value.ofType(CodeableConcept)) | (PlanDefinition.useContext.value.ofType(CodeableConcept)) | (Questionnaire.useContext.value.ofType(CodeableConcept)) | (Requirements.useContext.value.ofType(CodeableConcept)) | (SearchParameter.useContext.value.ofType(CodeableConcept)) | (StructureDefinition.useContext.value.ofType(CodeableConcept)) | (StructureMap.useContext.value.ofType(CodeableConcept)) | (TerminologyCapabilities.useContext.value.ofType(CodeableConcept)) | (TestScript.useContext.value.ofType(CodeableConcept)) | (ValueSet.useContext.value.ofType(CodeableConcept))"
        }
    ],
    "substance-reference": [
        {
            name: "substance-reference",
            'type: r5:REFERENCE,
            base: ["Substance"],
            expression: "(Substance.ingredient.substance.ofType(Reference))"
        }
    ],
    "action": [
        {
            name: "action",
            'type: r5:TOKEN,
            base: ["Consent", "AuditEvent"],
            expression: "AuditEvent.action | Consent.provision.action"
        }
    ],
    "model": [
        {
            name: "model",
            'type: r5:STRING,
            base: ["Device"],
            expression: "Device.modelNumber"
        }
    ],
    "target-species": [
        {
            name: "target-species",
            'type: r5:TOKEN,
            base: ["AdministrableProductDefinition"],
            expression: "AdministrableProductDefinition.routeOfAdministration.targetSpecies.code"
        }
    ],
    "signer": [
        {
            name: "signer",
            'type: r5:REFERENCE,
            base: ["Contract"],
            expression: "Contract.signer.party"
        }
    ],
    "period": [
        {
            name: "period",
            'type: r5:DATE,
            base: ["Task", "Account", "Consent", "NamingSystem", "MeasureReport", "DocumentReference", "Composition"],
            expression: "Composition.event.period | DocumentReference.period | MeasureReport.period | NamingSystem.uniqueId.period | Consent.provision.period | Account.servicePeriod | Task.executionPeriod"
        }
    ],
    "morphology": [
        {
            name: "morphology",
            'type: r5:TOKEN,
            base: ["BodyStructure"],
            expression: "BodyStructure.morphology"
        }
    ],
    "practitioner": [
        {
            name: "practitioner",
            'type: r5:REFERENCE,
            base: ["Encounter", "PractitionerRole", "AppointmentResponse", "Person", "Appointment"],
            expression: "Appointment.participant.actor.where(resolve() is Practitioner) | Person.link.target.where(resolve() is Practitioner) | AppointmentResponse.actor.where(resolve() is Practitioner) | PractitionerRole.practitioner | Encounter.participant.actor.where(resolve() is Practitioner)"
        }
    ],
    "classification": [
        {
            name: "classification",
            'type: r5:COMPOSITE,
            base: ["Citation"],
            expression: "Citation.classification"
        },
        {
            name: "classification",
            'type: r5:TOKEN,
            base: ["SubstanceDefinition", "MedicationKnowledge"],
            expression: "MedicationKnowledge.medicineClassification.classification | SubstanceDefinition.classification"
        }
    ],
    "payment-status": [
        {
            name: "payment-status",
            'type: r5:TOKEN,
            base: ["PaymentNotice"],
            expression: "PaymentNotice.paymentStatus"
        }
    ],
    "container-device": [
        {
            name: "container-device",
            'type: r5:REFERENCE,
            base: ["Specimen"],
            expression: "Specimen.container.device.where(resolve() is Device)"
        }
    ],
    "effect-reference": [
        {
            name: "effect-reference",
            'type: r5:REFERENCE,
            base: ["ClinicalUseDefinition"],
            expression: "ClinicalUseDefinition.undesirableEffect.symptomConditionEffect.reference"
        }
    ],
    "study-uid": [
        {
            name: "study-uid",
            'type: r5:TOKEN,
            base: ["ImagingSelection"],
            expression: "ImagingSelection.studyUid"
        }
    ],
    "additive": [
        {
            name: "additive",
            'type: r5:TOKEN,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.enteralFormula.additive.type.concept"
        }
    ],
    "system": [
        {
            name: "system",
            'type: r5:TOKEN,
            base: ["OperationDefinition"],
            expression: "OperationDefinition.system"
        }
    ],
    "supplement": [
        {
            name: "supplement",
            'type: r5:TOKEN,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.supplement.type.concept"
        }
    ],
    "security-service": [
        {
            name: "security-service",
            'type: r5:TOKEN,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.rest.security.service"
        }
    ],
    "biological": [
        {
            name: "biological",
            'type: r5:REFERENCE,
            base: ["PackagedProductDefinition"],
            expression: "PackagedProductDefinition.packaging.containedItem.item.reference"
        }
    ],
    "_source": [
        {
            name: "_source",
            'type: r5:URI,
            base: ["Resource"],
            expression: "Resource.meta.source"
        }
    ],
    "indication": [
        {
            name: "indication",
            'type: r5:TOKEN,
            base: ["ClinicalUseDefinition"],
            expression: "ClinicalUseDefinition.indication.diseaseSymptomProcedure.concept"
        }
    ],
    "status": [
        {
            name: "status",
            'type: r5:TOKEN,
            base: ["ImmunizationEvaluation", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "Appointment", "Task", "InventoryReport", "NutritionProduct", "DeviceAssociation", "EpisodeOfCare", "ClinicalUseDefinition", "Procedure", "ImagingSelection", "Medication", "CarePlan", "Location", "AdverseEvent", "DeviceRequest", "SupplyDelivery", "QuestionnaireResponse", "Claim", "DiagnosticReport", "DocumentReference", "VerificationResult", "Endpoint", "EnrollmentResponse", "DeviceUsage", "Transport", "SupplyRequest", "ResearchSubject", "FamilyMemberHistory", "List", "Composition", "Flag", "ManufacturedItemDefinition", "Communication", "ServiceRequest", "InventoryItem", "ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceReport", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MedicationKnowledge", "MessageDefinition", "NamingSystem", "ObservationDefinition", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "SpecimenDefinition", "StructureDefinition", "StructureMap", "SubscriptionTopic", "TerminologyCapabilities", "TestPlan", "TestScript", "Ingredient", "Encounter", "GenomicStudy", "MeasureReport", "AdministrableProductDefinition", "InsurancePlan", "Contract", "Specimen", "Substance", "CoverageEligibilityRequest", "ChargeItem", "ImagingStudy", "Immunization", "VisionPrescription", "ImmunizationRecommendation", "Permission", "CareTeam", "RequestOrchestration", "DetectedIssue", "Subscription", "ClaimResponse", "BiologicallyDerivedProductDispense", "EncounterHistory", "PaymentNotice", "EnrollmentRequest", "DeviceDispense", "ExplanationOfBenefit", "NutritionOrder", "Account", "Consent", "NutritionIntake", "PaymentReconciliation", "ClinicalImpression", "Observation", "GuidanceResponse", "TestReport", "ResearchStudy", "Device", "Coverage", "Invoice", "Slot", "RegulatedAuthorization", "CoverageEligibilityResponse", "MedicinalProductDefinition", "PackagedProductDefinition", "CommunicationRequest"],
            expression: "CommunicationRequest.status | PackagedProductDefinition.status | MedicinalProductDefinition.status | CoverageEligibilityResponse.status | RegulatedAuthorization.status | Slot.status | Invoice.status | Coverage.status | Device.status | ResearchStudy.status | TestReport.status | GuidanceResponse.status | Observation.status | ClinicalImpression.status | PaymentReconciliation.status | NutritionIntake.status | Consent.status | Account.status | NutritionOrder.status | ExplanationOfBenefit.status | DeviceDispense.status | EnrollmentRequest.status | PaymentNotice.status | EncounterHistory.status | BiologicallyDerivedProductDispense.status | ClaimResponse.status | Subscription.status | DetectedIssue.status | RequestOrchestration.status | CareTeam.status | Permission.status | ImmunizationRecommendation.recommendation.forecastStatus | VisionPrescription.status | Immunization.status | ImagingStudy.status | ChargeItem.status | CoverageEligibilityRequest.status | Substance.status | Specimen.status | Contract.status | InsurancePlan.status | AdministrableProductDefinition.status | MeasureReport.status | GenomicStudy.status | Encounter.status | Ingredient.status | ActivityDefinition.status | ActorDefinition.status | CapabilityStatement.status | ChargeItemDefinition.status | Citation.status | CodeSystem.status | CompartmentDefinition.status | ConceptMap.status | ConditionDefinition.status | EventDefinition.status | Evidence.status | EvidenceReport.status | EvidenceVariable.status | ExampleScenario.status | GraphDefinition.status | ImplementationGuide.status | Library.status | Measure.status | MedicationKnowledge.status | MessageDefinition.status | NamingSystem.status | ObservationDefinition.status | OperationDefinition.status | PlanDefinition.status | Questionnaire.status | Requirements.status | SearchParameter.status | SpecimenDefinition.status | StructureDefinition.status | StructureMap.status | SubscriptionTopic.status | TerminologyCapabilities.status | TestPlan.status | TestScript.status | ValueSet.status | InventoryItem.status | ServiceRequest.status | Communication.status | ManufacturedItemDefinition.status | Flag.status | Composition.status | List.status | FamilyMemberHistory.status | ResearchSubject.status | SupplyRequest.status | Transport.status | DeviceUsage.status | EnrollmentResponse.status | Endpoint.status | VerificationResult.status | DocumentReference.status | DiagnosticReport.status | Claim.status | QuestionnaireResponse.status | SupplyDelivery.status | DeviceRequest.status | AdverseEvent.status | Location.status | CarePlan.status | Medication.status | ImagingSelection.status | Procedure.status | ClinicalUseDefinition.status | EpisodeOfCare.status | DeviceAssociation.status | NutritionProduct.category | InventoryReport.status | Task.status | Appointment.status | MedicationAdministration.status | MedicationDispense.status | MedicationRequest.status | MedicationStatement.status | ImmunizationEvaluation.status"
        }

    ],
    "successor": [
        {
            name: "successor",
            'type: r5:REFERENCE,
            base: ["ActivityDefinition", "EventDefinition", "EvidenceVariable", "Library", "Measure", "PlanDefinition"],
            expression: "ActivityDefinition.relatedArtifact.where(type='successor').resource | EventDefinition.relatedArtifact.where(type='successor').resource | EvidenceVariable.relatedArtifact.where(type='successor').resource | Library.relatedArtifact.where(type='successor').resource | Measure.relatedArtifact.where(type='successor').resource | PlanDefinition.relatedArtifact.where(type='successor').resource"
        }

    ],
    "participant-function": [
        {
            name: "participant-function",
            'type: r5:TOKEN,
            base: ["Condition"],
            expression: "Condition.participant.function"
        }

    ],
    "combo-code-value-quantity": [
        {
            name: "combo-code-value-quantity",
            'type: r5:COMPOSITE,
            base: ["Observation"],
            expression: "Observation | Observation.component"
        }
    ],
    "study-design": [
        {
            name: "study-design",
            'type: r5:TOKEN,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.studyDesign"
        }
    ],
    "operational-status": [
        {
            name: "operational-status",
            'type: r5:TOKEN,
            base: ["Location"],
            expression: "Location.operationalStatus"
        }
    ],
    "part-of": [
        {
            name: "part-of",
            'type: r5:REFERENCE,
            base: ["CarePlan", "Procedure", "ResearchStudy", "Observation", "QuestionnaireResponse", "Task", "Encounter", "Communication"],
            expression: "Communication.partOf | Encounter.partOf | Task.partOf | QuestionnaireResponse.partOf | Observation.partOf | ResearchStudy.partOf | Procedure.partOf | CarePlan.partOf"
        }
    ],
    "start-date": [
        {
            name: "start-date",
            'type: r5:DATE,
            base: ["Goal"],
            expression: "(Goal.start.ofType(date))"
        }
    ],
    "occurrence": [
        {
            name: "occurrence",
            'type: r5:DATE,
            base: ["CommunicationRequest", "ServiceRequest", "ChargeItem"],
            expression: "ChargeItem.occurrence.ofType(dateTime) | ChargeItem.occurrence.ofType(Period) | ChargeItem.occurrence.ofType(Timing) | ServiceRequest.occurrence.ofType(dateTime) | ServiceRequest.occurrence.ofType(Period) | ServiceRequest.occurrence.ofType(Timing) | CommunicationRequest.occurrence.ofType(dateTime) | CommunicationRequest.occurrence.ofType(Period)"
        }
    ],
    "fhirversion": [
        {
            name: "fhirversion",
            'type: r5:TOKEN,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.fhirVersion"
        }
    ],
    "manufacturer": [
        {
            name: "manufacturer",
            'type: r5:STRING,
            base: ["Device"],
            expression: "Device.manufacturer"
        },
        {
            name: "manufacturer",
            'type: r5:REFERENCE,
            base: ["Immunization", "DeviceDefinition", "Ingredient"],
            expression: "Ingredient.manufacturer.manufacturer | DeviceDefinition.manufacturer | Immunization.manufacturer.reference"
        }
    ],
    "base-path": [
        {
            name: "base-path",
            'type: r5:TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.snapshot.element.base.path | StructureDefinition.differential.element.base.path"
        }
    ],
    "member": [
        {
            name: "member",
            'type: r5:REFERENCE,
            base: ["Group"],
            expression: "Group.member.entity"
        }
    ],
    "code-concept": [
        {
            name: "code-concept",
            'type: r5:TOKEN,
            base: ["ServiceRequest"],
            expression: "ServiceRequest.code.concept"
        }
    ],
    "outcome": [
        {
            name: "outcome",
            'type: r5:TOKEN,
            base: ["PaymentReconciliation", "AuditEvent", "CoverageEligibilityResponse", "ClaimResponse"],
            expression: "ClaimResponse.outcome | CoverageEligibilityResponse.outcome | AuditEvent.outcome.code | PaymentReconciliation.outcome"
        }
    ],
    "evidence-detail": [
        {
            name: "evidence-detail",
            'type: r5:REFERENCE,
            base: ["Condition"],
            expression: "Condition.evidence.reference"
        }
    ],
    "product": [
        {
            name: "product",
            'type: r5:REFERENCE,
            base: ["BiologicallyDerivedProductDispense", "ClinicalUseDefinition"],
            expression: "ClinicalUseDefinition.subject.where(resolve() is MedicinalProductDefinition) | BiologicallyDerivedProductDispense.product"
        }
    ],
    "focus-reference": [
        {
            name: "focus-reference",
            'type: r5:REFERENCE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.focus.reference"
        }
    ],
    "_security": [
        {
            name: "_security",
            'type: r5:TOKEN,
            base: ["Resource"],
            expression: "Resource.meta.security"
        }
    ],
    "_type": [
        {
            name: "_type",
            'type: r5:SPECIAL,
            base: ["Resource"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "url": [
        {
            name: "url",
            'type: r5:URI,
            base: ["ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceReport", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "ObservationDefinition", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "SpecimenDefinition", "StructureDefinition", "StructureMap", "SubscriptionTopic", "TerminologyCapabilities", "TestPlan", "TestScript", "Subscription", "Contract", "Device", "Composition"],
            expression: "Composition.url | Device.url | Contract.url | Subscription.endpoint | ActivityDefinition.url | ActorDefinition.url | CapabilityStatement.url | ChargeItemDefinition.url | Citation.url | CodeSystem.url | CompartmentDefinition.url | ConceptMap.url | ConditionDefinition.url | EventDefinition.url | Evidence.url | EvidenceReport.url | EvidenceVariable.url | ExampleScenario.url | GraphDefinition.url | ImplementationGuide.url | Library.url | Measure.url | MessageDefinition.url | NamingSystem.url | ObservationDefinition.url | OperationDefinition.url | PlanDefinition.url | Questionnaire.url | Requirements.url | SearchParameter.url | SpecimenDefinition.url | StructureDefinition.url | StructureMap.url | SubscriptionTopic.url | TerminologyCapabilities.url | TestPlan.url | TestScript.url | ValueSet.url"
        }
    ],
    "end-date": [
        {
            name: "end-date",
            'type: r5:DATE,
            base: ["Encounter"],
            expression: "Encounter.actualPeriod.end"
        }
    ],
    "disposition": [
        {
            name: "disposition",
            'type: r5:STRING,
            base: ["ClaimResponse", "PaymentReconciliation", "CoverageEligibilityResponse", "ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.disposition | CoverageEligibilityResponse.disposition | PaymentReconciliation.disposition | ClaimResponse.disposition"
        }

    ],
    "lifecycle-status": [
        {
            name: "lifecycle-status",
            'type: r5:TOKEN,
            base: ["Goal"],
            expression: "Goal.lifecycleStatus"
        }
    ],
    "seriousness": [
        {
            name: "seriousness",
            'type: r5:TOKEN,
            base: ["AdverseEvent"],
            expression: "AdverseEvent.seriousness"
        }
    ],
    "reason-reference": [
        {
            name: "reason-reference",
            'type: r5:REFERENCE,
            base: ["Immunization", "EpisodeOfCare", "Procedure", "Appointment", "Encounter"],
            expression: "Encounter.reason.value.reference | Appointment.reason.reference | Procedure.reason.reference | EpisodeOfCare.reason.value.reference | Immunization.reason.reference"
        }
    ],
    "report": [
        {
            name: "report",
            'type: r5:REFERENCE,
            base: ["Procedure"],
            expression: "Procedure.report"
        }
    ],
    "paymentby-party": [
        {
            name: "paymentby-party",
            'type: r5:REFERENCE,
            base: ["Coverage"],
            expression: "Coverage.paymentBy.party"
        }
    ],
    "entity": [
        {
            name: "entity",
            'type: r5:REFERENCE,
            base: ["AuditEvent", "Provenance"],
            expression: "Provenance.entity.what | AuditEvent.entity.what"
        }
    ],
    "requesting-organization": [
        {
            name: "requesting-organization",
            'type: r5:REFERENCE,
            base: ["ChargeItem"],
            expression: "ChargeItem.requestingOrganization"
        }
    ]
};
//Number of search params in FHIR_IG_SEARCH_PARAMS_3  = 100
final readonly & map<r5:FHIRSearchParameterDefinition[]> FHIR_IG_SEARCH_PARAMS_3 = {
    "evaluated-resource": [
        {
            name: "evaluated-resource",
            'type: r5:REFERENCE,
            base: ["MeasureReport"],
            expression: "MeasureReport.evaluatedResource"
        }
    ],
    "_language": [
        {
            name: "_language",
            'type: r5:TOKEN,
            base: ["Resource"],
            expression: "Resource.language"
        }

    ],
    "manufacture-date": [
        {
            name: "manufacture-date",
            'type: r5:DATE,
            base: ["Device"],
            expression: "Device.manufactureDate"
        }
    ],
    "instance": [
        {
            name: "instance",
            'type: r5:TOKEN,
            base: ["ImagingStudy", "OperationDefinition"],
            expression: "OperationDefinition.instance | ImagingStudy.series.instance.uid"
        }
    ],
    "entity-role": [
        {
            name: "entity-role",
            'type: r5:TOKEN,
            base: ["AuditEvent"],
            expression: "AuditEvent.entity.role"
        }
    ],
    "use": [
        {
            name: "use",
            'type: r5:TOKEN,
            base: ["ClaimResponse", "Claim"],
            expression: "Claim.use | ClaimResponse.use"
        }
    ],
    "subject": [
        {
            name: "subject",
            'type: r5:REFERENCE,
            base: ["RiskAssessment", "Observation", "ServiceRequest", "Contract", "MolecularSequence", "List", "ResearchSubject", "MedicationDispense", "QuestionnaireResponse", "RequestOrchestration", "DocumentReference", "CommunicationRequest", "DiagnosticReport", "GenomicStudy", "CareTeam", "Communication", "Condition", "NutritionIntake", "Goal", "Encounter", "Invoice", "Appointment", "ClinicalUseDefinition", "MedicationStatement", "EncounterHistory", "Consent", "ChargeItem", "DetectedIssue", "Specimen", "Procedure", "SupplyRequest", "EnrollmentRequest", "ClinicalImpression", "NutritionOrder", "Basic", "RegulatedAuthorization", "AdverseEvent", "Task", "CarePlan", "MeasureReport", "MedicationAdministration", "ImagingStudy", "Composition", "InventoryItem", "DeviceRequest", "DeviceDispense", "Flag", "MedicationRequest", "Account", "DeviceAssociation", "ImagingSelection", "GuidanceResponse"],
            expression: "GuidanceResponse.subject | ImagingSelection.subject | DeviceAssociation.subject.where(resolve() is Patient) | Account.subject | MedicationRequest.subject | Flag.subject | DeviceDispense.subject | DeviceRequest.subject | InventoryItem.instance.subject | Composition.subject | ImagingStudy.subject | MedicationAdministration.subject | MeasureReport.subject | CarePlan.subject | Task.for | AdverseEvent.subject | RegulatedAuthorization.subject | Basic.subject | NutritionOrder.subject | ClinicalImpression.subject | EnrollmentRequest.candidate | SupplyRequest.deliverTo | Procedure.subject | Specimen.subject | DetectedIssue.subject | ChargeItem.subject | Consent.subject | EncounterHistory.subject | MedicationStatement.subject | ClinicalUseDefinition.subject | Appointment.subject | Invoice.subject | Encounter.subject | Goal.subject | NutritionIntake.subject | Condition.subject | Communication.subject | CareTeam.subject | GenomicStudy.subject | DiagnosticReport.subject | CommunicationRequest.subject | DocumentReference.subject | RequestOrchestration.subject | QuestionnaireResponse.subject | MedicationDispense.subject | ResearchSubject.subject | List.subject | MolecularSequence.subject | Contract.subject | ServiceRequest.subject | Observation.subject | RiskAssessment.subject"
        }
    ],
    "value-date": [
        {
            name: "value-date",
            'type: r5:DATE,
            base: ["Observation"],
            expression: "Observation.value.ofType(dateTime) | Observation.value.ofType(Period)"
        }
    ],
    "target-group-system": [
        {
            name: "target-group-system",
            'type: r5:REFERENCE,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.target"
        }
    ],
    "testscript-capability": [
        {
            name: "testscript-capability",
            'type: r5:STRING,
            base: ["TestScript"],
            expression: "TestScript.metadata.capability.description"
        }

    ],
    "mode": [
        {
            name: "mode",
            'type: r5:TOKEN,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.rest.mode"
        }
    ],
    "recruitment-target": [
        {
            name: "recruitment-target",
            'type: r5:NUMBER,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.recruitment.targetNumber"
        }
    ],
    "abatement-date": [
        {
            name: "abatement-date",
            'type: r5:DATE,
            base: ["Condition"],
            expression: "Condition.abatement.ofType(dateTime) | Condition.abatement.ofType(Period)"
        }
    ],
    "datetime": [
        {
            name: "datetime",
            'type: r5:DATE,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.dateTime"
        }
    ],
    "factor-override": [
        {
            name: "factor-override",
            'type: r5:NUMBER,
            base: ["ChargeItem"],
            expression: "ChargeItem.totalPriceComponent.factor"
        }
    ],
    "function": [
        {
            name: "function",
            'type: r5:TOKEN,
            base: ["Ingredient"],
            expression: "Ingredient.function"
        }

    ],
    "abatement-age": [
        {
            name: "abatement-age",
            'type: r5:QUANTITY,
            base: ["Condition"],
            expression: "Condition.abatement.ofType(Age) | Condition.abatement.ofType(Range)"
        }
    ],
    "modified": [
        {
            name: "modified",
            'type: r5:DATE,
            base: ["Task"],
            expression: "Task.lastModified"
        }
    ],
    "claim": [
        {
            name: "claim",
            'type: r5:REFERENCE,
            base: ["ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.claim"
        }
    ],
    "communication": [
        {
            name: "communication",
            'type: r5:TOKEN,
            base: ["PractitionerRole", "HealthcareService", "Practitioner"],
            expression: "Practitioner.communication.language | HealthcareService.communication | PractitionerRole.communication"
        }
    ],
    "combo-code-value-concept": [
        {
            name: "combo-code-value-concept",
            'type: r5:COMPOSITE,
            base: ["Observation"],
            expression: "Observation | Observation.component"
        }
    ],
    "class-type": [
        {
            name: "class-type",
            'type: r5:TOKEN,
            base: ["Coverage"],
            expression: "Coverage.class.type"
        }
    ],
    "partof": [
        {
            name: "partof",
            'type: r5:REFERENCE,
            base: ["Organization", "Location"],
            expression: "Location.partOf | Organization.partOf"
        }
    ],
    "combo-date": [
        {
            name: "combo-date",
            'type: r5:DATE,
            base: ["MedicationRequest"],
            expression: "MedicationRequest.dosageInstruction.timing.event | (MedicationRequest.dosageInstruction.timing.repeat.bounds.ofType(Period))"
        }
    ],
    "author": [
        {
            name: "author",
            'type: r5:REFERENCE,
            base: ["Composition", "DetectedIssue", "Flag", "Basic", "QuestionnaireResponse", "DocumentReference", "Linkage", "RequestOrchestration", "MessageHeader"],
            expression: "MessageHeader.author | RequestOrchestration.author | Linkage.author | DocumentReference.author | QuestionnaireResponse.author | Basic.author | Flag.author | DetectedIssue.author | Composition.author"
        }
    ],
    "format-uri": [
        {
            name: "format-uri",
            'type: r5:URI,
            base: ["DocumentReference"],
            expression: "(DocumentReference.content.profile.value.ofType(uri))"
        }
    ],
    "product-classification": [
        {
            name: "product-classification",
            'type: r5:TOKEN,
            base: ["MedicinalProductDefinition"],
            expression: "MedicinalProductDefinition.classification"
        }
    ],
    "entry": [
        {
            name: "entry",
            'type: r5:REFERENCE,
            base: ["Composition"],
            expression: "Composition.section.entry"
        }
    ],
    "condition": [
        {
            name: "condition",
            'type: r5:REFERENCE,
            base: ["CarePlan", "RiskAssessment"],
            expression: "RiskAssessment.condition | CarePlan.addresses.reference"
        },
        {
            name: "condition",
            'type: r5:TOKEN,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.condition"
        }
    ],
    "monograph": [
        {
            name: "monograph",
            'type: r5:REFERENCE,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.monograph.source"
        }
    ],
    "requested-period": [
        {
            name: "requested-period",
            'type: r5:DATE,
            base: ["Appointment"],
            expression: "requestedPeriod"
        }
    ],
    "service-provider": [
        {
            name: "service-provider",
            'type: r5:REFERENCE,
            base: ["Encounter"],
            expression: "Encounter.serviceProvider"
        }
    ],
    "_id": [
        {
            name: "_id",
            'type: r5:TOKEN,
            base: ["Resource"],
            expression: "Resource.id"
        }
    ],
    "relatedaccount": [
        {
            name: "relatedaccount",
            'type: r5:REFERENCE,
            base: ["Account"],
            expression: "Account.relatedAccount.account"
        }
    ],
    "last-date": [
        {
            name: "last-date",
            'type: r5:DATE,
            base: ["AllergyIntolerance"],
            expression: "AllergyIntolerance.lastOccurrence"
        }
    ],
    "combo-data-absent-reason": [
        {
            name: "combo-data-absent-reason",
            'type: r5:TOKEN,
            base: ["Observation"],
            expression: "Observation.dataAbsentReason | Observation.component.dataAbsentReason"
        }
    ],
    "target-scope": [
        {
            name: "target-scope",
            'type: r5:REFERENCE,
            base: ["ConceptMap"],
            expression: "(ConceptMap.targetScope as canonical)"
        }
    ],
    "code": [
        {
            name: "code",
            'type: r5:TOKEN,
            base: ["OperationDefinition", "Substance", "FormularyItem", "SubstanceDefinition", "MedicationKnowledge", "InventoryItem", "ObservationDefinition", "SearchParameter", "Device", "CompartmentDefinition", "NutritionProduct", "DeviceDispense", "BiologicallyDerivedProduct", "MessageHeader", "AdverseEvent", "AllergyIntolerance", "AuditEvent", "Basic", "ChargeItem", "Condition", "DetectedIssue", "DeviceRequest", "DiagnosticReport", "FamilyMemberHistory", "ImagingSelection", "List", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "NutritionIntake", "Observation", "Procedure", "RequestOrchestration", "Task", "Group"],
            expression: "Group.code | AdverseEvent.code | AllergyIntolerance.code | AllergyIntolerance.reaction.substance | AuditEvent.code | Basic.code | ChargeItem.code | Condition.code | DetectedIssue.code | DeviceRequest.code.concept | DiagnosticReport.code | FamilyMemberHistory.condition.code | ImagingSelection.status | List.code | Medication.code | MedicationAdministration.medication.concept | MedicationDispense.medication.concept | MedicationRequest.medication.concept | MedicationStatement.medication.concept | NutritionIntake.code | Observation.code | Procedure.code | RequestOrchestration.code | Task.code | MessageHeader.response.code | BiologicallyDerivedProduct.productCode | DeviceDispense.device.concept | NutritionProduct.code | CompartmentDefinition.code | Device.definition.concept | SearchParameter.code | ObservationDefinition.code | InventoryItem.code | MedicationKnowledge.code | SubstanceDefinition.code.code | FormularyItem.code | Substance.code.concept | (Substance.ingredient.substance.ofType(CodeableConcept)) | OperationDefinition.code"
        }
    ],
    "excluded_structure": [
        {
            name: "excluded_structure",
            'type: r5:TOKEN,
            base: ["BodyStructure"],
            expression: "BodyStructure.excludedStructure.structure"
        }
    ],
    "participant-type": [
        {
            name: "participant-type",
            'type: r5:TOKEN,
            base: ["Encounter"],
            expression: "Encounter.participant.type"
        }
    ],
    "_in": [
        {
            name: "_in",
            'type: r5:REFERENCE,
            base: ["Resource"],
            expression: "Resource.id"
        }
    ],
    "slot": [
        {
            name: "slot",
            'type: r5:REFERENCE,
            base: ["Appointment"],
            expression: "Appointment.slot"
        }
    ],
    "accession": [
        {
            name: "accession",
            'type: r5:TOKEN,
            base: ["Specimen"],
            expression: "Specimen.accessionIdentifier"
        }
    ],
    "media": [
        {
            name: "media",
            'type: r5:REFERENCE,
            base: ["DiagnosticReport"],
            expression: "DiagnosticReport.media.link"
        }
    ],
    "composed-of": [
        {
            name: "composed-of",
            'type: r5:REFERENCE,
            base: ["ActivityDefinition", "EventDefinition", "EvidenceVariable", "Library", "Measure", "PlanDefinition"],
            expression: "ActivityDefinition.relatedArtifact.where(type='composed-of').resource | EventDefinition.relatedArtifact.where(type='composed-of').resource | EvidenceVariable.relatedArtifact.where(type='composed-of').resource | Library.relatedArtifact.where(type='composed-of').resource | Measure.relatedArtifact.where(type='composed-of').resource | PlanDefinition.relatedArtifact.where(type='composed-of').resource"
        }
    ],
    "effective": [
        {
            name: "effective",
            'type: r5:DATE,
            base: ["SubscriptionTopic", "MedicationStatement", "ActivityDefinition", "ChargeItemDefinition", "Citation", "ConceptMap", "EventDefinition", "Library", "Measure", "NamingSystem", "PlanDefinition", "Questionnaire"],
            expression: "ActivityDefinition.effectivePeriod | ChargeItemDefinition.applicability.effectivePeriod | Citation.effectivePeriod | CodeSystem.effectivePeriod | ConceptMap.effectivePeriod | EventDefinition.effectivePeriod | Library.effectivePeriod | Measure.effectivePeriod | NamingSystem.effectivePeriod | PlanDefinition.effectivePeriod | Questionnaire.effectivePeriod | ValueSet.effectivePeriod | MedicationStatement.effective.ofType(dateTime) | MedicationStatement.effective.ofType(Period) | SubscriptionTopic.effectivePeriod"
        }
    ],
    "context-quantity": [
        {
            name: "context-quantity",
            'type: r5:QUANTITY,
            base: ["ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceReport", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript"],
            expression: "(ActivityDefinition.useContext.value.ofType(Quantity)) | (ActivityDefinition.useContext.value.ofType(Range)) | (ActorDefinition.useContext.value.ofType(Quantity)) | (ActorDefinition.useContext.value.ofType(Range)) | (CapabilityStatement.useContext.value.ofType(Quantity)) | (CapabilityStatement.useContext.value.ofType(Range)) | (ChargeItemDefinition.useContext.value.ofType(Quantity)) | (ChargeItemDefinition.useContext.value.ofType(Range)) | (Citation.useContext.value.ofType(Quantity)) | (Citation.useContext.value.ofType(Range)) | (CodeSystem.useContext.value.ofType(Quantity)) | (CodeSystem.useContext.value.ofType(Range)) | (CompartmentDefinition.useContext.value.ofType(Quantity)) | (CompartmentDefinition.useContext.value.ofType(Range)) | (ConceptMap.useContext.value.ofType(Quantity)) | (ConceptMap.useContext.value.ofType(Range)) | (ConditionDefinition.useContext.value.ofType(Quantity)) | (ConditionDefinition.useContext.value.ofType(Range)) | (EventDefinition.useContext.value.ofType(Quantity)) | (EventDefinition.useContext.value.ofType(Range)) | (Evidence.useContext.value.ofType(Quantity)) | (Evidence.useContext.value.ofType(Range)) | (EvidenceReport.useContext.value.ofType(Quantity)) | (EvidenceReport.useContext.value.ofType(Range)) | (EvidenceVariable.useContext.value.ofType(Quantity)) | (EvidenceVariable.useContext.value.ofType(Range)) | (ExampleScenario.useContext.value.ofType(Quantity)) | (ExampleScenario.useContext.value.ofType(Range)) | (GraphDefinition.useContext.value.ofType(Quantity)) | (GraphDefinition.useContext.value.ofType(Range)) | (ImplementationGuide.useContext.value.ofType(Quantity)) | (ImplementationGuide.useContext.value.ofType(Range)) | (Library.useContext.value.ofType(Quantity)) | (Library.useContext.value.ofType(Range)) | (Measure.useContext.value.ofType(Quantity)) | (Measure.useContext.value.ofType(Range)) | (MessageDefinition.useContext.value.ofType(Quantity)) | (MessageDefinition.useContext.value.ofType(Range)) | (NamingSystem.useContext.value.ofType(Quantity)) | (NamingSystem.useContext.value.ofType(Range)) | (OperationDefinition.useContext.value.ofType(Quantity)) | (OperationDefinition.useContext.value.ofType(Range)) | (PlanDefinition.useContext.value.ofType(Quantity)) | (PlanDefinition.useContext.value.ofType(Range)) | (Questionnaire.useContext.value.ofType(Quantity)) | (Questionnaire.useContext.value.ofType(Range)) | (Requirements.useContext.value.ofType(Quantity)) | (Requirements.useContext.value.ofType(Range)) | (SearchParameter.useContext.value.ofType(Quantity)) | (SearchParameter.useContext.value.ofType(Range)) | (StructureDefinition.useContext.value.ofType(Quantity)) | (StructureDefinition.useContext.value.ofType(Range)) | (StructureMap.useContext.value.ofType(Quantity)) | (StructureMap.useContext.value.ofType(Range)) | (TerminologyCapabilities.useContext.value.ofType(Quantity)) | (TerminologyCapabilities.useContext.value.ofType(Range)) | (TestScript.useContext.value.ofType(Quantity)) | (TestScript.useContext.value.ofType(Range)) | (ValueSet.useContext.value.ofType(Quantity)) | (ValueSet.useContext.value.ofType(Range))"
        }
    ],
    "offered-in": [
        {
            name: "offered-in",
            'type: r5:REFERENCE,
            base: ["HealthcareService"],
            expression: "HealthcareService.offeredIn"
        }
    ],
    "packaging-cost": [
        {
            name: "packaging-cost",
            'type: r5:QUANTITY,
            base: ["MedicationKnowledge"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "component-value-reference": [
        {
            name: "component-value-reference",
            'type: r5:REFERENCE,
            base: ["Observation"],
            expression: "Observation.component.value.ofType(Reference)"
        }
    ],
    "source-group-system": [
        {
            name: "source-group-system",
            'type: r5:REFERENCE,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.source"
        }
    ],
    "custodian": [
        {
            name: "custodian",
            'type: r5:REFERENCE,
            base: ["CarePlan", "DocumentReference"],
            expression: "DocumentReference.custodian | CarePlan.custodian"
        }
    ],
    "service-type": [
        {
            name: "service-type",
            'type: r5:TOKEN,
            base: ["Slot", "HealthcareService", "Schedule", "Appointment"],
            expression: "Appointment.serviceType.concept | Schedule.serviceType.concept | HealthcareService.type | Slot.serviceType.concept"
        }
    ],
    "mapping-property": [
        {
            name: "mapping-property",
            'type: r5:URI,
            base: ["ConceptMap"],
            expression: "ConceptMap.property.uri"
        }
    ],
    "medication": [
        {
            name: "medication",
            'type: r5:REFERENCE,
            base: ["PackagedProductDefinition", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement"],
            expression: "MedicationAdministration.medication.reference | MedicationDispense.medication.reference | MedicationRequest.medication.reference | MedicationStatement.medication.reference | PackagedProductDefinition.packaging.containedItem.item.reference"
        }
    ],
    "authored-on": [
        {
            name: "authored-on",
            'type: r5:DATE,
            base: ["DeviceRequest", "Task"],
            expression: "Task.authoredOn | DeviceRequest.authoredOn"
        }
    ],
    "objective-description": [
        {
            name: "objective-description",
            'type: r5:STRING,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.objective.description"
        }
    ],
    "performer-type": [
        {
            name: "performer-type",
            'type: r5:TOKEN,
            base: ["ServiceRequest"],
            expression: "ServiceRequest.performerType"
        }
    ],
    "requestor": [
        {
            name: "requestor",
            'type: r5:REFERENCE,
            base: ["CoverageEligibilityResponse", "ClaimResponse", "PaymentReconciliation"],
            expression: "PaymentReconciliation.requestor | ClaimResponse.requestor | CoverageEligibilityResponse.requestor"
        }
    ],
    "_filter": [
        {
            name: "_filter",
            'type: r5:SPECIAL,
            base: ["Resource"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "marketingauthorizationholder": [
        {
            name: "marketingauthorizationholder",
            'type: r5:REFERENCE,
            base: ["Medication"],
            expression: "Medication.marketingAuthorizationHolder"
        }
    ],
    "_has": [
        {
            name: "_has",
            'type: r5:SPECIAL,
            base: ["Resource"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "address-use": [
        {
            name: "address-use",
            'type: r5:TOKEN,
            base: ["Location", "InsurancePlan", "Patient", "Person", "Practitioner", "RelatedPerson", "Organization"],
            expression: "Organization.contact.address.use | Patient.address.use | Person.address.use | Practitioner.address.use | RelatedPerson.address.use | InsurancePlan.contact.address.use | Location.address.use"
        }
    ],
    "implicated": [
        {
            name: "implicated",
            'type: r5:REFERENCE,
            base: ["DetectedIssue"],
            expression: "DetectedIssue.implicated"
        }
    ],
    "biological-source-event": [
        {
            name: "biological-source-event",
            'type: r5:TOKEN,
            base: ["BiologicallyDerivedProduct", "Device"],
            expression: "Device.biologicalSourceEvent | BiologicallyDerivedProduct.biologicalSourceEvent"
        }

    ],
    "participating-organization": [
        {
            name: "participating-organization",
            'type: r5:REFERENCE,
            base: ["OrganizationAffiliation"],
            expression: "OrganizationAffiliation.participatingOrganization"
        }
    ],
    "recruitment-actual": [
        {
            name: "recruitment-actual",
            'type: r5:NUMBER,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.recruitment.actualNumber"
        }
    ],
    "item-code": [
        {
            name: "item-code",
            'type: r5:TOKEN,
            base: ["Questionnaire"],
            expression: "Questionnaire.item.code"
        }
    ],
    "authored": [
        {
            name: "authored",
            'type: r5:DATE,
            base: ["RequestOrchestration", "CommunicationRequest", "ServiceRequest", "QuestionnaireResponse"],
            expression: "QuestionnaireResponse.authored | ServiceRequest.authoredOn | CommunicationRequest.authoredOn | RequestOrchestration.authoredOn"
        }
    ],
    "reason": [
        {
            name: "reason",
            'type: r5:TOKEN,
            base: ["ImagingStudy"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "specialty": [
        {
            name: "specialty",
            'type: r5:TOKEN,
            base: ["Slot", "HealthcareService", "OrganizationAffiliation", "PractitionerRole", "Schedule", "Appointment"],
            expression: "Appointment.specialty | Schedule.specialty | PractitionerRole.specialty | OrganizationAffiliation.specialty | HealthcareService.specialty | Slot.specialty"
        }
    ],
    "deceased": [
        {
            name: "deceased",
            'type: r5:TOKEN,
            base: ["Practitioner", "Patient", "Person"],
            expression: "Person.deceased.exists() and Person.deceased != false | Patient.deceased.exists() and Patient.deceased != false | Practitioner.deceased.exists() and Practitioner.deceased != false"
        }
    ],
    "ext-context-type": [
        {
            name: "ext-context-type",
            'type: r5:TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.context.type"
        }
    ],
    "grantee": [
        {
            name: "grantee",
            'type: r5:REFERENCE,
            base: ["Consent"],
            expression: "Consent.grantee"
        }
    ],
    "clinical-status": [
        {
            name: "clinical-status",
            'type: r5:TOKEN,
            base: ["AllergyIntolerance", "Condition"],
            expression: "Condition.clinicalStatus | AllergyIntolerance.clinicalStatus"
        }
    ],
    "content-level": [
        {
            name: "content-level",
            'type: r5:TOKEN,
            base: ["Subscription"],
            expression: "Subscription.content"
        }
    ],
    "address-country": [
        {
            name: "address-country",
            'type: r5:STRING,
            base: ["Organization", "InsurancePlan", "Patient", "Person", "Practitioner", "RelatedPerson", "Location"],
            expression: "Location.address.country | Patient.address.country | Person.address.country | Practitioner.address.country | RelatedPerson.address.country | InsurancePlan.contact.address.country | Organization.contact.address.country"
        }
    ],
    "ingredient-code": [
        {
            name: "ingredient-code",
            'type: r5:TOKEN,
            base: ["Medication", "MedicationKnowledge"],
            expression: "MedicationKnowledge.definitional.ingredient.item.concept | Medication.ingredient.item.concept"
        }
    ],
    "packaging-cost-concept": [
        {
            name: "packaging-cost-concept",
            'type: r5:TOKEN,
            base: ["MedicationKnowledge"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "source-cost": [
        {
            name: "source-cost",
            'type: r5:TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.cost.source"
        }
    ],
    "achievement-status": [
        {
            name: "achievement-status",
            'type: r5:TOKEN,
            base: ["Goal"],
            expression: "Goal.achievementStatus"
        }
    ],
    "detail-udi": [
        {
            name: "detail-udi",
            'type: r5:REFERENCE,
            base: ["ExplanationOfBenefit", "Claim"],
            expression: "Claim.item.detail.udi | ExplanationOfBenefit.item.detail.udi"
        }
    ],
    "supporting-info": [
        {
            name: "supporting-info",
            'type: r5:REFERENCE,
            base: ["Appointment", "ClinicalImpression"],
            expression: "ClinicalImpression.supportingInfo | Appointment.supportingInformation"
        }
    ],
    "expiry": [
        {
            name: "expiry",
            'type: r5:DATE,
            base: ["Substance"],
            expression: "Substance.expiry"
        }
    ],
    "special-arrangement": [
        {
            name: "special-arrangement",
            'type: r5:TOKEN,
            base: ["Encounter"],
            expression: "Encounter.specialArrangement"
        }
    ],
    "section-code-text": [
        {
            name: "section-code-text",
            'type: r5:COMPOSITE,
            base: ["Composition"],
            expression: "Composition.section"
        }

    ],
    "requester": [
        {
            name: "requester",
            'type: r5:REFERENCE,
            base: ["CommunicationRequest", "Task", "MedicationRequest", "ServiceRequest", "SupplyRequest", "DeviceRequest"],
            expression: "DeviceRequest.requester | SupplyRequest.requester | ServiceRequest.requester | MedicationRequest.requester | Task.requester | CommunicationRequest.requester"
        }
    ],
    "udi-di": [
        {
            name: "udi-di",
            'type: r5:STRING,
            base: ["Device"],
            expression: "Device.udiCarrier.deviceIdentifier"
        }

    ],
    "progress-status-state-actual": [
        {
            name: "progress-status-state-actual",
            'type: r5:COMPOSITE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.progressStatus"
        }
    ],
    "diagnosis-code": [
        {
            name: "diagnosis-code",
            'type: r5:TOKEN,
            base: ["Encounter", "EpisodeOfCare"],
            expression: "EpisodeOfCare.diagnosis.condition.concept | Encounter.diagnosis.condition.concept"
        }
    ],
    "receiver": [
        {
            name: "receiver",
            'type: r5:REFERENCE,
            base: ["MessageHeader", "MedicationDispense", "SupplyDelivery"],
            expression: "SupplyDelivery.receiver | MedicationDispense.receiver | MessageHeader.destination.receiver"
        }
    ],
    "datewritten": [
        {
            name: "datewritten",
            'type: r5:DATE,
            base: ["VisionPrescription"],
            expression: "VisionPrescription.dateWritten"
        }
    ],
    "received": [
        {
            name: "received",
            'type: r5:DATE,
            base: ["Communication"],
            expression: "Communication.received"
        }
    ],
    "relatedperson": [
        {
            name: "relatedperson",
            'type: r5:REFERENCE,
            base: ["Person"],
            expression: "Person.link.target.where(resolve() is RelatedPerson)"
        }

    ],
    "format-code": [
        {
            name: "format-code",
            'type: r5:TOKEN,
            base: ["DocumentReference"],
            expression: "(DocumentReference.content.profile.value.ofType(Coding))"
        }

    ],
    "manifestation-code": [
        {
            name: "manifestation-code",
            'type: r5:TOKEN,
            base: ["AllergyIntolerance"],
            expression: "AllergyIntolerance.reaction.manifestation.concept"
        }
    ],
    "target-disease": [
        {
            name: "target-disease",
            'type: r5:TOKEN,
            base: ["Immunization", "ImmunizationRecommendation", "ImmunizationEvaluation"],
            expression: "ImmunizationEvaluation.targetDisease | ImmunizationRecommendation.recommendation.targetDisease | Immunization.protocolApplied.targetDisease"
        }
    ],
    "device": [
        {
            name: "device",
            'type: r5:REFERENCE,
            base: ["AdministrableProductDefinition", "DeviceMetric", "DeviceAssociation", "MedicationAdministration", "Observation", "DeviceRequest", "PackagedProductDefinition"],
            expression: "PackagedProductDefinition.packaging.containedItem.item.reference | DeviceRequest.code.reference | Observation.device | MedicationAdministration.device.reference | DeviceAssociation.device | DeviceMetric.device | AdministrableProductDefinition.device"
        },
        {
            name: "device",
            'type: r5:TOKEN,
            base: ["DeviceUsage"],
            expression: "DeviceUsage.device.concept"
        }
    ],
    "dicom-class": [
        {
            name: "dicom-class",
            'type: r5:TOKEN,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.series.instance.sopClass"
        }
    ],
    "activity": [
        {
            name: "activity",
            'type: r5:TOKEN,
            base: ["Provenance"],
            expression: "Provenance.activity"
        }
    ]

};
//Number of search params in FHIR_IG_SEARCH_PARAMS_4  = 100
final readonly & map<r5:FHIRSearchParameterDefinition[]> FHIR_IG_SEARCH_PARAMS_4 = {
    "subject-status": [
        {
            name: "subject-status",
            'type: r5:TOKEN,
            base: ["Encounter"],
            expression: "Encounter.subjectStatus"
        }
    ],
    "jurisdiction": [
        {
            name: "jurisdiction",
            'type: r5:TOKEN,
            base: ["ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "ConceptMap", "ConditionDefinition", "EventDefinition", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript"],
            expression: "ActivityDefinition.jurisdiction | ActorDefinition.jurisdiction | CapabilityStatement.jurisdiction | ChargeItemDefinition.jurisdiction | Citation.jurisdiction | CodeSystem.jurisdiction | ConceptMap.jurisdiction | ConditionDefinition.jurisdiction | EventDefinition.jurisdiction | ExampleScenario.jurisdiction | GraphDefinition.jurisdiction | ImplementationGuide.jurisdiction | Library.jurisdiction | Measure.jurisdiction | MessageDefinition.jurisdiction | NamingSystem.jurisdiction | OperationDefinition.jurisdiction | PlanDefinition.jurisdiction | Questionnaire.jurisdiction | Requirements.jurisdiction | SearchParameter.jurisdiction | StructureDefinition.jurisdiction | StructureMap.jurisdiction | TerminologyCapabilities.jurisdiction | TestScript.jurisdiction | ValueSet.jurisdiction"
        }
    ],
    "global": [
        {
            name: "global",
            'type: r5:REFERENCE,
            base: ["ImplementationGuide"],
            expression: "ImplementationGuide.global.profile"
        }
    ],
    "predecessor": [
        {
            name: "predecessor",
            'type: r5:REFERENCE,
            base: ["ActivityDefinition", "ConceptMap", "EventDefinition", "EvidenceVariable", "Library", "Measure", "NamingSystem", "PlanDefinition"],
            expression: "ActivityDefinition.relatedArtifact.where(type='predecessor').resource | CodeSystem.relatedArtifact.where(type='predecessor').resource | ConceptMap.relatedArtifact.where(type='predecessor').resource | EventDefinition.relatedArtifact.where(type='predecessor').resource | EvidenceVariable.relatedArtifact.where(type='predecessor').resource | Library.relatedArtifact.where(type='predecessor').resource | Measure.relatedArtifact.where(type='predecessor').resource | NamingSystem.relatedArtifact.where(type='predecessor').resource | PlanDefinition.relatedArtifact.where(type='predecessor').resource | ValueSet.relatedArtifact.where(type='predecessor').resource"
        }

    ],
    "value-reference": [
        {
            name: "value-reference",
            'type: r5:REFERENCE,
            base: ["Observation"],
            expression: "Observation.value.ofType(Reference)"
        }
    ],
    "endpoint": [
        {
            name: "endpoint",
            'type: r5:REFERENCE,
            base: ["PractitionerRole", "Location", "OrganizationAffiliation", "ImagingStudy", "Organization", "HealthcareService", "InsurancePlan"],
            expression: "InsurancePlan.endpoint | HealthcareService.endpoint | Organization.endpoint | ImagingStudy.endpoint | ImagingStudy.series.endpoint | OrganizationAffiliation.endpoint | Location.endpoint | PractitionerRole.endpoint"
        }
    ],
    "performer-function": [
        {
            name: "performer-function",
            'type: r5:TOKEN,
            base: ["ChargeItem"],
            expression: "ChargeItem.performer.function"
        }
    ],
    "intended-performer": [
        {
            name: "intended-performer",
            'type: r5:REFERENCE,
            base: ["MedicationRequest"],
            expression: "MedicationRequest.performer"
        }
    ],
    "component-code": [
        {
            name: "component-code",
            'type: r5:TOKEN,
            base: ["Observation"],
            expression: "Observation.component.code"
        }
    ],
    "intended-performertype": [
        {
            name: "intended-performertype",
            'type: r5:TOKEN,
            base: ["MedicationRequest"],
            expression: "MedicationRequest.performerType"
        }
    ],
    "relationship": [
        {
            name: "relationship",
            'type: r5:COMPOSITE,
            base: ["DocumentReference"],
            expression: "DocumentReference.relatesTo"
        },
        {
            name: "relationship",
            'type: r5:TOKEN,
            base: ["RelatedPerson", "FamilyMemberHistory"],
            expression: "FamilyMemberHistory.relationship | RelatedPerson.relationship"
        }
    ],
    "email": [
        {
            name: "email",
            'type: r5:TOKEN,
            base: ["Patient", "Person", "Practitioner", "PractitionerRole", "RelatedPerson", "OrganizationAffiliation"],
            expression: "OrganizationAffiliation.contact.telecom.where(system='email') | Patient.telecom.where(system='email') | Person.telecom.where(system='email') | Practitioner.telecom.where(system='email') | PractitionerRole.contact.telecom.where(system='email') | RelatedPerson.telecom.where(system='email')"
        }

    ],
    "creation": [
        {
            name: "creation",
            'type: r5:DATE,
            base: ["DocumentReference"],
            expression: "DocumentReference.content.attachment.creation"
        }

    ],
    "controller": [
        {
            name: "controller",
            'type: r5:REFERENCE,
            base: ["Consent"],
            expression: "Consent.controller"
        }
    ],
    "ingredient": [
        {
            name: "ingredient",
            'type: r5:TOKEN,
            base: ["ManufacturedItemDefinition", "AdministrableProductDefinition", "MedicinalProductDefinition"],
            expression: "MedicinalProductDefinition.ingredient | AdministrableProductDefinition.ingredient | ManufacturedItemDefinition.ingredient"
        },
        {
            name: "ingredient",
            'type: r5:REFERENCE,
            base: ["Medication", "MedicationKnowledge"],
            expression: "MedicationKnowledge.definitional.ingredient.item.reference | Medication.ingredient.item.reference"
        }
    ],
    "bodysite": [
        {
            name: "bodysite",
            'type: r5:REFERENCE,
            base: ["Specimen"],
            expression: "Specimen.collection.bodySite.reference"
        },
        {
            name: "bodysite",
            'type: r5:TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.bodySite.concept"
        }
    ],
    "reaction": [
        {
            name: "reaction",
            'type: r5:REFERENCE,
            base: ["Immunization"],
            expression: "Immunization.reaction.manifestation.reference"
        }
    ],
    "manager": [
        {
            name: "manager",
            'type: r5:REFERENCE,
            base: ["Consent"],
            expression: "Consent.manager"
        }
    ],
    "replaces": [
        {
            name: "replaces",
            'type: r5:REFERENCE,
            base: ["ServiceRequest", "CommunicationRequest", "CarePlan"],
            expression: "CarePlan.replaces | CommunicationRequest.replaces | ServiceRequest.replaces"
        }
    ],
    "responsibleparty": [
        {
            name: "responsibleparty",
            'type: r5:REFERENCE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.substitution.responsibleParty"
        }
    ],
    "reporter": [
        {
            name: "reporter",
            'type: r5:REFERENCE,
            base: ["PaymentNotice", "MeasureReport"],
            expression: "MeasureReport.reporter | PaymentNotice.reporter"
        }
    ],
    "started": [
        {
            name: "started",
            'type: r5:DATE,
            base: ["ImagingStudy"],
            expression: "ImagingStudy.started"
        }
    ],
    "holder": [
        {
            name: "holder",
            'type: r5:REFERENCE,
            base: ["RegulatedAuthorization"],
            expression: "RegulatedAuthorization.holder"
        }
    ],
    "strength-concentration-quantity": [
        {
            name: "strength-concentration-quantity",
            'type: r5:QUANTITY,
            base: ["Ingredient"],
            expression: "Ingredient.substance.strength.concentration.ofType(Quantity)"
        }
    ],
    "activity-reference": [
        {
            name: "activity-reference",
            'type: r5:REFERENCE,
            base: ["CarePlan"],
            expression: "CarePlan.activity.plannedActivityReference"
        }
    ],
    "characteristic-value": [
        {
            name: "characteristic-value",
            'type: r5:COMPOSITE,
            base: ["Group"],
            expression: "Group.characteristic"
        }
    ],
    "diagnosis-reference": [
        {
            name: "diagnosis-reference",
            'type: r5:REFERENCE,
            base: ["EpisodeOfCare", "Encounter"],
            expression: "Encounter.diagnosis.condition.reference | EpisodeOfCare.diagnosis.condition.reference"
        }
    ],
    "_profile": [
        {
            name: "_profile",
            'type: r5:REFERENCE,
            base: ["Resource"],
            expression: "Resource.meta.profile"
        }
    ],
    "performer-actor": [
        {
            name: "performer-actor",
            'type: r5:REFERENCE,
            base: ["ChargeItem"],
            expression: "ChargeItem.performer.actor"
        }
    ],
    "_content": [
        {
            name: "_content",
            'type: r5:SPECIAL,
            base: ["Resource"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "specification-version": [
        {
            name: "specification-version",
            'type: r5:COMPOSITE,
            base: ["DeviceDefinition", "Device"],
            expression: "Device.conformsTo | DeviceDefinition.conformsTo"
        }
    ],
    "requestedperformer-reference": [
        {
            name: "requestedperformer-reference",
            'type: r5:REFERENCE,
            base: ["Task"],
            expression: "Task.requestedPerformer.reference"
        }
    ],
    "insurance": [
        {
            name: "insurance",
            'type: r5:REFERENCE,
            base: ["DeviceRequest"],
            expression: "DeviceRequest.insurance"
        }
    ],
    "item-reference": [
        {
            name: "item-reference",
            'type: r5:REFERENCE,
            base: ["InventoryReport"],
            expression: "InventoryReport.inventoryListing.item.item.reference"
        }
    ],
    "agent": [
        {
            name: "agent",
            'type: r5:REFERENCE,
            base: ["Provenance", "AuditEvent"],
            expression: "AuditEvent.agent.who | Provenance.agent.who"
        }
    ],
    "product-status": [
        {
            name: "product-status",
            'type: r5:TOKEN,
            base: ["BiologicallyDerivedProduct"],
            expression: "BiologicallyDerivedProduct.productStatus"
        }
    ],
    "participant-role": [
        {
            name: "participant-role",
            'type: r5:TOKEN,
            base: ["Invoice"],
            expression: "Invoice.participant.role"
        }
    ],
    "case-type": [
        {
            name: "case-type",
            'type: r5:TOKEN,
            base: ["RegulatedAuthorization"],
            expression: "RegulatedAuthorization.case.type"
        }
    ],
    "source": [
        {
            name: "source",
            'type: r5:REFERENCE,
            base: ["AuditEvent", "QuestionnaireResponse", "List", "Linkage", "NutritionIntake", "MedicationStatement"],
            expression: "MedicationStatement.informationSource | (NutritionIntake.reported as Reference) | Linkage.item.resource | List.source | QuestionnaireResponse.source | AuditEvent.source.observer"
        },
        {
            name: "source",
            'type: r5:STRING,
            base: ["MessageHeader"],
            expression: "MessageHeader.source.name"
        }
    ],
    "oraldiet": [
        {
            name: "oraldiet",
            'type: r5:TOKEN,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.oralDiet.type"
        }
    ],
    "totalnet": [
        {
            name: "totalnet",
            'type: r5:QUANTITY,
            base: ["Invoice"],
            expression: "Invoice.totalNet"
        }
    ],
    "participant": [
        {
            name: "participant",
            'type: r5:URI,
            base: ["TestReport"],
            expression: "TestReport.participant.uri"
        },
        {
            name: "participant",
            'type: r5:REFERENCE,
            base: ["CareTeam", "Encounter", "Invoice", "AllergyIntolerance", "RequestOrchestration"],
            expression: "RequestOrchestration.action.participant.actor.ofType(Reference) | RequestOrchestration.action.participant.actor.ofType(canonical) | AllergyIntolerance.participant.actor | Invoice.participant.actor | Encounter.participant.actor | CareTeam.participant.member"
        }
    ],
    "operator": [
        {
            name: "operator",
            'type: r5:REFERENCE,
            base: ["DeviceAssociation"],
            expression: "DeviceAssociation.operation.operator"
        }
    ],
    "output-profile": [
        {
            name: "output-profile",
            'type: r5:REFERENCE,
            base: ["OperationDefinition"],
            expression: "OperationDefinition.outputProfile"
        }
    ],
    "keyword": [
        {
            name: "keyword",
            'type: r5:TOKEN,
            base: ["StructureDefinition", "ResearchStudy"],
            expression: "ResearchStudy.keyword | StructureDefinition.keyword"
        }
    ],
    "target-date": [
        {
            name: "target-date",
            'type: r5:DATE,
            base: ["Goal"],
            expression: "(Goal.target.due.ofType(date))"
        }
    ],
    "contraindication": [
        {
            name: "contraindication",
            'type: r5:TOKEN,
            base: ["ClinicalUseDefinition"],
            expression: "ClinicalUseDefinition.contraindication.diseaseSymptomProcedure.concept"
        }
    ],
    "given": [
        {
            name: "given",
            'type: r5:STRING,
            base: ["Person", "RelatedPerson", "Patient", "Practitioner"],
            expression: "Patient.name.given | Practitioner.name.given | RelatedPerson.name.given | Person.name.given"
        }
    ],
    "valueset": [
        {
            name: "valueset",
            'type: r5:REFERENCE,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.snapshot.element.binding.valueSet"
        }
    ],
    "event-code": [
        {
            name: "event-code",
            'type: r5:TOKEN,
            base: ["Composition", "DocumentReference"],
            expression: "DocumentReference.event.concept | Composition.event.detail.concept"
        }
    ],
    "value-quantity": [
        {
            name: "value-quantity",
            'type: r5:QUANTITY,
            base: ["Observation"],
            expression: "Observation.value.ofType(Quantity) | Observation.value.ofType(SampledData)"
        }
    ],
    "combo-value-quantity": [
        {
            name: "combo-value-quantity",
            'type: r5:QUANTITY,
            base: ["Observation"],
            expression: "Observation.value.ofType(Quantity) | Observation.value.ofType(SampledData) | Observation.component.value.ofType(Quantity) | Observation.component.value.ofType(SampledData)"
        }
    ],
    "incoming-referral": [
        {
            name: "incoming-referral",
            'type: r5:REFERENCE,
            base: ["EpisodeOfCare"],
            expression: "EpisodeOfCare.referralRequest"
        }

    ],
    "measure": [
        {
            name: "measure",
            'type: r5:REFERENCE,
            base: ["MeasureReport"],
            expression: "MeasureReport.measure"
        }
    ],
    "name": [
        {
            name: "name",
            'type: r5:TOKEN,
            base: ["ManufacturedItemDefinition", "PackagedProductDefinition"],
            expression: "PackagedProductDefinition.name | ManufacturedItemDefinition.name"
        },
        {
            name: "name",
            'type: r5:STRING,
            base: ["Schedule", "Group", "Organization", "InsurancePlan", "Subscription", "Location", "RelatedPerson", "Patient", "ActivityDefinition", "CapabilityStatement", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript", "Endpoint", "SubstanceDefinition", "CareTeam", "HealthcareService", "Account", "ResearchStudy", "Practitioner", "MedicinalProductDefinition", "Person"],
            expression: "Person.name | MedicinalProductDefinition.name.productName | Practitioner.name | ResearchStudy.name | Account.name | HealthcareService.name | CareTeam.name | CareTeam.extension('http://hl7.org/fhir/StructureDefinition/careteam-alias').value | SubstanceDefinition.name.name | Endpoint.name | ActivityDefinition.name | CapabilityStatement.name | Citation.name | CodeSystem.name | CompartmentDefinition.name | ConceptMap.name | ConditionDefinition.name | EventDefinition.name | EvidenceVariable.name | ExampleScenario.name | GraphDefinition.name | ImplementationGuide.name | Library.name | Measure.name | MessageDefinition.name | NamingSystem.name | OperationDefinition.name | PlanDefinition.name | Questionnaire.name | Requirements.name | SearchParameter.name | StructureDefinition.name | StructureMap.name | TerminologyCapabilities.name | TestScript.name | ValueSet.name | Patient.name | RelatedPerson.name | Location.name | Location.alias | Subscription.name | InsurancePlan.name | InsurancePlan.alias | Organization.name | Organization.alias | Group.name | Schedule.name"
        }
    ],
    "class-value": [
        {
            name: "class-value",
            'type: r5:TOKEN,
            base: ["Coverage"],
            expression: "Coverage.class.value"
        }
    ],
    "region": [
        {
            name: "region",
            'type: r5:TOKEN,
            base: ["RegulatedAuthorization", "ResearchStudy"],
            expression: "ResearchStudy.region | RegulatedAuthorization.region"
        }
    ],
    "support": [
        {
            name: "support",
            'type: r5:REFERENCE,
            base: ["ImmunizationRecommendation"],
            expression: "ImmunizationRecommendation.recommendation.supportingImmunization"
        }
    ],
    "questionnaire": [
        {
            name: "questionnaire",
            'type: r5:REFERENCE,
            base: ["QuestionnaireResponse"],
            expression: "QuestionnaireResponse.questionnaire"
        }
    ],
    "_lastUpdated": [
        {
            name: "_lastUpdated",
            'type: r5:DATE,
            base: ["Resource"],
            expression: "Resource.meta.lastUpdated"
        }
    ],
    "destination": [
        {
            name: "destination",
            'type: r5:REFERENCE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.destination"
        },

        {
            name: "destination",
            'type: r5:STRING,
            base: ["MessageHeader"],
            expression: "MessageHeader.destination.name"
        }
    ],
    "description": [
        {
            name: "description",
            'type: r5:TOKEN,
            base: ["Goal"],
            expression: "Goal.description"
        },
        {
            name: "description",
            'type: r5:STRING,
            base: ["ResearchStudy", "DocumentReference", "ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceVariable", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript"],
            expression: "ActivityDefinition.description | ActorDefinition.description | CapabilityStatement.description | ChargeItemDefinition.description | Citation.description | CodeSystem.description | CompartmentDefinition.description | ConceptMap.description | ConditionDefinition.description | EventDefinition.description | Evidence.description | EvidenceVariable.description | GraphDefinition.description | ImplementationGuide.description | Library.description | Measure.description | MessageDefinition.description | NamingSystem.description | OperationDefinition.description | PlanDefinition.description | Questionnaire.description | Requirements.description | SearchParameter.description | StructureDefinition.description | StructureMap.description | TerminologyCapabilities.description | TestScript.description | ValueSet.description | DocumentReference.description | ResearchStudy.description"
        }
    ],
    "reason-code": [
        {
            name: "reason-code",
            'type: r5:TOKEN,
            base: ["Appointment", "Immunization", "Encounter", "EpisodeOfCare", "Procedure"],
            expression: "Procedure.reason.concept | EpisodeOfCare.reason.value.concept | Encounter.reason.value.concept | Immunization.reason.concept | Appointment.reason.concept"
        }
    ],
    "product-category": [
        {
            name: "product-category",
            'type: r5:TOKEN,
            base: ["BiologicallyDerivedProduct"],
            expression: "BiologicallyDerivedProduct.productCategory"
        }
    ],
    "finding-ref": [
        {
            name: "finding-ref",
            'type: r5:REFERENCE,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.finding.item.reference"
        }
    ],
    "progress-status-state-period-actual": [
        {
            name: "progress-status-state-period-actual",
            'type: r5:COMPOSITE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.progressStatus"
        }
    ],
    "conclusion": [
        {
            name: "conclusion",
            'type: r5:TOKEN,
            base: ["DiagnosticReport"],
            expression: "DiagnosticReport.conclusionCode"
        }
    ],
    "coverage-area": [
        {
            name: "coverage-area",
            'type: r5:REFERENCE,
            base: ["HealthcareService"],
            expression: "HealthcareService.coverageArea"
        }
    ],
    "definition": [
        {
            name: "definition",
            'type: r5:URI,
            base: ["Questionnaire"],
            expression: "Questionnaire.item.definition"
        },
        {
            name: "definition",
            'type: r5:REFERENCE,
            base: ["Device", "PlanDefinition"],
            expression: "PlanDefinition.action.definition.ofType(canonical) | PlanDefinition.action.definition.ofType(uri) | Device.definition.reference"
        }
    ],
    "attestation-method": [
        {
            name: "attestation-method",
            'type: r5:TOKEN,
            base: ["VerificationResult"],
            expression: "VerificationResult.attestation.communicationMethod"
        }
    ],
    "content-type": [
        {
            name: "content-type",
            'type: r5:TOKEN,
            base: ["Library"],
            expression: "Library.content.contentType"
        }
    ],
    "questionnaire-code": [
        {
            name: "questionnaire-code",
            'type: r5:TOKEN,
            base: ["Questionnaire"],
            expression: "Questionnaire.code"
        }
    ],
    "value-markdown": [
        {
            name: "value-markdown",
            'type: r5:STRING,
            base: ["Observation"],
            expression: "Observation.value.ofType(markdown) | Observation.value.ofType(CodeableConcept).text"
        }
    ],
    "focus-code": [
        {
            name: "focus-code",
            'type: r5:TOKEN,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.focus.concept"
        }

    ],
    "coverage": [
        {
            name: "coverage",
            'type: r5:REFERENCE,
            base: ["ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.insurance.coverage"
        }
    ],
    "severity": [
        {
            name: "severity",
            'type: r5:TOKEN,
            base: ["Condition", "AllergyIntolerance"],
            expression: "AllergyIntolerance.reaction.severity | Condition.severity"
        }
    ],
    "target-measure": [
        {
            name: "target-measure",
            'type: r5:TOKEN,
            base: ["Goal"],
            expression: "Goal.target.measure"
        }
    ],
    "business-status": [
        {
            name: "business-status",
            'type: r5:TOKEN,
            base: ["Task"],
            expression: "Task.businessStatus"
        }
    ],
    "previous": [
        {
            name: "previous",
            'type: r5:REFERENCE,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.previous"
        }
    ],
    "device-name": [
        {
            name: "device-name",
            'type: r5:STRING,
            base: ["DeviceDefinition", "Device"],
            expression: "Device.name.value | Device.type.coding.display | Device.type.text | DeviceDefinition.deviceName.name | DeviceDefinition.classification.type.coding.display | DeviceDefinition.classification.type.text"
        }
    ],
    "substance": [
        {
            name: "substance",
            'type: r5:REFERENCE,
            base: ["Ingredient", "AdverseEvent"],
            expression: "(AdverseEvent.suspectEntity.instance as Reference) | Ingredient.substance.code.reference"
        }
    ],
    "start": [
        {
            name: "start",
            'type: r5:TOKEN,
            base: ["GraphDefinition"],
            expression: "GraphDefinition.start"
        },
        {
            name: "start",
            'type: r5:DATE,
            base: ["Slot"],
            expression: "Slot.start"
        }
    ],
    "type-tested": [
        {
            name: "type-tested",
            'type: r5:TOKEN,
            base: ["SpecimenDefinition"],
            expression: "SpecimenDefinition.typeTested.type"
        }

    ],
    "primary-organization": [
        {
            name: "primary-organization",
            'type: r5:REFERENCE,
            base: ["OrganizationAffiliation"],
            expression: "OrganizationAffiliation.organization"
        }
    ],
    "other-map": [
        {
            name: "other-map",
            'type: r5:REFERENCE,
            base: ["ConceptMap"],
            expression: "ConceptMap.group.unmapped.otherMap"
        }
    ],
    "attester": [
        {
            name: "attester",
            'type: r5:REFERENCE,
            base: ["DocumentReference", "Composition"],
            expression: "Composition.attester.party | DocumentReference.attester.party"
        }
    ],
    "event-reference": [
        {
            name: "event-reference",
            'type: r5:REFERENCE,
            base: ["Composition", "DocumentReference"],
            expression: "DocumentReference.event.reference | Composition.event.detail.reference"
        }
    ],
    "target": [
        {
            name: "target",
            'type: r5:REFERENCE,
            base: ["MessageHeader", "VerificationResult", "Provenance"],
            expression: "Provenance.target | VerificationResult.target | MessageHeader.destination.target"
        },
        {
            name: "target",
            'type: r5:TOKEN,
            base: ["SearchParameter"],
            expression: "SearchParameter.target"
        }
    ],
    "_tag": [
        {
            name: "_tag",
            'type: r5:TOKEN,
            base: ["Resource"],
            expression: "Resource.meta.tag"
        }
    ],
    "recipient": [
        {
            name: "recipient",
            'type: r5:REFERENCE,
            base: ["Communication", "CommunicationRequest", "Invoice"],
            expression: "Invoice.recipient | CommunicationRequest.recipient | Communication.recipient"
        }
    ],
    "formula": [
        {
            name: "formula",
            'type: r5:TOKEN,
            base: ["NutritionOrder"],
            expression: "NutritionOrder.enteralFormula.baseFormulaType.concept"
        }
    ],
    "location": [
        {
            name: "location",
            'type: r5:REFERENCE,
            base: ["Procedure", "Immunization", "Device", "Provenance", "MeasureReport", "Encounter", "AdverseEvent", "PractitionerRole", "OrganizationAffiliation", "Appointment", "HealthcareService", "AppointmentResponse", "MedicationDispense"],
            expression: "MedicationDispense.location | AppointmentResponse.actor.where(resolve() is Location) | HealthcareService.location | Appointment.participant.actor.where(resolve() is Location) | OrganizationAffiliation.location | PractitionerRole.location | AdverseEvent.location | Encounter.location.location | MeasureReport.location | Provenance.location | Device.location | Immunization.location | Procedure.location"
        },
        {
            name: "location",
            'type: r5:URI,
            base: ["DocumentReference"],
            expression: "DocumentReference.content.attachment.url"
        }
    ],
    "component-code-value-concept": [
        {
            name: "component-code-value-concept",
            'type: r5:COMPOSITE,
            base: ["Observation"],
            expression: "Observation.component"
        }
    ],
    "risk": [
        {
            name: "risk",
            'type: r5:TOKEN,
            base: ["RiskAssessment"],
            expression: "RiskAssessment.prediction.qualitativeRisk"
        }
    ],
    "expiration-date": [
        {
            name: "expiration-date",
            'type: r5:DATE,
            base: ["Device", "Medication"],
            expression: "Medication.batch.expirationDate | Device.expirationDate"
        }
    ],
    "base": [
        {
            name: "base",
            'type: r5:TOKEN,
            base: ["SearchParameter"],
            expression: "SearchParameter.base"
        },
        {
            name: "base",
            'type: r5:REFERENCE,
            base: ["OperationDefinition", "StructureDefinition"],
            expression: "StructureDefinition.baseDefinition | OperationDefinition.base"
        }
    ],
    "container": [
        {
            name: "container",
            'type: r5:TOKEN,
            base: ["SpecimenDefinition"],
            expression: "SpecimenDefinition.typeTested.container.type"
        }
    ],
    "udi-carrier": [
        {
            name: "udi-carrier",
            'type: r5:STRING,
            base: ["Device"],
            expression: "Device.udiCarrier.carrierHRF"
        }
    ],
    "birthdate": [
        {
            name: "birthdate",
            'type: r5:DATE,
            base: ["Patient", "Person", "RelatedPerson"],
            expression: "Patient.birthDate | Person.birthDate | RelatedPerson.birthDate"
        }
    ],
    "software": [
        {
            name: "software",
            'type: r5:STRING,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.software.name"
        }
    ]
};

//Number of search params in FHIR_IG_SEARCH_PARAMS_5  = 100
final readonly & map<r5:FHIRSearchParameterDefinition[]> FHIR_IG_SEARCH_PARAMS_5 = {
    "requisition": [
        {
            name: "requisition",
            'type: r5:TOKEN,
            base: ["ServiceRequest"],
            expression: "ServiceRequest.requisition"
        }
    ],
    "tester": [
        {
            name: "tester",
            'type: r5:STRING,
            base: ["TestReport"],
            expression: "TestReport.tester"
        }
    ],
    "derived-from": [
        {
            name: "derived-from",
            'type: r5:REFERENCE,
            base: ["ActivityDefinition", "ConceptMap", "EventDefinition", "EvidenceVariable", "Library", "Measure", "NamingSystem", "PlanDefinition", "Observation", "ImagingSelection", "Requirements", "SearchParameter"],
            expression: "SearchParameter.derivedFrom | Requirements.derivedFrom | ImagingSelection.derivedFrom | Observation.derivedFrom | ActivityDefinition.relatedArtifact.where(type='derived-from').resource | CodeSystem.relatedArtifact.where(type='derived-from').resource | ConceptMap.relatedArtifact.where(type='derived-from').resource | EventDefinition.relatedArtifact.where(type='derived-from').resource | EvidenceVariable.relatedArtifact.where(type='derived-from').resource | Library.relatedArtifact.where(type='derived-from').resource | Measure.relatedArtifact.where(type='derived-from').resource | NamingSystem.relatedArtifact.where(type='derived-from').resource | PlanDefinition.relatedArtifact.where(type='derived-from').resource | ValueSet.relatedArtifact.where(type='derived-from').resource"
        }
    ],
    "eligibility": [
        {
            name: "eligibility",
            'type: r5:TOKEN,
            base: ["HealthcareService"],
            expression: "HealthcareService.eligibility.code"
        },
        {
            name: "eligibility",
            'type: r5:REFERENCE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.recruitment.eligibility"
        }
    ],
    "experimental": [
        {
            name: "experimental",
            'type: r5:TOKEN,
            base: ["SpecimenDefinition", "ImplementationGuide", "ObservationDefinition", "StructureDefinition"],
            expression: "StructureDefinition.experimental | ObservationDefinition.experimental | ImplementationGuide.experimental | SpecimenDefinition.experimental"
        }
    ],
    "guarantor": [
        {
            name: "guarantor",
            'type: r5:REFERENCE,
            base: ["Account"],
            expression: "Account.guarantor.party"
        }
    ],
    "status-reason": [
        {
            name: "status-reason",
            'type: r5:TOKEN,
            base: ["Immunization"],
            expression: "Immunization.statusReason"
        }
    ],
    "collected": [
        {
            name: "collected",
            'type: r5:DATE,
            base: ["Specimen"],
            expression: "Specimen.collection.collected.ofType(dateTime) | Specimen.collection.collected.ofType(Period)"
        }
    ],
    "program": [
        {
            name: "program",
            'type: r5:TOKEN,
            base: ["HealthcareService"],
            expression: "HealthcareService.program"
        }
    ],
    "has-member": [
        {
            name: "has-member",
            'type: r5:REFERENCE,
            base: ["Observation"],
            expression: "Observation.hasMember"
        }
    ],
    "type": [
        {
            name: "type",
            'type: r5:URI,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.type"
        },
        {
            name: "type",
            'type: r5:TOKEN,
            base: ["Device", "MedicinalProductDefinition", "SearchParameter", "NamingSystem", "DeviceDefinition", "ClinicalUseDefinition", "SpecimenDefinition", "OperationDefinition", "Group", "ActorDefinition", "Account", "AllergyIntolerance", "Composition", "Coverage", "DocumentReference", "Encounter", "EpisodeOfCare", "Invoice", "MedicationDispense", "MolecularSequence", "Specimen", "Organization", "PlanDefinition", "Subscription", "Location", "InsurancePlan", "Library", "DeviceMetric"],
            expression: "DeviceMetric.type | Library.type | InsurancePlan.type | Location.type | Subscription.channelType | PlanDefinition.type | Organization.type | Account.type | AllergyIntolerance.type | Composition.type | Coverage.type | DocumentReference.type | Encounter.type | EpisodeOfCare.type | Invoice.type | MedicationDispense.type | MolecularSequence.type | Specimen.type | ActorDefinition.type | Group.type | OperationDefinition.type | SpecimenDefinition.typeCollected | ClinicalUseDefinition.type | DeviceDefinition.conformsTo.category | NamingSystem.type | SearchParameter.type | MedicinalProductDefinition.type | Device.type"
        }
    ],
    "when": [
        {
            name: "when",
            'type: r5:DATE,
            base: ["Provenance"],
            expression: "(Provenance.occurred.ofType(dateTime))"
        }
    ],
    "issuer": [
        {
            name: "issuer",
            'type: r5:REFERENCE,
            base: ["Invoice"],
            expression: "Invoice.issuer"
        }
    ],
    "relation": [
        {
            name: "relation",
            'type: r5:TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.relatesTo.code"
        }
    ],
    "section-text": [
        {
            name: "section-text",
            'type: r5:SPECIAL,
            base: ["Composition"],
            expression: "Composition.section.text | Composition.section.section.text"
        }
    ],
    "death-date": [
        {
            name: "death-date",
            'type: r5:DATE,
            base: ["Patient", "Practitioner", "Person"],
            expression: "(Person.deceased.ofType(dateTime)) | (Practitioner.deceased.ofType(dateTime)) | (Patient.deceased.ofType(dateTime))"
        }
    ],
    "problem": [
        {
            name: "problem",
            'type: r5:REFERENCE,
            base: ["ClinicalImpression"],
            expression: "ClinicalImpression.problem"
        }
    ],
    "identified": [
        {
            name: "identified",
            'type: r5:DATE,
            base: ["DetectedIssue"],
            expression: "DetectedIssue.identified.ofType(dateTime) | DetectedIssue.identified.ofType(Period)"
        }
    ],
    "reason-not-given": [
        {
            name: "reason-not-given",
            'type: r5:TOKEN,
            base: ["MedicationAdministration"],
            expression: "MedicationAdministration.statusReason"
        }
    ],
    "issued": [
        {
            name: "issued",
            'type: r5:DATE,
            base: ["TestReport", "ImagingSelection", "DiagnosticReport", "Contract"],
            expression: "Contract.issued | DiagnosticReport.issued | ImagingSelection.issued | TestReport.issued"
        }
    ],
    "dependent": [
        {
            name: "dependent",
            'type: r5:STRING,
            base: ["Coverage"],
            expression: "Coverage.dependent"
        }
    ],
    "attestation-onbehalfof": [
        {
            name: "attestation-onbehalfof",
            'type: r5:REFERENCE,
            base: ["VerificationResult"],
            expression: "VerificationResult.attestation.onBehalfOf"
        }
    ],
    "case": [
        {
            name: "case",
            'type: r5:TOKEN,
            base: ["RegulatedAuthorization"],
            expression: "RegulatedAuthorization.case.identifier"
        }
    ],
    "guide": [
        {
            name: "guide",
            'type: r5:REFERENCE,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.implementationGuide"
        }
    ],
    "context-type-quantity": [
        {
            name: "context-type-quantity",
            'type: r5:COMPOSITE,
            base: ["ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceReport", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript"],
            expression: "ActivityDefinition.useContext | ActorDefinition.useContext | CapabilityStatement.useContext | ChargeItemDefinition.useContext | Citation.useContext | CodeSystem.useContext | CompartmentDefinition.useContext | ConceptMap.useContext | ConditionDefinition.useContext | EventDefinition.useContext | Evidence.useContext | EvidenceReport.useContext | EvidenceVariable.useContext | ExampleScenario.useContext | GraphDefinition.useContext | ImplementationGuide.useContext | Library.useContext | Measure.useContext | MessageDefinition.useContext | NamingSystem.useContext | OperationDefinition.useContext | PlanDefinition.useContext | Questionnaire.useContext | Requirements.useContext | SearchParameter.useContext | StructureDefinition.useContext | StructureMap.useContext | TerminologyCapabilities.useContext | TestScript.useContext | ValueSet.useContext"
        }
    ],
    "phase": [
        {
            name: "phase",
            'type: r5:TOKEN,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.phase"
        }
    ],
    "identifier": [
        {
            name: "identifier",
            'type: r5:TOKEN,
            base: ["PractitionerRole", "Patient", "Group", "RegulatedAuthorization", "InventoryReport", "Device", "BiologicallyDerivedProductDispense", "Location", "ResearchStudy", "ManufacturedItemDefinition", "OrganizationAffiliation", "NutritionProduct", "Organization", "FormularyItem", "InsurancePlan", "HealthcareService", "Schedule", "Subscription", "EncounterHistory", "ClinicalUseDefinition", "BiologicallyDerivedProduct", "PaymentNotice", "SubstanceDefinition", "PackagedProductDefinition", "GenomicStudy", "EnrollmentResponse", "Practitioner", "DeviceAssociation", "DeviceMetric", "AdministrableProductDefinition", "Transport", "Slot", "DeviceDispense", "Account", "AdverseEvent", "AllergyIntolerance", "Appointment", "AppointmentResponse", "Basic", "BodyStructure", "CarePlan", "CareTeam", "ChargeItem", "Claim", "ClaimResponse", "ClinicalImpression", "Communication", "CommunicationRequest", "Composition", "Condition", "Consent", "Contract", "Coverage", "CoverageEligibilityRequest", "CoverageEligibilityResponse", "DetectedIssue", "DeviceRequest", "DeviceUsage", "DiagnosticReport", "DocumentReference", "Encounter", "EnrollmentRequest", "EpisodeOfCare", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "GuidanceResponse", "ImagingSelection", "ImagingStudy", "Immunization", "ImmunizationEvaluation", "ImmunizationRecommendation", "Invoice", "List", "MeasureReport", "Medication", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MolecularSequence", "NutritionIntake", "NutritionOrder", "Observation", "Person", "Procedure", "QuestionnaireResponse", "RelatedPerson", "RequestOrchestration", "ResearchSubject", "RiskAssessment", "ServiceRequest", "Specimen", "SupplyDelivery", "SupplyRequest", "Task", "VisionPrescription", "InventoryItem", "Ingredient", "Substance", "Endpoint", "ArtifactAssessment", "DeviceDefinition", "MedicinalProductDefinition", "ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceReport", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MedicationKnowledge", "MessageDefinition", "NamingSystem", "ObservationDefinition", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "SpecimenDefinition", "StructureDefinition", "StructureMap", "SubscriptionTopic", "TerminologyCapabilities", "TestPlan", "TestScript", "TestReport", "PaymentReconciliation"],
            expression: "PaymentReconciliation.identifier | TestReport.identifier | ActivityDefinition.identifier | ActorDefinition.identifier | CapabilityStatement.identifier | ChargeItemDefinition.identifier | Citation.identifier | CodeSystem.identifier | ConceptMap.identifier | ConditionDefinition.identifier | EventDefinition.identifier | Evidence.identifier | EvidenceReport.identifier | EvidenceVariable.identifier | ExampleScenario.identifier | GraphDefinition.identifier | ImplementationGuide.identifier | Library.identifier | Measure.identifier | MedicationKnowledge.identifier | MessageDefinition.identifier | NamingSystem.identifier | ObservationDefinition.identifier | OperationDefinition.identifier | PlanDefinition.identifier | Questionnaire.identifier | Requirements.identifier | SearchParameter.identifier | SpecimenDefinition.identifier | StructureDefinition.identifier | StructureMap.identifier | SubscriptionTopic.identifier | TerminologyCapabilities.identifier | TestPlan.identifier | TestScript.identifier | ValueSet.identifier | MedicinalProductDefinition.identifier | DeviceDefinition.identifier | ArtifactAssessment.identifier | Endpoint.identifier | Substance.identifier | Ingredient.identifier | InventoryItem.identifier | Account.identifier | AdverseEvent.identifier | AllergyIntolerance.identifier | Appointment.identifier | AppointmentResponse.identifier | Basic.identifier | BodyStructure.identifier | CarePlan.identifier | CareTeam.identifier | ChargeItem.identifier | Claim.identifier | ClaimResponse.identifier | ClinicalImpression.identifier | Communication.identifier | CommunicationRequest.identifier | Composition.identifier | Condition.identifier | Consent.identifier | Contract.identifier | Coverage.identifier | CoverageEligibilityRequest.identifier | CoverageEligibilityResponse.identifier | DetectedIssue.identifier | DeviceRequest.identifier | DeviceUsage.identifier | DiagnosticReport.identifier | DocumentReference.identifier | Encounter.identifier | EnrollmentRequest.identifier | EpisodeOfCare.identifier | ExplanationOfBenefit.identifier | FamilyMemberHistory.identifier | Flag.identifier | Goal.identifier | GuidanceResponse.identifier | ImagingSelection.identifier | ImagingStudy.identifier | Immunization.identifier | ImmunizationEvaluation.identifier | ImmunizationRecommendation.identifier | Invoice.identifier | List.identifier | MeasureReport.identifier | Medication.identifier | MedicationAdministration.identifier | MedicationDispense.identifier | MedicationRequest.identifier | MedicationStatement.identifier | MolecularSequence.identifier | NutritionIntake.identifier | NutritionOrder.identifier | Observation.identifier | Person.identifier | Procedure.identifier | QuestionnaireResponse.identifier | RelatedPerson.identifier | RequestOrchestration.identifier | ResearchSubject.identifier | RiskAssessment.identifier | ServiceRequest.identifier | Specimen.identifier | SupplyDelivery.identifier | SupplyRequest.identifier | Task.identifier | VisionPrescription.identifier | DeviceDispense.identifier | Slot.identifier | Transport.identifier | AdministrableProductDefinition.identifier | DeviceMetric.identifier | DeviceAssociation.identifier | Practitioner.identifier | Practitioner.qualification.identifier | EnrollmentResponse.identifier | GenomicStudy.identifier | PackagedProductDefinition.identifier | SubstanceDefinition.identifier | PaymentNotice.identifier | BiologicallyDerivedProduct.identifier | ClinicalUseDefinition.identifier | EncounterHistory.identifier | Subscription.identifier | Schedule.identifier | HealthcareService.identifier | InsurancePlan.identifier | FormularyItem.identifier | Organization.identifier | Organization.qualification.identifier | NutritionProduct.instance.identifier | OrganizationAffiliation.identifier | ManufacturedItemDefinition.identifier | ResearchStudy.identifier | Location.identifier | BiologicallyDerivedProductDispense.identifier | Device.identifier | InventoryReport.identifier | RegulatedAuthorization.identifier | Group.identifier | Patient.identifier | PractitionerRole.identifier"
        }
    ],
    "item": [
        {
            name: "item",
            'type: r5:TOKEN,
            base: ["InventoryReport"],
            expression: "InventoryReport.inventoryListing.item.item.concept"
        },
        {
            name: "item",
            'type: r5:REFERENCE,
            base: ["Linkage", "List"],
            expression: "List.entry.item | Linkage.item.resource"
        }
    ],
    "intended-dispenser": [
        {
            name: "intended-dispenser",
            'type: r5:REFERENCE,
            base: ["MedicationRequest"],
            expression: "MedicationRequest.dispenseRequest.dispenser"
        }
    ],
    "goal": [
        {
            name: "goal",
            'type: r5:REFERENCE,
            base: ["CarePlan"],
            expression: "CarePlan.goal"
        }
    ],
    "subscriber": [
        {
            name: "subscriber",
            'type: r5:REFERENCE,
            base: ["Coverage"],
            expression: "Coverage.subscriber"
        }
    ],
    "method": [
        {
            name: "method",
            'type: r5:TOKEN,
            base: ["Observation", "RiskAssessment", "ObservationDefinition"],
            expression: "ObservationDefinition.method | RiskAssessment.method | Observation.method"
        }
    ],
    "probability": [
        {
            name: "probability",
            'type: r5:NUMBER,
            base: ["RiskAssessment"],
            expression: "RiskAssessment.prediction.probability.ofType(decimal)"
        }
    ],
    "priority": [
        {
            name: "priority",
            'type: r5:TOKEN,
            base: ["CommunicationRequest", "Task", "Claim", "RequestOrchestration", "MedicationRequest", "ServiceRequest"],
            expression: "ServiceRequest.priority | MedicationRequest.priority | RequestOrchestration.priority | Claim.priority | Task.priority | CommunicationRequest.priority"
        }
    ],
    "primarysource-type": [
        {
            name: "primarysource-type",
            'type: r5:TOKEN,
            base: ["VerificationResult"],
            expression: "VerificationResult.primarySource.type"
        }
    ],
    "payload-type": [
        {
            name: "payload-type",
            'type: r5:TOKEN,
            base: ["Endpoint"],
            expression: "Endpoint.payload.type"
        }
    ],
    "security-label": [
        {
            name: "security-label",
            'type: r5:TOKEN,
            base: ["Consent", "DocumentReference"],
            expression: "DocumentReference.securityLabel | Consent.provision.securityLabel"
        }
    ],
    "phone": [
        {
            name: "phone",
            'type: r5:TOKEN,
            base: ["OrganizationAffiliation", "Patient", "Person", "Practitioner", "PractitionerRole", "RelatedPerson"],
            expression: "Patient.telecom.where(system='phone') | Person.telecom.where(system='phone') | Practitioner.telecom.where(system='phone') | PractitionerRole.contact.telecom.where(system='phone') | RelatedPerson.telecom.where(system='phone') | OrganizationAffiliation.contact.telecom.where(system='phone')"
        }
    ],
    "abatement-string": [
        {
            name: "abatement-string",
            'type: r5:STRING,
            base: ["Condition"],
            expression: "Condition.abatement.ofType(string)"
        }
    ],
    "IDSEARCHPARAMETER": [
        {
            name: "IDSEARCHPARAMETER",
            'type: r5:TOKEN,
            base: ["Resource"],
            expression: "id"
        }
    ],
    "study": [
        {
            name: "study",
            'type: r5:REFERENCE,
            base: ["ResearchSubject", "AdverseEvent", "DiagnosticReport"],
            expression: "DiagnosticReport.study | AdverseEvent.study | ResearchSubject.study"
        }
    ],
    "_query": [
        {
            name: "_query",
            'type: r5:SPECIAL,
            base: ["Resource"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "performing-organization": [
        {
            name: "performing-organization",
            'type: r5:REFERENCE,
            base: ["ChargeItem"],
            expression: "ChargeItem.performingOrganization"
        }
    ],
    "gender": [
        {
            name: "gender",
            'type: r5:TOKEN,
            base: ["Patient", "Person", "Practitioner", "RelatedPerson"],
            expression: "Patient.gender | Person.gender | Practitioner.gender | RelatedPerson.gender"
        }
    ],
    "manifestation-reference": [
        {
            name: "manifestation-reference",
            'type: r5:REFERENCE,
            base: ["AllergyIntolerance"],
            expression: "AllergyIntolerance.reaction.manifestation.reference"
        }
    ],
    "component-value-canonical": [
        {
            name: "component-value-canonical",
            'type: r5:URI,
            base: ["Observation"],
            expression: "Observation.component.value.ofType(canonical)"
        }
    ],
    "context-type": [
        {
            name: "context-type",
            'type: r5:TOKEN,
            base: ["ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceReport", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript"],
            expression: "ActivityDefinition.useContext.code | ActorDefinition.useContext.code | CapabilityStatement.useContext.code | ChargeItemDefinition.useContext.code | Citation.useContext.code | CodeSystem.useContext.code | CompartmentDefinition.useContext.code | ConceptMap.useContext.code | ConditionDefinition.useContext.code | EventDefinition.useContext.code | Evidence.useContext.code | EvidenceReport.useContext.code | EvidenceVariable.useContext.code | ExampleScenario.useContext.code | GraphDefinition.useContext.code | ImplementationGuide.useContext.code | Library.useContext.code | Measure.useContext.code | MessageDefinition.useContext.code | NamingSystem.useContext.code | OperationDefinition.useContext.code | PlanDefinition.useContext.code | Questionnaire.useContext.code | Requirements.useContext.code | SearchParameter.useContext.code | StructureDefinition.useContext.code | StructureMap.useContext.code | TerminologyCapabilities.useContext.code | TestScript.useContext.code | ValueSet.useContext.code"
        }
    ],
    "group-identifier": [
        {
            name: "group-identifier",
            'type: r5:TOKEN,
            base: ["DeviceRequest", "MedicationRequest", "NutritionOrder", "RequestOrchestration", "CommunicationRequest", "Task"],
            expression: "Task.groupIdentifier | CommunicationRequest.groupIdentifier | RequestOrchestration.groupIdentifier | NutritionOrder.groupIdentifier | MedicationRequest.groupIdentifier | DeviceRequest.groupIdentifier"
        }
    ],
    "based-on": [
        {
            name: "based-on",
            'type: r5:REFERENCE,
            base: ["CommunicationRequest", "AuditEvent", "ServiceRequest", "RequestOrchestration", "ImagingSelection", "Appointment", "Encounter", "Provenance", "Task", "Procedure", "Communication", "QuestionnaireResponse", "CarePlan", "Observation", "ImagingStudy", "DiagnosticReport", "DocumentReference", "DeviceRequest"],
            expression: "DeviceRequest.basedOn | DocumentReference.basedOn | DiagnosticReport.basedOn | ImagingStudy.basedOn | Observation.basedOn | CarePlan.basedOn | QuestionnaireResponse.basedOn | Communication.basedOn | Procedure.basedOn | Task.basedOn | Provenance.basedOn | Encounter.basedOn | Appointment.basedOn | ImagingSelection.basedOn | RequestOrchestration.basedOn | ServiceRequest.basedOn | AuditEvent.basedOn | CommunicationRequest.basedOn"
        }
    ],
    "date-start": [
        {
            name: "date-start",
            'type: r5:DATE,
            base: ["Encounter"],
            expression: "Encounter.actualPeriod.start"
        }
    ],
    "telecom": [
        {
            name: "telecom",
            'type: r5:TOKEN,
            base: ["Patient", "Person", "Practitioner", "PractitionerRole", "RelatedPerson", "NamingSystem", "OrganizationAffiliation"],
            expression: "OrganizationAffiliation.contact.telecom | NamingSystem.contact.telecom | Patient.telecom | Person.telecom | Practitioner.telecom | PractitionerRole.contact.telecom | RelatedPerson.telecom"
        }
    ],
    "event": [
        {
            name: "event",
            'type: r5:TOKEN,
            base: ["SubscriptionTopic", "MessageDefinition", "MessageHeader"],
            expression: "MessageHeader.event.ofType(Coding) | MessageHeader.event.ofType(canonical) | MessageDefinition.event.ofType(Coding) | SubscriptionTopic.eventTrigger.event"
        }
    ],
    "address-city": [
        {
            name: "address-city",
            'type: r5:STRING,
            base: ["InsurancePlan", "Organization", "Patient", "Person", "Practitioner", "RelatedPerson", "Location"],
            expression: "Location.address.city | Patient.address.city | Person.address.city | Practitioner.address.city | RelatedPerson.address.city | Organization.contact.address.city | InsurancePlan.contact.address.city"
        }
    ],
    "managing-entity": [
        {
            name: "managing-entity",
            'type: r5:REFERENCE,
            base: ["Group"],
            expression: "Group.managingEntity"
        }
    ],
    "performer": [
        {
            name: "performer",
            'type: r5:TOKEN,
            base: ["Task"],
            expression: "Task.requestedPerformer.concept"
        },
        {
            name: "performer",
            'type: r5:REFERENCE,
            base: ["MedicationDispense", "DiagnosticReport", "ClinicalImpression", "Immunization", "BiologicallyDerivedProductDispense", "DeviceRequest", "ServiceRequest", "MedicationAdministration", "Observation", "Procedure", "ImagingStudy", "RiskAssessment"],
            expression: "RiskAssessment.performer | ImagingStudy.series.performer.actor | Procedure.performer.actor | Observation.performer | MedicationAdministration.performer.actor.reference | ServiceRequest.performer | DeviceRequest.performer.reference | BiologicallyDerivedProductDispense.performer.actor | Immunization.performer.actor | ClinicalImpression.performer | DiagnosticReport.performer | MedicationDispense.performer.actor"
        }
    ],
    "resource-profile": [
        {
            name: "resource-profile",
            'type: r5:REFERENCE,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.rest.resource.profile"
        }
    ],
    "owned-by": [
        {
            name: "owned-by",
            'type: r5:REFERENCE,
            base: ["InsurancePlan"],
            expression: "InsurancePlan.ownedBy"
        }
    ],
    "substance-code": [
        {
            name: "substance-code",
            'type: r5:TOKEN,
            base: ["Ingredient"],
            expression: "Ingredient.substance.code.concept"
        }
    ],
    "data-absent-reason": [
        {
            name: "data-absent-reason",
            'type: r5:TOKEN,
            base: ["Observation"],
            expression: "Observation.dataAbsentReason"
        }
    ],
    "abstract": [
        {
            name: "abstract",
            'type: r5:TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.abstract"
        }
    ],
    "id-type": [
        {
            name: "id-type",
            'type: r5:TOKEN,
            base: ["NamingSystem"],
            expression: "NamingSystem.uniqueId.type"
        }
    ],
    "immunization-event": [
        {
            name: "immunization-event",
            'type: r5:REFERENCE,
            base: ["ImmunizationEvaluation"],
            expression: "ImmunizationEvaluation.immunizationEvent"
        }
    ],
    "careteam": [
        {
            name: "careteam",
            'type: r5:REFERENCE,
            base: ["Encounter"],
            expression: "Encounter.careTeam"
        }
    ],
    "site": [
        {
            name: "site",
            'type: r5:REFERENCE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.site"
        }
    ],
    "ExampleSearchParameter": [
        {
            name: "ExampleSearchParameter",
            'type: r5:REFERENCE,
            base: ["Condition"],
            expression: "Condition.subject"
        }
    ],
    "prescription": [
        {
            name: "prescription",
            'type: r5:REFERENCE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.authorizingPrescription"
        }
    ],
    "organization": [
        {
            name: "organization",
            'type: r5:REFERENCE,
            base: ["Device", "EpisodeOfCare", "DeviceDefinition", "PractitionerRole", "Endpoint", "Patient", "Location", "HealthcareService", "Person"],
            expression: "Person.managingOrganization | HealthcareService.providedBy | Location.managingOrganization | Patient.managingOrganization | Endpoint.managingOrganization | PractitionerRole.organization | DeviceDefinition.owner | EpisodeOfCare.managingOrganization | Device.owner"
        }
    ],
    "testscript": [
        {
            name: "testscript",
            'type: r5:REFERENCE,
            base: ["TestReport"],
            expression: "TestReport.testScript"
        }
    ],
    "body-site": [
        {
            name: "body-site",
            'type: r5:TOKEN,
            base: ["Condition", "ServiceRequest", "ImagingSelection", "ImagingStudy"],
            expression: "ImagingStudy.series.bodySite.concept | ImagingSelection.bodySite.concept | ServiceRequest.bodySite | Condition.bodySite"
        }
    ],
    "_text": [
        {
            name: "_text",
            'type: r5:STRING,
            base: ["Resource"],
            expression: "$searchParam.getExpression()"
        }
    ],
    "facility": [
        {
            name: "facility",
            'type: r5:TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.facilityType"
        },
        {
            name: "facility",
            'type: r5:REFERENCE,
            base: ["CoverageEligibilityRequest", "Claim", "ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.facility | Claim.facility | CoverageEligibilityRequest.facility"
        }
    ],
    "combo-value-concept": [
        {
            name: "combo-value-concept",
            'type: r5:TOKEN,
            base: ["Observation"],
            expression: "Observation.value.ofType(CodeableConcept) | Observation.component.value.ofType(CodeableConcept)"
        }
    ],
    "date": [
        {
            name: "date",
            'type: r5:DATE,
            base: ["ArtifactAssessment", "ResearchStudy", "AdverseEvent", "AllergyIntolerance", "Appointment", "AuditEvent", "CarePlan", "CareTeam", "ClinicalImpression", "Composition", "Consent", "DiagnosticReport", "DocumentReference", "Encounter", "EpisodeOfCare", "FamilyMemberHistory", "Flag", "Immunization", "ImmunizationEvaluation", "ImmunizationRecommendation", "Invoice", "List", "MeasureReport", "NutritionIntake", "Observation", "Procedure", "ResearchSubject", "RiskAssessment", "SupplyRequest", "MedicationAdministration", "Schedule", "ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "SubscriptionTopic", "TerminologyCapabilities", "TestScript", "PractitionerRole", "OrganizationAffiliation"],
            expression: "OrganizationAffiliation.period | PractitionerRole.period | ActivityDefinition.date | ActorDefinition.date | CapabilityStatement.date | ChargeItemDefinition.date | Citation.date | CodeSystem.date | CompartmentDefinition.date | ConceptMap.date | ConditionDefinition.date | EventDefinition.date | Evidence.date | EvidenceVariable.date | ExampleScenario.date | GraphDefinition.date | ImplementationGuide.date | Library.date | Measure.date | MessageDefinition.date | NamingSystem.date | OperationDefinition.date | PlanDefinition.date | Questionnaire.date | Requirements.date | SearchParameter.date | StructureDefinition.date | StructureMap.date | SubscriptionTopic.date | TerminologyCapabilities.date | TestScript.date | ValueSet.date | Schedule.planningHorizon | MedicationAdministration.occurence.ofType(dateTime) | MedicationAdministration.occurence.ofType(Period) | AdverseEvent.occurrence.ofType(dateTime) | AdverseEvent.occurrence.ofType(Period) | AdverseEvent.occurrence.ofType(Timing) | AllergyIntolerance.recordedDate | (start | requestedPeriod.start).first() | AuditEvent.recorded | CarePlan.period | ClinicalImpression.date | Composition.date | Consent.date | DiagnosticReport.effective.ofType(dateTime) | DiagnosticReport.effective.ofType(Period) | DocumentReference.date | Encounter.actualPeriod | EpisodeOfCare.period | FamilyMemberHistory.date | Flag.period | (Immunization.occurrence.ofType(dateTime)) | ImmunizationEvaluation.date | ImmunizationRecommendation.date | Invoice.date | List.date | MeasureReport.date | NutritionIntake.occurrence.ofType(dateTime) | NutritionIntake.occurrence.ofType(Period) | Observation.effective.ofType(dateTime) | Observation.effective.ofType(Period) | Observation.effective.ofType(Timing) | Observation.effective.ofType(instant) | Procedure.occurrence.ofType(dateTime) | Procedure.occurrence.ofType(Period) | Procedure.occurrence.ofType(Timing) | ResearchSubject.period | (RiskAssessment.occurrence.ofType(dateTime)) | SupplyRequest.authoredOn | ResearchStudy.period | ArtifactAssessment.date"
        }
    ],
    "instantiates": [
        {
            name: "instantiates",
            'type: r5:URI,
            base: ["Contract"],
            expression: "Contract.instantiatesUri"
        }
    ],
    "addresses": [
        {
            name: "addresses",
            'type: r5:REFERENCE,
            base: ["Goal"],
            expression: "Goal.addresses"
        }
    ],
    "address-state": [
        {
            name: "address-state",
            'type: r5:STRING,
            base: ["InsurancePlan", "Patient", "Person", "Practitioner", "RelatedPerson", "Location", "Organization"],
            expression: "Organization.contact.address.state | Location.address.state | Patient.address.state | Person.address.state | Practitioner.address.state | RelatedPerson.address.state | InsurancePlan.contact.address.state"
        }
    ],
    "data": [
        {
            name: "data",
            'type: r5:REFERENCE,
            base: ["Consent"],
            expression: "Consent.provision.data.reference"
        }
    ],
    "verification-status": [
        {
            name: "verification-status",
            'type: r5:TOKEN,
            base: ["Condition", "AllergyIntolerance"],
            expression: "AllergyIntolerance.verificationStatus | Condition.verificationStatus"
        }
    ],
    "appointment": [
        {
            name: "appointment",
            'type: r5:REFERENCE,
            base: ["Encounter", "AppointmentResponse"],
            expression: "AppointmentResponse.appointment | Encounter.appointment"
        }
    ],
    "section": [
        {
            name: "section",
            'type: r5:TOKEN,
            base: ["Composition"],
            expression: "Composition.section.code"
        }
    ],
    "monograph-type": [
        {
            name: "monograph-type",
            'type: r5:TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.monograph.type"
        }
    ],
    "reason-given-code": [
        {
            name: "reason-given-code",
            'type: r5:TOKEN,
            base: ["MedicationAdministration"],
            expression: "MedicationAdministration.reason.concept"
        }
    ],
    "characteristic-type": [
        {
            name: "characteristic-type",
            'type: r5:TOKEN,
            base: ["MedicinalProductDefinition"],
            expression: "MedicinalProductDefinition.characteristic.type"
        }
    ],
    "depends-on": [
        {
            name: "depends-on",
            'type: r5:REFERENCE,
            base: ["ImplementationGuide", "ActivityDefinition", "EventDefinition", "EvidenceVariable", "Library", "Measure", "PlanDefinition"],
            expression: "ActivityDefinition.relatedArtifact.where(type='depends-on').resource | ActivityDefinition.library | EventDefinition.relatedArtifact.where(type='depends-on').resource | EvidenceVariable.relatedArtifact.where(type='depends-on').resource | Library.relatedArtifact.where(type='depends-on').resource | Measure.relatedArtifact.where(type='depends-on').resource | Measure.library | PlanDefinition.relatedArtifact.where(type='depends-on').resource | PlanDefinition.library | ImplementationGuide.dependsOn.uri"
        }
    ],
    "doc-status": [
        {
            name: "doc-status",
            'type: r5:TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.docStatus"
        }
    ],
    "protocol": [
        {
            name: "protocol",
            'type: r5:REFERENCE,
            base: ["ResearchStudy"],
            expression: "ResearchStudy.protocol"
        }
    ],
    "code-reference": [
        {
            name: "code-reference",
            'type: r5:REFERENCE,
            base: ["ServiceRequest", "Substance"],
            expression: "Substance.code.reference | ServiceRequest.code.reference"
        }
    ],
    "format-canonical": [
        {
            name: "format-canonical",
            'type: r5:REFERENCE,
            base: ["DocumentReference"],
            expression: "(DocumentReference.content.profile.value.ofType(canonical))"
        }
    ],
    "price-override": [
        {
            name: "price-override",
            'type: r5:QUANTITY,
            base: ["ChargeItem"],
            expression: "ChargeItem.totalPriceComponent.amount"
        }
    ],
    "monitoring-program-type": [
        {
            name: "monitoring-program-type",
            'type: r5:TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.monitoringProgram.type"
        }
    ],
    "procedure-udi": [
        {
            name: "procedure-udi",
            'type: r5:REFERENCE,
            base: ["Claim", "ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.procedure.udi | Claim.procedure.udi"
        }
    ],
    "group": [
        {
            name: "group",
            'type: r5:REFERENCE,
            base: ["AppointmentResponse", "Appointment"],
            expression: "Appointment.participant.actor.where(resolve() is Group) | Appointment.subject.where(resolve() is Group) | AppointmentResponse.actor.where(resolve() is Group)"
        }
    ],
    "package": [
        {
            name: "package",
            'type: r5:REFERENCE,
            base: ["PackagedProductDefinition"],
            expression: "PackagedProductDefinition.packaging.containedItem.item.reference"
        }
    ],
    "qualification-period": [
        {
            name: "qualification-period",
            'type: r5:DATE,
            base: ["Practitioner"],
            expression: "Practitioner.qualification.period"
        }
    ],
    "doseform": [
        {
            name: "doseform",
            'type: r5:TOKEN,
            base: ["MedicationKnowledge"],
            expression: "MedicationKnowledge.definitional.doseForm"
        }
    ],
    "resource": [
        {
            name: "resource",
            'type: r5:REFERENCE,
            base: ["ImplementationGuide"],
            expression: "ImplementationGuide.definition.resource.reference"
        },
        {
            name: "resource",
            'type: r5:URI,
            base: ["SubscriptionTopic"],
            expression: "SubscriptionTopic.resourceTrigger.resource | SubscriptionTopic.eventTrigger.resource | SubscriptionTopic.canFilterBy.resource | SubscriptionTopic.notificationShape.resource"
        },
        {
            name: "resource",
            'type: r5:TOKEN,
            base: ["CapabilityStatement", "CompartmentDefinition"],
            expression: "CompartmentDefinition.resource.code | CapabilityStatement.rest.resource.type"
        }
    ],
    "created": [
        {
            name: "created",
            'type: r5:DATE,
            base: ["PaymentReconciliation", "CoverageEligibilityRequest", "CoverageEligibilityResponse", "PaymentNotice", "Claim", "Basic", "ExplanationOfBenefit", "ClaimResponse"],
            expression: "ClaimResponse.created | ExplanationOfBenefit.created | Basic.created | Claim.created | PaymentNotice.created | CoverageEligibilityResponse.created | CoverageEligibilityRequest.created | PaymentReconciliation.created"
        }
    ],
    "kind": [
        {
            name: "kind",
            'type: r5:TOKEN,
            base: ["OperationDefinition", "StructureDefinition", "NamingSystem", "ActivityDefinition"],
            expression: "ActivityDefinition.kind | NamingSystem.kind | StructureDefinition.kind | OperationDefinition.kind"
        }
    ],
    "verified-date": [
        {
            name: "verified-date",
            'type: r5:DATE,
            base: ["Consent"],
            expression: "Consent.verification.verificationDate"
        }
    ],
    "participant-actor": [
        {
            name: "participant-actor",
            'type: r5:REFERENCE,
            base: ["Condition"],
            expression: "Condition.participant.actor"
        }
    ]
};

//Number of search params in FHIR_IG_SEARCH_PARAMS_6  = 51
final readonly & map<r5:FHIRSearchParameterDefinition[]> FHIR_IG_SEARCH_PARAMS_6 = {
    "format": [
        {
            name: "format",
            'type: r5:TOKEN,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.format"
        }
    ],
    "instantiates-canonical": [
        {
            name: "instantiates-canonical",
            'type: r5:REFERENCE,
            base: ["CarePlan", "Communication", "DeviceRequest", "Procedure", "ServiceRequest", "RequestOrchestration", "FamilyMemberHistory"],
            expression: "FamilyMemberHistory.instantiatesCanonical | RequestOrchestration.instantiatesCanonical | ServiceRequest.instantiatesCanonical | Procedure.instantiatesCanonical | DeviceRequest.instantiatesCanonical | Communication.instantiatesCanonical | CarePlan.instantiatesCanonical"
        }
    ],
    "validator-organization": [
        {
            name: "validator-organization",
            'type: r5:REFERENCE,
            base: ["VerificationResult"],
            expression: "VerificationResult.validator.organization"
        }
    ],
    "sent": [
        {
            name: "sent",
            'type: r5:DATE,
            base: ["Communication"],
            expression: "Communication.sent"
        }
    ],
    "code-value-concept": [
        {
            name: "code-value-concept",
            'type: r5:COMPOSITE,
            base: ["Observation", "Device"],
            expression: "Device | Observation"
        }
    ],
    "nutrition": [
        {
            name: "nutrition",
            'type: r5:REFERENCE,
            base: ["PackagedProductDefinition"],
            expression: "PackagedProductDefinition.packaging.containedItem.item.reference"
        },
        {
            name: "nutrition",
            'type: r5:TOKEN,
            base: ["NutritionIntake"],
            expression: "NutritionIntake.consumedItem.nutritionProduct.concept"
        }
    ],
    "body-structure": [
        {
            name: "body-structure",
            'type: r5:REFERENCE,
            base: ["ImagingSelection", "ServiceRequest", "ImagingStudy"],
            expression: "ImagingStudy.series.bodySite.reference | ServiceRequest.bodyStructure | ImagingSelection.bodySite.reference"
        }
    ],
    "vaccine-code": [
        {
            name: "vaccine-code",
            'type: r5:TOKEN,
            base: ["Immunization"],
            expression: "Immunization.vaccineCode"
        }
    ],
    "effect": [
        {
            name: "effect",
            'type: r5:TOKEN,
            base: ["ClinicalUseDefinition"],
            expression: "ClinicalUseDefinition.undesirableEffect.symptomConditionEffect.concept"
        }
    ],
    "topic": [
        {
            name: "topic",
            'type: r5:TOKEN,
            base: ["ActivityDefinition", "ConceptMap", "EventDefinition", "EvidenceVariable", "Library", "Measure", "NamingSystem", "PlanDefinition", "Communication"],
            expression: "Communication.topic | ActivityDefinition.topic | CodeSystem.topic | ConceptMap.topic | EventDefinition.topic | Library.topic | Measure.topic | NamingSystem.topic | PlanDefinition.topic | ValueSet.topic"
        },
        {
            name: "topic",
            'type: r5:URI,
            base: ["Subscription"],
            expression: "Subscription.topic"
        }
    ],
    "publisher": [
        {
            name: "publisher",
            'type: r5:STRING,
            base: ["ActivityDefinition", "ActorDefinition", "CapabilityStatement", "ChargeItemDefinition", "Citation", "CompartmentDefinition", "ConceptMap", "ConditionDefinition", "EventDefinition", "Evidence", "EvidenceReport", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "ImplementationGuide", "Library", "Measure", "MessageDefinition", "NamingSystem", "OperationDefinition", "PlanDefinition", "Questionnaire", "Requirements", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript"],
            expression: "ActivityDefinition.publisher | ActorDefinition.publisher | CapabilityStatement.publisher | ChargeItemDefinition.publisher | Citation.publisher | CodeSystem.publisher | CompartmentDefinition.publisher | ConceptMap.publisher | ConditionDefinition.publisher | EventDefinition.publisher | Evidence.publisher | EvidenceReport.publisher | EvidenceVariable.publisher | ExampleScenario.publisher | GraphDefinition.publisher | ImplementationGuide.publisher | Library.publisher | Measure.publisher | MessageDefinition.publisher | NamingSystem.publisher | OperationDefinition.publisher | PlanDefinition.publisher | Questionnaire.publisher | Requirements.publisher | SearchParameter.publisher | StructureDefinition.publisher | StructureMap.publisher | TerminologyCapabilities.publisher | TestScript.publisher | ValueSet.publisher"
        }
    ],
    "dose-form": [
        {
            name: "dose-form",
            'type: r5:TOKEN,
            base: ["ManufacturedItemDefinition", "AdministrableProductDefinition"],
            expression: "AdministrableProductDefinition.administrableDoseForm | ManufacturedItemDefinition.manufacturedDoseForm"
        }
    ],
    "allocation-encounter": [
        {
            name: "allocation-encounter",
            'type: r5:REFERENCE,
            base: ["PaymentReconciliation"],
            expression: "PaymentReconciliation.allocation.encounter"
        }
    ],
    "relatesto": [
        {
            name: "relatesto",
            'type: r5:REFERENCE,
            base: ["DocumentReference"],
            expression: "DocumentReference.relatesTo.target"
        }
    ],
    "value-canonical": [
        {
            name: "value-canonical",
            'type: r5:URI,
            base: ["Observation"],
            expression: "Observation.value.ofType(canonical)"
        }
    ],
    "care-team": [
        {
            name: "care-team",
            'type: r5:REFERENCE,
            base: ["Claim", "CarePlan", "ExplanationOfBenefit"],
            expression: "ExplanationOfBenefit.careTeam.provider | CarePlan.careTeam | Claim.careTeam.provider"
        }
    ],
    "contraindication-reference": [
        {
            name: "contraindication-reference",
            'type: r5:REFERENCE,
            base: ["ClinicalUseDefinition"],
            expression: "ClinicalUseDefinition.contraindication.diseaseSymptomProcedure.reference"
        }
    ],
    "request": [
        {
            name: "request",
            'type: r5:REFERENCE,
            base: ["CoverageEligibilityResponse", "MedicationAdministration", "BiologicallyDerivedProduct", "PaymentReconciliation", "EnrollmentResponse", "ClaimResponse", "PaymentNotice"],
            expression: "PaymentNotice.request | ClaimResponse.request | EnrollmentResponse.request | PaymentReconciliation.request | BiologicallyDerivedProduct.request | MedicationAdministration.request | CoverageEligibilityResponse.request"
        },
        {
            name: "request",
            'type: r5:TOKEN,
            base: ["GuidanceResponse"],
            expression: "GuidanceResponse.requestIdentifier"
        }
    ],
    "agent-type": [
        {
            name: "agent-type",
            'type: r5:TOKEN,
            base: ["Provenance"],
            expression: "Provenance.agent.type"
        }
    ],
    "purpose": [
        {
            name: "purpose",
            'type: r5:TOKEN,
            base: ["Consent", "AuditEvent"],
            expression: "AuditEvent.authorization | AuditEvent.agent.authorization | Consent.provision.purpose"
        }
    ],
    "link": [
        {
            name: "link",
            'type: r5:REFERENCE,
            base: ["Patient", "Person"],
            expression: "Person.link.target | Patient.link.other"
        }
    ],
    "membership": [
        {
            name: "membership",
            'type: r5:TOKEN,
            base: ["Group"],
            expression: "Group.membership"
        }
    ],
    "network": [
        {
            name: "network",
            'type: r5:REFERENCE,
            base: ["OrganizationAffiliation"],
            expression: "OrganizationAffiliation.network"
        }
    ],
    "onset-date": [
        {
            name: "onset-date",
            'type: r5:DATE,
            base: ["Condition"],
            expression: "Condition.onset.ofType(dateTime) | Condition.onset.ofType(Period)"
        }
    ],
    "phonetic": [
        {
            name: "phonetic",
            'type: r5:STRING,
            base: ["Organization", "InsurancePlan", "Patient", "Person", "Practitioner", "RelatedPerson"],
            expression: "Patient.name | Person.name | Practitioner.name | RelatedPerson.name | InsurancePlan.name | Organization.name"
        }
    ],
    "patient": [
        {
            name: "patient",
            'type: r5:REFERENCE,
            base: ["GenomicStudy", "DeviceDispense", "DeviceAssociation", "EncounterHistory", "BiologicallyDerivedProductDispense", "Account", "AdverseEvent", "AllergyIntolerance", "Appointment", "AppointmentResponse", "AuditEvent", "Basic", "BodyStructure", "CarePlan", "CareTeam", "ChargeItem", "Claim", "ClaimResponse", "ClinicalImpression", "Communication", "CommunicationRequest", "Composition", "Condition", "Consent", "Contract", "Coverage", "CoverageEligibilityRequest", "CoverageEligibilityResponse", "DetectedIssue", "DeviceRequest", "DeviceUsage", "DiagnosticReport", "DocumentReference", "Encounter", "EnrollmentRequest", "EpisodeOfCare", "ExplanationOfBenefit", "FamilyMemberHistory", "Flag", "Goal", "GuidanceResponse", "ImagingSelection", "ImagingStudy", "Immunization", "ImmunizationEvaluation", "ImmunizationRecommendation", "Invoice", "List", "MeasureReport", "MedicationAdministration", "MedicationDispense", "MedicationRequest", "MedicationStatement", "MolecularSequence", "NutritionIntake", "NutritionOrder", "Observation", "Person", "Procedure", "Provenance", "QuestionnaireResponse", "RelatedPerson", "RequestOrchestration", "ResearchSubject", "RiskAssessment", "ServiceRequest", "Specimen", "SupplyDelivery", "SupplyRequest", "Task", "VisionPrescription"],
            expression: "Account.subject.where(resolve() is Patient) | AdverseEvent.subject.where(resolve() is Patient) | AllergyIntolerance.patient | Appointment.participant.actor.where(resolve() is Patient) | Appointment.subject.where(resolve() is Patient) | AppointmentResponse.actor.where(resolve() is Patient) | AuditEvent.patient | Basic.subject.where(resolve() is Patient) | BodyStructure.patient | CarePlan.subject.where(resolve() is Patient) | CareTeam.subject.where(resolve() is Patient) | ChargeItem.subject.where(resolve() is Patient) | Claim.patient | ClaimResponse.patient | ClinicalImpression.subject.where(resolve() is Patient) | Communication.subject.where(resolve() is Patient) | CommunicationRequest.subject.where(resolve() is Patient) | Composition.subject.where(resolve() is Patient) | Condition.subject.where(resolve() is Patient) | Consent.subject.where(resolve() is Patient) | Contract.subject.where(resolve() is Patient) | Coverage.beneficiary | CoverageEligibilityRequest.patient | CoverageEligibilityResponse.patient | DetectedIssue.subject.where(resolve() is Patient) | DeviceRequest.subject.where(resolve() is Patient) | DeviceUsage.patient | DiagnosticReport.subject.where(resolve() is Patient) | DocumentReference.subject.where(resolve() is Patient) | Encounter.subject.where(resolve() is Patient) | EnrollmentRequest.candidate | EpisodeOfCare.patient | ExplanationOfBenefit.patient | FamilyMemberHistory.patient | Flag.subject.where(resolve() is Patient) | Goal.subject.where(resolve() is Patient) | GuidanceResponse.subject.where(resolve() is Patient) | ImagingSelection.subject.where(resolve() is Patient) | ImagingStudy.subject.where(resolve() is Patient) | Immunization.patient | ImmunizationEvaluation.patient | ImmunizationRecommendation.patient | Invoice.subject.where(resolve() is Patient) | List.subject.where(resolve() is Patient) | MeasureReport.subject.where(resolve() is Patient) | MedicationAdministration.subject.where(resolve() is Patient) | MedicationDispense.subject.where(resolve() is Patient) | MedicationRequest.subject.where(resolve() is Patient) | MedicationStatement.subject.where(resolve() is Patient) | MolecularSequence.subject.where(resolve() is Patient) | NutritionIntake.subject.where(resolve() is Patient) | NutritionOrder.subject.where(resolve() is Patient) | Observation.subject.where(resolve() is Patient) | Person.link.target.where(resolve() is Patient) | Procedure.subject.where(resolve() is Patient) | Provenance.patient | QuestionnaireResponse.subject.where(resolve() is Patient) | RelatedPerson.patient | RequestOrchestration.subject.where(resolve() is Patient) | ResearchSubject.subject.where(resolve() is Patient) | RiskAssessment.subject.where(resolve() is Patient) | ServiceRequest.subject.where(resolve() is Patient) | Specimen.subject.where(resolve() is Patient) | SupplyDelivery.patient | SupplyRequest.deliverFor | Task.for.where(resolve() is Patient) | VisionPrescription.patient | BiologicallyDerivedProductDispense.patient | EncounterHistory.subject.where(resolve() is Patient) | DeviceAssociation.subject.where(resolve() is Patient) | DeviceDispense.subject.where(resolve() is Patient) | GenomicStudy.subject.where(resolve() is Patient)"
        }

    ],
    "specimen": [
        {
            name: "specimen",
            'type: r5:REFERENCE,
            base: ["DiagnosticReport", "ServiceRequest", "Observation"],
            expression: "Observation.specimen | ServiceRequest.specimen | DiagnosticReport.specimen"
        }
    ],
    "value": [
        {
            name: "value",
            'type: r5:TOKEN,
            base: ["Group"],
            expression: "(Group.characteristic.value.ofType(CodeableConcept)) | (Group.characteristic.value.ofType(boolean))"
        },
        {
            name: "value",
            'type: r5:STRING,
            base: ["NamingSystem"],
            expression: "NamingSystem.uniqueId.value"
        }
    ],
    "reaction-date": [
        {
            name: "reaction-date",
            'type: r5:DATE,
            base: ["Immunization"],
            expression: "Immunization.reaction.date"
        }
    ],
    "prescriber": [
        {
            name: "prescriber",
            'type: r5:REFERENCE,
            base: ["VisionPrescription"],
            expression: "VisionPrescription.prescriber"
        }
    ],
    "quantity": [
        {
            name: "quantity",
            'type: r5:QUANTITY,
            base: ["ChargeItem", "Substance"],
            expression: "Substance.quantity | ChargeItem.quantity"
        }
    ],
    "primarysource-date": [
        {
            name: "primarysource-date",
            'type: r5:DATE,
            base: ["VerificationResult"],
            expression: "VerificationResult.primarySource.validationDate"
        }
    ],
    "combo-code": [
        {
            name: "combo-code",
            'type: r5:TOKEN,
            base: ["Observation", "Questionnaire"],
            expression: "Questionnaire.code | Questionnaire.item.code | Observation.code | Observation.component.code"
        }
    ],
    "totalgross": [
        {
            name: "totalgross",
            'type: r5:QUANTITY,
            base: ["Invoice"],
            expression: "Invoice.totalGross"
        }
    ],
    "actuality": [
        {
            name: "actuality",
            'type: r5:TOKEN,
            base: ["AdverseEvent"],
            expression: "AdverseEvent.actuality"
        }
    ],
    "adherence": [
        {
            name: "adherence",
            'type: r5:TOKEN,
            base: ["MedicationStatement"],
            expression: "MedicationStatement.adherence.code"
        }
    ],
    "verified": [
        {
            name: "verified",
            'type: r5:TOKEN,
            base: ["Consent"],
            expression: "Consent.verification.verified"
        }
    ],
    "encounter": [
        {
            name: "encounter",
            'type: r5:REFERENCE,
            base: ["MedicationAdministration", "MedicationRequest", "AuditEvent", "CarePlan", "ChargeItem", "Claim", "ClinicalImpression", "Communication", "CommunicationRequest", "Composition", "Condition", "DeviceRequest", "DiagnosticReport", "EncounterHistory", "ExplanationOfBenefit", "Flag", "ImagingStudy", "List", "MedicationDispense", "MedicationStatement", "NutritionIntake", "NutritionOrder", "Observation", "Procedure", "Provenance", "QuestionnaireResponse", "RequestOrchestration", "RiskAssessment", "ServiceRequest", "Task", "VisionPrescription"],
            expression: "AuditEvent.encounter | CarePlan.encounter | ChargeItem.encounter | Claim.item.encounter | ClinicalImpression.encounter | Communication.encounter | CommunicationRequest.encounter | Composition.encounter | Condition.encounter | DeviceRequest.encounter | DiagnosticReport.encounter | EncounterHistory.encounter | ExplanationOfBenefit.item.encounter | Flag.encounter | ImagingStudy.encounter | List.encounter | MedicationDispense.encounter | MedicationStatement.encounter | NutritionIntake.encounter | NutritionOrder.encounter | Observation.encounter | Procedure.encounter | Provenance.encounter | QuestionnaireResponse.encounter | RequestOrchestration.encounter | RiskAssessment.encounter | ServiceRequest.encounter | Task.encounter | VisionPrescription.encounter | MedicationAdministration.encounter | MedicationRequest.encounter"
        }
    ],
    "intent": [
        {
            name: "intent",
            'type: r5:TOKEN,
            base: ["RequestOrchestration", "DeviceRequest", "MedicationRequest", "ServiceRequest", "CarePlan", "Task"],
            expression: "Task.intent | CarePlan.intent | ServiceRequest.intent | MedicationRequest.intent | DeviceRequest.intent | RequestOrchestration.intent"
        }
    ],
    "whenprepared": [
        {
            name: "whenprepared",
            'type: r5:DATE,
            base: ["MedicationDispense"],
            expression: "MedicationDispense.whenPrepared"
        }
    ],
    "supported-profile": [
        {
            name: "supported-profile",
            'type: r5:REFERENCE,
            base: ["CapabilityStatement"],
            expression: "CapabilityStatement.rest.resource.supportedProfile"
        }
    ],
    "contenttype": [
        {
            name: "contenttype",
            'type: r5:TOKEN,
            base: ["DocumentReference"],
            expression: "DocumentReference.content.attachment.contentType"
        }
    ],
    "manufactured-item": [
        {
            name: "manufactured-item",
            'type: r5:REFERENCE,
            base: ["PackagedProductDefinition", "AdministrableProductDefinition"],
            expression: "AdministrableProductDefinition.producedFrom | PackagedProductDefinition.packaging.containedItem.item.reference"
        }
    ],
    "response": [
        {
            name: "response",
            'type: r5:REFERENCE,
            base: ["PaymentNotice"],
            expression: "PaymentNotice.response"
        }
    ],
    "target-scope-uri": [
        {
            name: "target-scope-uri",
            'type: r5:URI,
            base: ["ConceptMap"],
            expression: "(ConceptMap.targetScope as uri)"
        }
    ],
    "interaction": [
        {
            name: "interaction",
            'type: r5:TOKEN,
            base: ["ClinicalUseDefinition"],
            expression: "ClinicalUseDefinition.interaction.type"
        }
    ],
    "derivation": [
        {
            name: "derivation",
            'type: r5:TOKEN,
            base: ["StructureDefinition"],
            expression: "StructureDefinition.derivation"
        }
    ],
    "component-value-concept": [
        {
            name: "component-value-concept",
            'type: r5:TOKEN,
            base: ["Observation"],
            expression: "Observation.component.value.ofType(CodeableConcept)"
        }
    ],
    "category": [
        {
            name: "category",
            'type: r5:TOKEN,
            base: ["Observation", "MedicationStatement", "DeviceMetric", "Communication", "Flag", "MessageDefinition", "CarePlan", "SupplyRequest", "DiagnosticReport", "Procedure", "ServiceRequest", "CommunicationRequest", "Condition", "CareTeam", "Consent", "AdverseEvent", "AllergyIntolerance", "AuditEvent", "Composition", "MedicationRequest", "DetectedIssue", "Substance", "Goal", "ObservationDefinition", "DocumentReference"],
            expression: "DocumentReference.category | ObservationDefinition.category | Goal.category | Substance.category | DetectedIssue.category | MedicationRequest.category | Composition.category | AuditEvent.category | AllergyIntolerance.category | AdverseEvent.category | Consent.category | CareTeam.category | Condition.category | CommunicationRequest.category | ServiceRequest.category | Procedure.category | DiagnosticReport.category | SupplyRequest.category | CarePlan.category | MessageDefinition.category | Flag.category | Communication.category | DeviceMetric.category | MedicationStatement.category | Observation.category"
        }
    ],
    "account": [
        {
            name: "account",
            'type: r5:REFERENCE,
            base: ["Encounter", "ChargeItem", "Invoice"],
            expression: "Invoice.account | ChargeItem.account | Encounter.account"
        }
    ],
    "payment-issuer": [
        {
            name: "payment-issuer",
            'type: r5:REFERENCE,
            base: ["PaymentReconciliation"],
            expression: "PaymentReconciliation.paymentIssuer"
        }
    ]
};

// Operations in international IG (key = operation name)
final readonly & map<r5:FHIROperationDefinition[]> INTERNATIONAL_IG_OPERATIONS = {
    "apply": [
        {
            name: "apply",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "ActivityDefinition"
            ],
            'parameter: [
                {
                    name: "activityDefinition",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "ActivityDefinition"
                },
                {
                    name: "subject",
                    use: r5:INPUT,
                    min: 1,
                    max: "*",
                    'type: "string"
                },
                {
                    name: "encounter",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "practitioner",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "organization",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "userType",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "userLanguage",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "userTaskContext",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "setting",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "settingContext",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Any"
                }
            ]
        },
        {
            name: "apply",
            instanceLevel: true,
            typeLevel: false,
            systemLevel: false,
            'resource: [
                "ChargeItemDefinition"
            ],
            'parameter: [
                {
                    name: "chargeItem",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "Reference"
                },
                {
                    name: "account",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "Reference"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Any"
                }
            ]
        },
        {
            name: "apply",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "PlanDefinition"
            ],
            'parameter: [
                {
                    name: "planDefinition",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "PlanDefinition"
                },
                {
                    name: "subject",
                    use: r5:INPUT,
                    min: 1,
                    max: "*",
                    'type: "string"
                },
                {
                    name: "encounter",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "practitioner",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "organization",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "userType",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "userLanguage",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "userTaskContext",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "setting",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "settingContext",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "CarePlan"
                }
            ]
        }
    ],
    "data-requirements": [
        {
            name: "data-requirements",
            instanceLevel: true,
            typeLevel: false,
            systemLevel: false,
            'resource: [
                "ActivityDefinition"
            ],
            'parameter: [
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Library"
                }
            ]
        },
        {
            name: "data-requirements",
            instanceLevel: true,
            typeLevel: false,
            systemLevel: true,
            'resource: [
                "Library"
            ],
            'parameter: [
                {
                    name: "target",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Library"
                }
            ]
        },
        {
            name: "data-requirements",
            instanceLevel: true,
            typeLevel: false,
            systemLevel: false,
            'resource: [
                "Measure"
            ],
            'parameter: [
                {
                    name: "periodStart",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "periodEnd",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Library"
                }
            ]
        },
        {
            name: "data-requirements",
            instanceLevel: true,
            typeLevel: false,
            systemLevel: false,
            'resource: [
                "PlanDefinition"
            ],
            'parameter: [
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Library"
                }
            ]
        }
    ],
    "conforms": [
        {
            name: "conforms",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "CapabilityStatement"
            ],
            'parameter: [
                {
                    name: "left",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "canonical"
                },
                {
                    name: "right",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "canonical"
                },
                {
                    name: "mode",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "issues",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "OperationOutcome"
                },
                {
                    name: "union",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "1",
                    'type: "CapabilityStatement"
                },
                {
                    name: "intersection",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "1",
                    'type: "CapabilityStatement"
                }
            ]
        }
    ],
    "implements": [
        {
            name: "implements",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "CapabilityStatement"
            ],
            'parameter: [
                {
                    name: "server",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "canonical"
                },
                {
                    name: "client",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "canonical"
                },
                {
                    name: "resource",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CapabilityStatement"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "OperationOutcome"
                }
            ]
        }
    ],
    "subset": [
        {
            name: "subset",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "CapabilityStatement"
            ],
            'parameter: [
                {
                    name: "server",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "resource",
                    use: r5:INPUT,
                    min: 1,
                    max: "*",
                    'type: "code"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "CapabilityStatement"
                }
            ]
        }
    ],
    "versions": [
        {
            name: "versions",
            instanceLevel: false,
            typeLevel: false,
            systemLevel: true,
            'resource: [
                "CapabilityStatement"
            ],
            'parameter: [
                {
                    name: "version",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "*",
                    'type: "code"
                },
                {
                    name: "default",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "code"
                }
            ]
        }
    ],
    "submit": [
        {
            name: "submit",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Claim"
            ],
            'parameter: [
                {
                    name: "resource",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "Resource"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Resource"
                }
            ]
        },
        {
            name: "submit",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "CoverageEligibilityRequest"
            ],
            'parameter: [
                {
                    name: "resource",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "Resource"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Resource"
                }
            ]
        }
    ],
    "find-matches": [
        {
            name: "find-matches",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "CodeSystem"
            ],
            'parameter: [
                {
                    name: "system",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "version",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "property",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    "part": [
                        {
                            name: "code",
                            use: r5:INPUT,
                            min: 1,
                            max: "1",
                            'type: "code"
                        },
                        {
                            name: "value",
                            use: r5:INPUT,
                            min: 0,
                            max: "1",
                            'type: "Element"
                        },
                        {
                            name: "subproperty",
                            use: r5:INPUT,
                            min: 0,
                            max: "*",
                            "part": [
                                {
                                    name: "code",
                                    use: r5:INPUT,
                                    min: 1,
                                    max: "1",
                                    'type: "code"
                                },
                                {
                                    name: "value",
                                    use: r5:INPUT,
                                    min: 1,
                                    max: "1",
                                    'type: "Element"
                                }
                            ]
                        }
                    ]
                },
                {
                    name: "exact",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "compositional",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "match",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "*",
                    "part": [
                        {
                            name: "code",
                            use: r5:OUTPUT,
                            min: 1,
                            max: "1",
                            'type: "Coding"
                        },
                        {
                            name: "unmatched",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "*",
                            "part": [
                                {
                                    name: "code",
                                    use: r5:OUTPUT,
                                    min: 1,
                                    max: "1",
                                    'type: "code"
                                },
                                {
                                    name: "value",
                                    use: r5:OUTPUT,
                                    min: 1,
                                    max: "1",
                                    'type: "Element"
                                },
                                {
                                    name: "property",
                                    use: r5:OUTPUT,
                                    min: 0,
                                    max: "*",
                                    "part": [
                                        {
                                            name: "code",
                                            use: r5:OUTPUT,
                                            min: 1,
                                            max: "1",
                                            'type: "code"
                                        },
                                        {
                                            name: "value",
                                            use: r5:OUTPUT,
                                            min: 1,
                                            max: "1",
                                            'type: "Element"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            name: "comment",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "1",
                            'type: "string"
                        }
                    ]
                }
            ]
        }
    ],
    "lookup": [
        {
            name: "lookup",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "CodeSystem"
            ],
            'parameter: [
                {
                    name: "code",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "system",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "version",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "coding",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "Coding"
                },
                {
                    name: "date",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "dateTime"
                },
                {
                    name: "displayLanguage",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "property",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "code"
                },
                {
                    name: "name",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "version",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "display",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "designation",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "*",
                    "part": [
                        {
                            name: "language",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "1",
                            'type: "code"
                        },
                        {
                            name: "use",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "1",
                            'type: "Coding"
                        },
                        {
                            name: "value",
                            use: r5:OUTPUT,
                            min: 1,
                            max: "1",
                            'type: "string"
                        }
                    ]
                },
                {
                    name: "property",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "*",
                    "part": [
                        {
                            name: "code",
                            use: r5:OUTPUT,
                            min: 1,
                            max: "1",
                            'type: "code"
                        },
                        {
                            name: "value",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "1",
                            'type: "Element"
                        },
                        {
                            name: "description",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "1",
                            'type: "string"
                        },
                        {
                            name: "subproperty",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "*",
                            "part": [
                                {
                                    name: "code",
                                    use: r5:OUTPUT,
                                    min: 1,
                                    max: "1",
                                    'type: "code"
                                },
                                {
                                    name: "value",
                                    use: r5:OUTPUT,
                                    min: 1,
                                    max: "1",
                                    'type: "Element"
                                },
                                {
                                    name: "description",
                                    use: r5:OUTPUT,
                                    min: 0,
                                    max: "1",
                                    'type: "string"
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    "subsumes": [
        {
            name: "subsumes",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "CodeSystem"
            ],
            'parameter: [
                {
                    name: "codeA",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "codeB",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "system",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "version",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "codingA",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "Coding"
                },
                {
                    name: "codingB",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "Coding"
                },
                {
                    name: "outcome",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "code"
                }
            ]
        }
    ],
    "validate-code": [
        {
            name: "validate-code",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "CodeSystem"
            ],
            'parameter: [
                {
                    name: "url",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "codeSystem",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeSystem"
                },
                {
                    name: "code",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "version",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "display",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "coding",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "Coding"
                },
                {
                    name: "codeableConcept",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "date",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "dateTime"
                },
                {
                    name: "abstract",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "displayLanguage",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "result",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "message",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "display",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                }
            ]
        },
        {
            name: "validate-code",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "ValueSet"
            ],
            'parameter: [
                {
                    name: "url",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "context",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "valueSet",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "ValueSet"
                },
                {
                    name: "valueSetVersion",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "code",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "system",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "systemVersion",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "display",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "coding",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "Coding"
                },
                {
                    name: "codeableConcept",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "date",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "dateTime"
                },
                {
                    name: "abstract",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "displayLanguage",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "result",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "message",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "display",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                }
            ]
        }
    ],
    "document": [
        {
            name: "document",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Composition"
            ],
            'parameter: [
                {
                    name: "id",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "persist",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "graph",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                }
            ]
        }
    ],
    "closure": [
        {
            name: "closure",
            instanceLevel: false,
            typeLevel: false,
            systemLevel: true,
            'resource: [
                "ConceptMap"
            ],
            'parameter: [
                {
                    name: "name",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "concept",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "Coding"
                },
                {
                    name: "version",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "ConceptMap"
                }
            ]
        }
    ],
    "translate": [
        {
            name: "translate",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "ConceptMap"
            ],
            'parameter: [
                {
                    name: "url",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "conceptMap",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "ConceptMap"
                },
                {
                    name: "conceptMapVersion",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "code",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "system",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "version",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "source",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "coding",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "Coding"
                },
                {
                    name: "codeableConcept",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "CodeableConcept"
                },
                {
                    name: "target",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "targetsystem",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "dependency",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    "part": [
                        {
                            name: "element",
                            use: r5:INPUT,
                            min: 0,
                            max: "1",
                            'type: "uri"
                        },
                        {
                            name: "concept",
                            use: r5:INPUT,
                            min: 0,
                            max: "1",
                            'type: "CodeableConcept"
                        }
                    ]
                },
                {
                    name: "reverse",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "result",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "message",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "match",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "*",
                    "part": [
                        {
                            name: "equivalence",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "1",
                            'type: "code"
                        },
                        {
                            name: "concept",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "1",
                            'type: "Coding"
                        },
                        {
                            name: "product",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "*",
                            "part": [
                                {
                                    name: "element",
                                    use: r5:OUTPUT,
                                    min: 0,
                                    max: "1",
                                    'type: "uri"
                                },
                                {
                                    name: "concept",
                                    use: r5:OUTPUT,
                                    min: 0,
                                    max: "1",
                                    'type: "Coding"
                                }
                            ]
                        },
                        {
                            name: "source",
                            use: r5:OUTPUT,
                            min: 0,
                            max: "1",
                            'type: "uri"
                        }
                    ]
                }
            ]
        }
    ],
    "everything": [
        {
            name: "everything",
            instanceLevel: true,
            typeLevel: false,
            systemLevel: false,
            'resource: [
                "Encounter"
            ],
            'parameter: [
                {
                    name: "_since",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "instant"
                },
                {
                    name: "_type",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "code"
                },
                {
                    name: "_count",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "integer"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Bundle"
                }
            ]
        },
        {
            name: "everything",
            instanceLevel: true,
            typeLevel: false,
            systemLevel: false,
            'resource: [
                "Group"
            ],
            'parameter: [
                {
                    name: "start",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "end",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "_since",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "instant"
                },
                {
                    name: "_type",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "code"
                },
                {
                    name: "_count",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "integer"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Bundle"
                }
            ]
        },
        {
            name: "everything",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "MedicinalProduct"
            ],
            'parameter: [
                {
                    name: "_since",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "instant"
                },
                {
                    name: "_count",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "integer"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Bundle"
                }
            ]
        },
        {
            name: "everything",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Patient"
            ],
            'parameter: [
                {
                    name: "start",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "end",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "_since",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "instant"
                },
                {
                    name: "_type",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "code"
                },
                {
                    name: "_count",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "integer"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Bundle"
                }
            ]
        }
    ],
    "find": [
        {
            name: "find",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "List"
            ],
            'parameter: [
                {
                    name: "patient",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "id"
                },
                {
                    name: "name",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "code"
                }
            ]
        }
    ],
    "care-gaps": [
        {
            name: "care-gaps",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Measure"
            ],
            'parameter: [
                {
                    name: "periodStart",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "periodEnd",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "topic",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "subject",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Bundle"
                }
            ]
        }
    ],
    "collect-data": [
        {
            name: "collect-data",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Measure"
            ],
            'parameter: [
                {
                    name: "periodStart",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "periodEnd",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "measure",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "subject",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "practitioner",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "lastReceivedOn",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "dateTime"
                },
                {
                    name: "measureReport",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "MeasureReport"
                },
                {
                    name: "resource",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "*",
                    'type: "Resource"
                }
            ]
        }
    ],
    "evaluate-measure": [
        {
            name: "evaluate-measure",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Measure"
            ],
            'parameter: [
                {
                    name: "periodStart",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "periodEnd",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "date"
                },
                {
                    name: "measure",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "reportType",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "subject",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "practitioner",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "lastReceivedOn",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "dateTime"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "MeasureReport"
                }
            ]
        }
    ],
    "submit-data": [
        {
            name: "submit-data",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Measure"
            ],
            'parameter: [
                {
                    name: "measureReport",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "MeasureReport"
                },
                {
                    name: "resource",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "Resource"
                }
            ]
        }
    ],
    "process-message": [
        {
            name: "process-message",
            instanceLevel: false,
            typeLevel: false,
            systemLevel: true,
            'resource: [
                "MessageHeader"
            ],
            'parameter: [
                {
                    name: "content",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "Bundle"
                },
                {
                    name: "async",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "response-url",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "url"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "1",
                    'type: "Bundle"
                }
            ]
        }
    ],
    "preferred-id": [
        {
            name: "preferred-id",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "NamingSystem"
            ],
            'parameter: [
                {
                    name: "id",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "type",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "result",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "string"
                }
            ]
        }
    ],
    "lastn": [
        {
            name: "lastn",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Observation"
            ],
            'parameter: [
                {
                    name: "max",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "positiveInt"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Bundle"
                }
            ]
        }
    ],
    "stats": [
        {
            name: "stats",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Observation"
            ],
            'parameter: [
                {
                    name: "subject",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "code",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "string"
                },
                {
                    name: "system",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "coding",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "Coding"
                },
                {
                    name: "duration",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "decimal"
                },
                {
                    name: "period",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "Period"
                },
                {
                    name: "statistic",
                    use: r5:INPUT,
                    min: 1,
                    max: "*",
                    'type: "code"
                },
                {
                    name: "include",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "limit",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "positiveInt"
                },
                {
                    name: "statistics",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "*",
                    'type: "Observation"
                },
                {
                    name: "source",
                    use: r5:OUTPUT,
                    min: 0,
                    max: "*",
                    'type: "Observation"
                }
            ]
        }
    ],
    "match": [
        {
            name: "match",
            instanceLevel: false,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "Patient"
            ],
            'parameter: [
                {
                    name: "resource",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "Resource"
                },
                {
                    name: "onlyCertainMatches",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "count",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "integer"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Bundle"
                }
            ]
        }
    ],
    "questionnaire": [
        {
            name: "questionnaire",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "StructureDefinition"
            ],
            'parameter: [
                {
                    name: "identifier",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "canonical"
                },
                {
                    name: "profile",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "url",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "canonical"
                },
                {
                    name: "supportedOnly",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Questionnaire"
                }
            ]
        }
    ],
    "snapshot": [
        {
            name: "snapshot",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "StructureDefinition"
            ],
            'parameter: [
                {
                    name: "definition",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "StructureDefinition"
                },
                {
                    name: "url",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "StructureDefinition"
                }
            ]
        }
    ],
    "transform": [
        {
            name: "transform",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "StructureMap"
            ],
            'parameter: [
                {
                    name: "source",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "content",
                    use: r5:INPUT,
                    min: 1,
                    max: "1",
                    'type: "Resource"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "Resource"
                }
            ]
        }
    ],
    "expand": [
        {
            name: "expand",
            instanceLevel: true,
            typeLevel: true,
            systemLevel: false,
            'resource: [
                "ValueSet"
            ],
            'parameter: [
                {
                    name: "url",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "valueSet",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "ValueSet"
                },
                {
                    name: "valueSetVersion",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "context",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "uri"
                },
                {
                    name: "contextDirection",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "filter",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "string"
                },
                {
                    name: "date",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "dateTime"
                },
                {
                    name: "offset",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "integer"
                },
                {
                    name: "count",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "integer"
                },
                {
                    name: "includeDesignations",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "designation",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "string"
                },
                {
                    name: "includeDefinition",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "activeOnly",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "excludeNested",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "excludeNotForUI",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "excludePostCoordinated",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "boolean"
                },
                {
                    name: "displayLanguage",
                    use: r5:INPUT,
                    min: 0,
                    max: "1",
                    'type: "code"
                },
                {
                    name: "exclude-system",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "canonical"
                },
                {
                    name: "system-version",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "canonical"
                },
                {
                    name: "check-system-version",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "canonical"
                },
                {
                    name: "force-system-version",
                    use: r5:INPUT,
                    min: 0,
                    max: "*",
                    'type: "canonical"
                },
                {
                    name: "return",
                    use: r5:OUTPUT,
                    min: 1,
                    max: "1",
                    'type: "ValueSet"
                }
            ]
        }
    ]
};

public json[] FHIR_VALUE_SETS = [];
public json[] FHIR_CODE_SYSTEMS = [];
